{"version":3,"sources":["logo.svg","components/helpers/Renderer.js","scripts/Helper.js","components/helpers/Groups.js","data/canvassrc.js","components/dashboard/display/GetTrait.js","components/dashboard/display/Mint.js","components/dashboard/display/Profile.js","components/dashboard/display/Rewards.js","components/dashboard/display/Summon.js","components/dashboard/display/Upgrade.js","components/dashboard/display/Vote.js","components/dashboard/display/StarterPack.js","components/dashboard/TombstoneMeniu.js","components/dashboard/Dashboard.js","components/marketplace/NFTcard.js","components/marketplace/Market.js","components/wars/Wars.js","App.js","reportWebVitals.js","index.js"],"names":["imageURL","drawSingleCanvas","URL","canvasID","otherValue","ctx","document","getElementById","getContext","img","Image","src","onload","drawImage","drawSkeletoonFull","genes","strength","indexer","downscaleTimes","finalScale","j","singleGeneD","singleStrD","singleGeneWhole","breakpoints","i","flaggedWhole","substring","TraitMap","hasOwnProperty","Object","keys","length","parseInt","toString","setAttribute","downscaleRecursion","myCanvas","counter","resample_single","width","height","canvas","resize_canvas","width_source","height_source","ratio_w","Math","round","ratio_h","ratio_w_half","ceil","ratio_h_half","getImageData","img2","createImageData","data","data2","x2","weight","weights","weights_alpha","gx_r","gx_g","gx_b","gx_a","center_y","yy_start","floor","yy_stop","yy","dy","abs","center_x","w0","xx_start","xx_stop","xx","dx","w","sqrt","pos_x","clearRect","putImageData","fetchMetadata","url","a","fetch","response","json","jsonData","web3","Web3","givenProvider","contractSPSK","eth","Contract","abi","SPSK","contractSHY","SHY","contractSpecials","Specials","contractCreatoons","Creatoons","aTWSP","aTWT","aTWG","aTWLogic","aTWRewards","aTWMarket","aTWStarter","aTWWarsTest","cTWWars","TestNetSPSK","TWWars","cTWSP","TWSP","cTWT","TWT","cTWG","TWG","cTWB","TWB","cTWLogic","TWLogic","cTWRewards","TWRewards","cTWMarket","TWMarket","cTWStarter","StarterPackPRomo","cSPSK","uibatch","button_default","gen1Placeholder","gen2Placeholder","traitInv","glyphInv","TWWarsUI","icon_plus","icon_minus","icon_yes","icon_no","button_mini2h","icon_Bg_D","icon_Bg_M","icon_Pet_D","icon_Pet_M","icon_Body_D","icon_Body_M","icon_Mouth_D","icon_Mouth_M","icon_Head_D","icon_Head_M","icon_Eye_D","icon_Eye_M","icon_Hat_D","icon_Hat_M","icon_Item_D","icon_Item_M","icon_Cape_D","icon_Cape_M","TWWSkelly","TWWZombie","TWWDevil","TWWBackgrounds","GetTrait","prop","useState","displaySettings","setDisplaySettings","selectedGeneIndex","setselectedGeneIndex","messageStatus","setMessageStatus","geneIcons","listToGeneIndexer","index","drawPreview","selectedGene","pStr","prefix","strSeq","edited","twj","changeStrSeq","pGene","geneSeq","geneSingle","sendTX","position","skeletoonID","skeletoonTokenId","strDissasermbler","txData","methods","getGene","encodeABI","address","estimateGas","from","getGasPrice","to","gas","gasPrice","sendTransaction","on","receipt","geneIndexertoArr","geneIndex","class","geneDisasaemblerMapped","sequence","listAllItemsf","map","gene","id","onClick","actionDisplay","className","traitCanvas","alt","listItems","renderTraits","useEffect","Mint","SPSKbalance","setSPSKbalance","SPSKsupply","setSPSKsupply","claimedTokens","setClaimedTokens","mintAmount","setMintAmount","price","setPrice","contractTWSP","claimTX","claim","balanceSPSK","totalSupply","call","err","result","console","log","setTokensToClaim","idArr","amount","splitArr","split","slice","fetchSPSKbalance","walletOfOwner","temp","unclaimed","isTokenClaimedBatch","getPrice","type","placeholder","onChange","e","target","value","utils","fromWei","priceInt","toWei","mint","Profile","pendingRewards","setPendingRewards","dateLock","Date","timeLocked","setTimeLocked","unlockDateString","setUnlockDateString","contract","geneStrength","totalRewards","PointsAll","PointsSkelly","PointsZombie","PointsDemon","Glyphs","rewardMapper","rewardGene","_str","str","RewardString","tempString","push","RewardsMap","renderRewardsTotal","getAvailableRewards","GlyphStr","today","unixTimeLocked","getTime","timeStamp","claimedStamp","hours","minutes","seconds","unixTimeStampToNextReward","getTimeLock","Rewards","ticketsAll","ticketsPersonal","claimSingle","claimSingleReward","renderContest","Summon","emptyTrait","traitIds","setTraitIds","usedTraits","setUsedTraits","fetching","setFetching","approvalState","setApprovalState","traitContract","approvals","usedTraitIDs","setApprovalForAll","summonFee","summonSkeletoon","fetchInventoryTrait","getTraitPropertiesBatch","invTemp","traitInventoryDisplay","inventoryTraitDiv","filter","trait","filterTrait","newUsed","traitSelectedFromInv","Arr","tempApproval","isApprovedForAll","forEach","previewDraw","Upgrade","usedPoints","setUsedPoints","availablePoints","setAvailablePoint","pointCost","setPointCost","glyphIds","setGlyphIds","inventoryState","setInventoryState","selectedTrait","setSelectedTrait","selectedGlyph","setSelectedGlyph","glyphContract","upgradedGene","changeGeneSeq","glyphStr","find","points","changeStrSeqSwap","pointsFree","costPerPoint","glyphID","traitID","upgradeSkeletoonPayed","upgradeSkeletoon","actionButtons","pointCostDisplay","boughtPoints","parseFloat","fetchInventoryGlyph","getGlyphPropertiesBatch","tokenSelector","obj","glyphInventoryDisplay","inventoryGlyphDiv","glyph","tempgeneindex","filterGlyph","getTimeLocked","getAvailablePoints","strPointCost","Vote","StarterPack","TombstoneMeniu","window","ethereum","skeletoons","setSkeletoons","selectedSkeletoonId","setSelectedSkeletoonId","selectedMeniu","setSelectedMeniu","availableMenius","setAvalableMenius","isDisplayProfiled","setDisplayProfiled","areSkeletoonsFetched","setFetch","meniuConstructor","setGeneSeq","setStrSeq","refresh","setRefresh","goodFetcher","balanceOf","fetcherRetry","tokenID","tokenOfOwnerByIndex","tokenURI","tokenMetadata","skeletoonList","meniuButton","selector","text","navigation","displaySkeletoon","name","group","getGroup","includes","getStrength","strResult","getGenes","geneResult","token","object","indexOf","listToonWorldSkeletoons","mainDisplay","Dashboard","settings","chain","NFTcard","setRenderImageType","marketRender","setMarketRender","isApproved","setApproval","seller","setSeller","salePrice","setSalePrice","padder","input","padded","card","properties","renderTraitCard","traitType","renderGlyphCard","glyphApplies","applies","appliedPos","icons","iconFiltered","item","listItem","NFTtype","createMarketItem","approveForSale","approve","buyListing","createMarketSale","marketID","cancelListing","cancelMarketSale","padGene","padStr","getApproved","fetchSingle","toLowerCase","undefined","Market","selectedDisplay","setSelectedDisplay","selectedAddress","setSelectedAddress","base","skeletoon","setFilter","constructor","page","setPage","cardOpen","setCardOpen","cardItem","setCardItem","traits","glyphs","marketItems","setMarketItems","inventory","setInventory","listings","setListings","filtered","setFiltered","filterBool","setFilterBool","cMarket","inventoryLoadOld","appliesTo","typeId","fetchListedGlyph","marketLeft","marketOld","glyphsMarketID","glyphsPrice","market","marketId","fetchListedTrait","traitsMarketID","traitsPrice","fetchListingsGlyph","fetchListingsTrait","filterSkeletoonsDisplay","itemTemp","marketCopy","invCopy","listedCopy","itemsFiltered","skele","passFail","tempFilterGene","tempFilterStr","tempGene","tempStr","skeletoonFilterer","getKeyByValue","key","skeleFilterInput","geneValue","strValue","positionfiltered","filtertemp","filterTraitsDisplay","traitFilterer","traitFilter","traitFilterInput","filterGlyphsDisplay","filterPass","glyphFilterer","glyphFilterInput","tempHelper","_512","_256","_128","_64","_32","_16","_8","_4","_2","getKeyByValueGlyph","baseFilter","openCard","NFType","tokenId","displayArr","fetchMarketItems","skeletoonsMarket","skeletoonsMarketID","skeletoonsPrice","getSkeletoonPropertiesBatch","fetchListings","fetchListed","inventoryLoad","fetchInventory","renderedOutput","cardsListings","cardsInventory","cardsDisplay","Wars","rendered","setRenderer","walletFraction","setWalletFraction","walletPoints","setWalletPoints","setpfp","walletsParticipating","setWalletsParticipating","skeletoonsInWallet","setSkeletoonsInWallet","skeletoonSelected","setSkeletoonSelected","usedAttackPoints","setUsedAttackPoints","fractionCardOpen","setFractionCardOpen","totalPointsUsable","setTotalPointsUsable","attackPointsUSable","setAttackPointsUsable","fractionPointsTotal","setFractionPointsTotal","fractionLogos","cWars","aTWWars","cTWReward","cTWSKP","displayList","listTokens","changeFractionTX","fractionNr","changeFraction","getWalletProperties","sendTxFortify","fortifyPoints","displayFraction","listAdresses","fraction","sort","b","reverse","attackPoints","maxPoints","attackTx","attacked_address","sendPFPtx","setProfilePicture","getProfilePicture","walletsInGame","getBatchWalletProperties","inGameWalletsFull","tempWalletProp","pointsTotal","skeletoonFractionPoints","zombieFractionPoints","demonFractionPoints","getSkeletoonProperties","getPoints","total","attacked","createCard","App","currentAccount","setCurrentAccount","currentChain","setCurrentChain","pageSelect","setPageSelect","connectWalletHandler","alert","request","method","accounts","getChainId","enable","then","renderDispaly","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getLibrary","provider"],"mappings":"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","file":"static/js/main.5d03c0d1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import TraitMap from \"./TraitMap.json\"\r\n\r\nconst imageURL = \"https://spookyskeletoons.mypinata.cloud/ipfs/QmSRtP9kFubbY9LUqzWsXLk4TQDWUsbcphZdUeuBKgawcJ/\";\r\n//const imageURL = \"../renderComponents/skeletoons/\";\r\n\r\nexport const drawSingleCanvas = (URL, canvasID) => {\r\n\r\n    let otherValue = URL\r\n\r\n    var myCanvas = document.getElementById(canvasID);\r\n    var ctx = myCanvas.getContext('2d');\r\n    var img = new Image;\r\n\r\n    img.src = otherValue;\r\n    img.onload = function(){\r\n      ctx.drawImage(img, 0,0); \r\n    };\r\n}\r\n\r\nexport const drawSkeletoonFull = (genes, strength, canvasID, indexer, downscaleTimes, finalScale,) => {\r\n    var myCanvas = document.getElementById(canvasID);\r\n    var ctx = myCanvas.getContext('2d');\r\n    var img = new Image;\r\n\r\n    let i = indexer\r\n    let j\r\n    let n\r\n    let singleGeneD\r\n    let singleStrD\r\n    let flaggedWhole = false;\r\n    let singleGeneWhole;\r\n    let breakpoints;\r\n\r\n    \r\n        \r\n        singleGeneD = genes.substring(( indexer * 2 ) * 3 ,(( indexer * 2 ) + 1 ) * 3)    \r\n        singleStrD  = strength.substring(( indexer * 2 ) * 3 ,(( indexer * 2 ) + 1 ) * 3)\r\n        singleGeneWhole = genes.substring(( indexer * 2 ) * 3 ,(( indexer * 2 ) + 2 ) * 3)\r\n\r\n        //ADD support for 000 traits\r\n\r\n        if (TraitMap.hasOwnProperty(singleGeneWhole)) {\r\n        breakpoints = Object.keys(TraitMap[singleGeneWhole]).length\r\n        for (j = 1; j <= breakpoints; j++){   \r\n            \r\n            if (singleStrD >=  parseInt(TraitMap[singleGeneWhole][j.toString()][1])) {\r\n                flaggedWhole = true;\r\n                img.src = imageURL + TraitMap[singleGeneWhole][j.toString()][0] + \".png\"\r\n                img.setAttribute('crossOrigin', '');\r\n                img.onload = function(){\r\n                    ctx.drawImage(img, 0,0);               \r\n                    i++\r\n                    if (i < 9) {                \r\n                    drawSkeletoonFull(genes, strength, canvasID, i, downscaleTimes, finalScale) \r\n                    } else if (i=9){\r\n                        downscaleRecursion (canvasID, downscaleTimes, finalScale)\r\n                    }\r\n                };\r\n                break;\r\n            }\r\n        }\r\n        } if (flaggedWhole == false) {\r\n        \r\n        if (singleGeneD !== \"000\") {\r\n        breakpoints = Object.keys(TraitMap[singleGeneD]).length\r\n\r\n        for (j = 1; j <= breakpoints; j++){   \r\n            \r\n            if (singleStrD >=  parseInt(TraitMap[singleGeneD][j.toString()][1])) {\r\n                img.src = imageURL + TraitMap[singleGeneD][j.toString()][0] + \".png\"\r\n                img.setAttribute('crossOrigin', '');\r\n                img.onload = function(){\r\n                    ctx.drawImage(img, 0,0);               \r\n                    i++\r\n                    if (i < 9) {                \r\n                    drawSkeletoonFull(genes, strength, canvasID, i, downscaleTimes, finalScale) \r\n                    } else if (i=9){\r\n                        downscaleRecursion (canvasID, downscaleTimes, finalScale)\r\n                    }\r\n                };\r\n                break;\r\n            }\r\n        }} else {\r\n            i++\r\n                    if (i < 9) {                \r\n                    drawSkeletoonFull(genes, strength, canvasID, i, downscaleTimes, finalScale) \r\n                    } else if (i=9){\r\n                        downscaleRecursion (canvasID, downscaleTimes, finalScale)\r\n                    }\r\n        }\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\nfunction downscaleRecursion(canvasID, downscaleTimes, finalScale) {\r\n    var myCanvas = document.getElementById(canvasID);\r\n    let counter = downscaleTimes - 1\r\n    if (0 < downscaleTimes) {\r\n\r\n        resample_single(myCanvas, (myCanvas.width)/2, (myCanvas.height)/2, true)\r\n        downscaleRecursion(canvasID, counter, finalScale)\r\n    }\r\n    if (0 == downscaleTimes) {\r\n\r\n        resample_single(myCanvas, finalScale, finalScale, true)   \r\n     }\r\n}\r\n\r\n\r\n\r\nfunction resample_single(canvas, width, height, resize_canvas) {\r\n    var width_source = canvas.width;\r\n    var height_source = canvas.height;\r\n    width = Math.round(width);\r\n    height = Math.round(height);\r\n\r\n    var ratio_w = width_source / width;\r\n    var ratio_h = height_source / height;\r\n    var ratio_w_half = Math.ceil(ratio_w / 2);\r\n    var ratio_h_half = Math.ceil(ratio_h / 2);\r\n\r\n    var ctx = canvas.getContext(\"2d\");\r\n    var img = ctx.getImageData(0, 0, width_source, height_source);\r\n    var img2 = ctx.createImageData(width, height);\r\n    var data = img.data;\r\n    var data2 = img2.data;\r\n\r\n    for (var j = 0; j < height; j++) {\r\n        for (var i = 0; i < width; i++) {\r\n            var x2 = (i + j * width) * 4;\r\n            var weight = 0;\r\n            var weights = 0;\r\n            var weights_alpha = 0;\r\n            var gx_r = 0;\r\n            var gx_g = 0;\r\n            var gx_b = 0;\r\n            var gx_a = 0;\r\n            var center_y = (j + 0.5) * ratio_h;\r\n            var yy_start = Math.floor(j * ratio_h);\r\n            var yy_stop = Math.ceil((j + 1) * ratio_h);\r\n            for (var yy = yy_start; yy < yy_stop; yy++) {\r\n                var dy = Math.abs(center_y - (yy + 0.5)) / ratio_h_half;\r\n                var center_x = (i + 0.5) * ratio_w;\r\n                var w0 = dy * dy; //pre-calc part of w\r\n                var xx_start = Math.floor(i * ratio_w);\r\n                var xx_stop = Math.ceil((i + 1) * ratio_w);\r\n                for (var xx = xx_start; xx < xx_stop; xx++) {\r\n                    var dx = Math.abs(center_x - (xx + 0.5)) / ratio_w_half;\r\n                    var w = Math.sqrt(w0 + dx * dx);\r\n                    if (w >= 1) {\r\n                        //pixel too far\r\n                        continue;\r\n                    }\r\n                    //hermite filter\r\n                    weight = 2 * w * w * w - 3 * w * w + 1;\r\n                    var pos_x = 4 * (xx + yy * width_source);\r\n                    //alpha\r\n                    gx_a += weight * data[pos_x + 3];\r\n                    weights_alpha += weight;\r\n                    //colors\r\n                    if (data[pos_x + 3] < 255)\r\n                        weight = weight * data[pos_x + 3] / 250;\r\n                    gx_r += weight * data[pos_x];\r\n                    gx_g += weight * data[pos_x + 1];\r\n                    gx_b += weight * data[pos_x + 2];\r\n                    weights += weight;\r\n                }\r\n            }\r\n            data2[x2] = gx_r / weights;\r\n            data2[x2 + 1] = gx_g / weights;\r\n            data2[x2 + 2] = gx_b / weights;\r\n            data2[x2 + 3] = gx_a / weights_alpha;\r\n        }\r\n    }\r\n    //clear and resize canvas\r\n    if (resize_canvas === true) {\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n    } else {\r\n        ctx.clearRect(0, 0, width_source, height_source);\r\n    }\r\n\r\n    //draw\r\n    ctx.putImageData(img2, 0, 0);\r\n}","export const fetchMetadata = async (url) => {\r\n    const response = await fetch(url);\r\n    const jsonData = await response.json();\r\n    //console.log(jsonData)\r\n    return jsonData;\r\n  };","import abi from \"../../contracts/ABI.json\";\r\nimport Web3 from \"web3\";\r\n\r\nconst web3 = new Web3(Web3.givenProvider);\r\nconst contractSPSK = new web3.eth.Contract(abi.SPSK, \"0x1dadaa7e55b2c7238ed04891ac182ea1468b79b9\");\r\nconst contractSHY = new web3.eth.Contract(abi.SHY, \"0x360b2900E56ECfa31c5004c640F8b8c803e00336\");\r\nconst contractSpecials = new web3.eth.Contract(abi.Specials, \"0x3D50934150B1CfD1a6d336684ffFC1cC3Fe906b7\");\r\nconst contractCreatoons = new web3.eth.Contract(abi.Creatoons, \"0xF870B0D3022682d9a6a7aBBF562c7F8F6Fc6c708\");\r\n\r\nexport const atestnetSPSK = \"0x3780687C770500740F244Ac405824Ca35FD50BA1\"\r\n\r\nexport const aTWSP = \"0xd0885885f066597e0c4f45eBDb56A9B08B22A9A1\"\r\nexport const aTWT = \"0xAeE90816d6496d84880611Af417802cE855C7949\"\r\nexport const aTWG = \"0x67b64675EFAA9Bee1902C760aE66DD55ad230730\"\r\nexport const aTWB = \"0xA71770D9EA591bdFF3a41C20343C609C457aF1fA\"\r\nexport const aTWLogic = \"0x77413058104341d722Dcc75dF02C1F409a16e536\"\r\nexport const aTWRewards = \"0xb3474D4859021C13420F8dd226Bfd1a60Fc7e568\"\r\n//export const aTWRewards = \"0x3ea41c765Ec14bE31b5a9deF52d1bA6929C5302A\"\r\nexport const aTWMarket = \"0x96B2FE51a7bC07631633BD32a9671880Cd993f08\";\r\nexport const aTWStarter = \"0x9Ff5E8942dD3531CCF298e98f928e05bB6494DDf\"\r\n// rewards old 0xe205Bec79f8B371FB1f96Eba1FA0025798afFE3B\r\n// logic old 0x0CD77416ACf0A247b140C594A435920f05de55A6\r\n\r\nexport const aTWLogicv2Test = \"0x4241F923382eA307a84f8FB20E1fEE16b1852246\"\r\nexport const aTWRewardsv2Test = \"0x3ea41c765Ec14bE31b5a9deF52d1bA6929C5302A\"\r\n//export const aTWWarsTest = \"0x75d518529d93b86e7CAA4C496dfd6580477F9D49\"\r\nexport const aTWWarsTest = \"0x877d3EE419E3cf66a56D71C83942811670FB934C\"\r\n\r\nexport const aTWSPTest = \"0x4d4391e65d56735ac8802ea4a685549c5d794de1\"\r\nexport const aTWTTest = \"0xa9eba3dadc9f239b032f6b93668b0782a9713d06\"\r\nexport const aTWGTest = \"0xF5BEeBbe909E2425099F9B4951D096afac80B21b\"\r\n\r\nexport const aSPSK =  \"0x1dadaa7e55b2c7238ed04891ac182ea1468b79b9\";\r\n\r\nexport const ctestnetSPSK = new web3.eth.Contract(abi.TestNetSPSK, atestnetSPSK);\r\n\r\nexport const cTWWars = new web3.eth.Contract(abi.TWWars, aTWWarsTest);\r\n\r\nexport const cTWSP = new web3.eth.Contract(abi.TWSP, aTWSP);\r\nexport const cTWT = new web3.eth.Contract(abi.TWT,aTWT);\r\nexport const cTWG = new web3.eth.Contract(abi.TWG,aTWG);\r\nexport const cTWB = new web3.eth.Contract(abi.TWB,aTWB);\r\nexport const cTWLogic = new web3.eth.Contract(abi.TWLogic,aTWLogic);\r\nexport const cTWRewards = new web3.eth.Contract(abi.TWRewards,aTWRewards);\r\nexport const cTWMarket = new web3.eth.Contract(abi.TWMarket, aTWMarket);\r\nexport const cTWStarter = new web3.eth.Contract(abi.StarterPackPRomo, aTWStarter);\r\n\r\nexport const cSPSK = contractSPSK;\r\n\r\n\r\n\r\nexport const reqChain = 250;\r\n\r\nexport const getGroup = (address) => {\r\n    let group = [];\r\n\r\n    contractSPSK.methods.balanceOf(address).call(async(err, result) => {\r\n        if (result > 0) {\r\n            group.push(\"Skeletoons\")\r\n        }\r\n        })\r\n    contractSHY.methods.balanceOf(address).call(async(err, result) => {\r\n        if (result > 0) {\r\n            group.push(\"ShyFeet\")\r\n        }\r\n        })\r\n    contractSpecials.methods.balanceOf(address).call(async(err, result) => {\r\n        if (result > 0) {\r\n            group.push(\"ToonWorldSpecials\")\r\n        }\r\n        })\r\n    contractCreatoons.methods.balanceOf(address).call(async(err, result) => {\r\n        if (result > 0) {\r\n            group.push(\"SinfulCreatoons\")\r\n        }\r\n        })\r\n\r\n    cTWSP.methods.balanceOf(address).call(async(err, result) => {\r\n        if (result > 0) {\r\n            group.push(\"Toonworld Skeletoon Profile\")\r\n        }\r\n        })\r\n    cTWT.methods.balanceOf(address).call(async(err, result) => {\r\n        if (result > 0) {\r\n            group.push(\"Toonworld Traits\")\r\n        }\r\n        })\r\n    cTWG.methods.balanceOf(address).call(async(err, result) => {\r\n        if (result > 0) {\r\n            group.push(\"Toonworld Glyph\")\r\n        }\r\n        })\r\n    cTWB.methods.balanceOf(address).call(async(err, result) => {\r\n        if (result > 0) {\r\n            group.push(\"Toonworld Bucks\")\r\n        }\r\n        })\r\n     \r\n    return group\r\n}\r\n\r\nexport const getGenes = (tokenId) => {\r\n    let gene\r\n    cTWSP.methods.getGenes(tokenId).call(async(err, result) =>{\r\n        if (!err)\r\n        {    \r\n            gene = await result;}\r\n        else \r\n        {console.log(err)}\r\n    })\r\n    return gene\r\n}\r\n\r\nexport const getStrength = (tokenId) => {\r\n    let str\r\n    cTWSP.methods.getStrength(tokenId).call(async(err, result) =>{\r\n        if (!err)\r\n        {   \r\n            str = await result;}\r\n        else \r\n        {console.log(err)}\r\n    })\r\n    return str;\r\n}\r\n\r\nexport const getAvailablePoints = () => {\r\n\r\n}\r\n\r\n","const uibatch = \"https://spookyskeletoons.mypinata.cloud/ipfs/QmZzh44V4w3nvbQFLVYeJr7ghoGqLWAoLw6cUAaMA7dW1g/\"\r\nexport const header_logo = \"https://spookyskeletoons.mypinata.cloud/ipfs/QmVbp67JMUyh1J5Hezj7ZLcVAW2iihNpbgVViPX3t3R71P\"\r\nexport const background_default = \"https://spookyskeletoons.mypinata.cloud/ipfs/QmUvJShUxF9x6jyQxWMwY6FYmor7hjvqBSgvXZiRw9hMuY/Background_Default.png\";\r\nexport const button_default = uibatch + \"button_light.png\"\r\nexport const tombstone_default = \"https://spookyskeletoons.mypinata.cloud/ipfs/QmUvJShUxF9x6jyQxWMwY6FYmor7hjvqBSgvXZiRw9hMuY/Toonstone_Default.png\";\r\nexport const meniu_default = \"https://spookyskeletoons.mypinata.cloud/ipfs/QmUvJShUxF9x6jyQxWMwY6FYmor7hjvqBSgvXZiRw9hMuY/Meniu_Default.png\";\r\nexport const header = \"\";\r\nexport const gen1Placeholder = \"https://spookyskeletoons.mypinata.cloud/ipfs/QmPzzuHgbbLReN537PL5QugF66t4eoY9qAcw4MkNTLuAin\"\r\nexport const gen2Placeholder = \"https://spookyskeletoons.mypinata.cloud/ipfs/QmbYRqLdrPxJ9G3n3bXnuhy9Zz2cHMqkMyBMSDA6oohvxQ\"\r\n\r\nexport const traitInv = \"https://spookyskeletoons.mypinata.cloud/ipfs/QmUBmZ2ffqE9QR4Z82UoTe3pMRwxZWjTExQgvD5uLB2wgN\"\r\n\r\nexport const glyphInv = \"https://spookyskeletoons.mypinata.cloud/ipfs/QmTMcnJv4mufW4r68xAYcujL4yt1dxGQbYtYcgdAfMEwnw\"\r\n\r\nexport const TWWarsUI = \"https://spookyskeletoons.mypinata.cloud/ipfs/QmUarFxhCvRLdGDKFVAy22dPjEADEWN6rcXXzEuiLsr6DP/\"\r\n\r\nexport const button_dark = uibatch + \"button_dark.png\"\r\nexport const button_mini = uibatch + \"button_mini.png\" \r\nexport const button_prev = uibatch + \"Navigation_Prev.png\"\r\nexport const button_next = uibatch + \"Navigation_Next.png\"\r\nexport const icon_plus = uibatch + \"plus.png\"\r\nexport const icon_minus = uibatch + \"minus.png\"\r\nexport const icon_refresh = uibatch + \"refresh.png\"\r\nexport const icon_yes = uibatch + \"Y.png\"\r\nexport const icon_no = uibatch + \"N.png\"\r\nexport const button_mini2h = uibatch + \"horizontal_mini2.png\"\r\nexport const button_mini2v = uibatch + \"vertical_mini2.png\"\r\n\r\nexport const icon_Bg_D = uibatch + \"TBG.png\"\r\nexport const icon_Bg_M = uibatch + \"TBGm.png\"\r\n\r\nexport const icon_Pet_D = uibatch + \"TPet.png\"\r\nexport const icon_Pet_M = uibatch + \"TPetm.png\"\r\n\r\nexport const icon_Body_D = uibatch + \"TBody.png\"\r\nexport const icon_Body_M = uibatch + \"TBodym.png\"\r\n\r\nexport const icon_Mouth_D = uibatch + \"TMouth.png\"\r\nexport const icon_Mouth_M = uibatch + \"TMouthm.png\"\r\n\r\nexport const icon_Head_D = uibatch + \"THead.png\"\r\nexport const icon_Head_M = uibatch + \"THeadm.png\"\r\n\r\nexport const icon_Eye_D = uibatch + \"TEye.png\"\r\nexport const icon_Eye_M = uibatch + \"TEyem.png\"\r\n\r\nexport const icon_Hat_D = uibatch + \"THat.png\"\r\nexport const icon_Hat_M = uibatch + \"THatm.png\"\r\n\r\nexport const icon_Item_D = uibatch + \"TItem.png\"\r\nexport const icon_Item_M = uibatch + \"TItemm.png\"\r\n\r\nexport const icon_Cape_D = uibatch + \"TCape.png\"\r\nexport const icon_Cape_M = uibatch + \"TCapem.png\"\r\n\r\nexport const glyphDefault = uibatch + \"glyph.png\"\r\n\r\nexport const rewardsAll = uibatch + \"rewards_all.png\"\r\nexport const rewardsSingle = uibatch + \"rewards_one.png\"\r\n\r\nexport const TWWSkelly = TWWarsUI + \"Skelly.png\"\r\nexport const TWWZombie = TWWarsUI + \"Zombie.png\"\r\nexport const TWWDevil = TWWarsUI + \"Devil.png\"\r\n\r\nexport const TWWBackgrounds = [ (TWWarsUI + \"0.png\"), (TWWarsUI + \"1.png\"), (TWWarsUI + \"2.png\"), (TWWarsUI + \"3.png\")]","import React from 'react'\r\nimport \"../../../styles/GetTrait.css\";\r\nimport \"../../../styles/Upgrade.css\";\r\nimport TraitMap from \"../../helpers/TraitMap.json\";\r\nimport Web3 from \"web3\";\r\nimport { useEffect, useState } from \"react\";\r\nimport {\r\n  button_default,\r\n  icon_Bg_D,\r\n  icon_Bg_M,\r\n  icon_Body_D,\r\n  icon_Body_M,\r\n  icon_Cape_D,\r\n  icon_Cape_M,\r\n  icon_Eye_D,\r\n  icon_Eye_M,\r\n  icon_Hat_D,\r\n  icon_Hat_M,\r\n  icon_Head_D,\r\n  icon_Head_M,\r\n  icon_Item_D,\r\n  icon_Item_M,\r\n  icon_minus,\r\n  icon_Mouth_D,\r\n  icon_Mouth_M,\r\n  icon_no,\r\n  icon_Pet_D,\r\n  icon_Pet_M,\r\n  icon_plus,\r\n  icon_yes,\r\n  traitInv,\r\n} from \"../../../data/canvassrc\";\r\nimport { drawSingleCanvas, drawSkeletoonFull } from '../../helpers/Renderer';\r\nimport { aTWLogic, cTWLogic} from '../../helpers/Groups';\r\nimport { displayLoader } from '../../helpers/Loader';\r\nconst GetTrait = (prop) => {\r\n  const [displaySettings, setDisplaySettings] = useState(null);\r\n  const [selectedGeneIndex, setselectedGeneIndex] = useState(null);\r\n  const [messageStatus, setMessageStatus] = useState(null);\r\n\r\n  let geneIcons = [\r\n    icon_Bg_D,\r\n    icon_Pet_D,\r\n    icon_Body_D,\r\n    icon_Mouth_D,\r\n    icon_Head_D,\r\n    icon_Eye_D,\r\n    icon_Hat_D,\r\n    icon_Item_D,\r\n    icon_Cape_D,\r\n    icon_Bg_M,\r\n    icon_Pet_M,\r\n    icon_Body_M,\r\n    icon_Mouth_M,\r\n    icon_Head_M,\r\n    icon_Eye_M,\r\n    icon_Hat_M,\r\n    icon_Item_M,\r\n    icon_Cape_M,\r\n  ];\r\n\r\n  const web3 = new Web3(Web3.givenProvider);\r\n  const strCost = \"100\";\r\n\r\n  const listToGeneIndexer = (index) => {\r\n    if (index < 9) {\r\n      return index * 2;\r\n    } else {\r\n      return (index - 9) * 2 + 1;\r\n    }\r\n  };\r\n\r\n  const changeStrSeq = () => {\r\n    let prefix = \"\";\r\n    if (selectedGeneIndex != 0)\r\n    {prefix = prop.strSeq.substring(0, ((selectedGeneIndex-1)*3)+3)}\r\n    let edited = \"000\"\r\n    for (let twj = edited.length; twj < 3 ;twj++) {edited = \"0\" + edited}\r\n    let suffix =prop.strSeq.substring(((selectedGeneIndex)*3)+3,54);\r\n     return (prefix+edited+suffix)\r\n  }\r\n\r\n  const drawPreview = () => {\r\n    let selectedGene = selectedGeneIndex\r\n\r\n    let pStr = changeStrSeq();\r\n    let pGene = prop.geneSeq;\r\n\r\n    let geneSingle = pGene.substring((selectedGene*3), (selectedGene*3 )+ 3);\r\n\r\n\r\n\r\n    let tStr = \"000000000000000000000000000000000000000000000000000000\"\r\n    let tGene = \"000000000000000000000000000000000000000000000000\"+ geneSingle +\"000\"\r\n    drawSkeletoonFull(pGene, pStr, 'skeletoon_preview_canvas', 0, 2, 250);\r\n    drawSingleCanvas((traitInv + \"/\"+ geneSingle.substring(1) + \".png\"), 'trait_preview_canvas');\r\n  }\r\n\r\n  const sendTX = async () => {\r\n    let position = selectedGeneIndex;\r\n    let skeletoonID = prop.skeletoonTokenId;\r\n    if (skeletoonID <= 10000 && parseInt(strDissasermbler(prop.strSeq, position * 3)) == 100 && prop.geneSeq.substring((position*3), (position*3 )+ 3) != \"000\"){\r\n      let txData = cTWLogic.methods.getGene(skeletoonID, position).encodeABI();\r\n      web3.eth.sendTransaction(\r\n        {\r\n          from: prop.address,\r\n          to: aTWLogic,\r\n          data: txData,\r\n          gas : await cTWLogic.methods.getGene(skeletoonID, position).estimateGas({from: prop.address}),\r\n          gasPrice: await web3.eth.getGasPrice()\r\n        }).on('receipt', function(receipt) {\r\n          setMessageStatus(\"Trait Extracted Successfully\")\r\n        });\r\n    }\r\n  }\r\n\r\n  \r\n  const actionButtons = () => {\r\n    \r\n    return (\r\n      <div class=\"btn-group\">\r\n      <div class=\"button-wrapper\" onClick={() => {\r\n        var myCanvas = document.getElementById('skeletoon_preview_canvas');\r\n        myCanvas.width = 2000;\r\n        myCanvas.height = 2000;\r\n        var traitCanvas = document.getElementById('trait_preview_canvas');\r\n        traitCanvas.width = 250;\r\n        traitCanvas.height = 250;\r\n        drawPreview()\r\n        }}>\r\n      <button><img src={button_default} alt=\"my image\" /></button>\r\n      <div class={\"button_text\"}>{\"Preview\"}</div>\r\n      </div>\r\n      <div class=\"button-wrapper\" onClick={() => {\r\n        sendTX()\r\n        }}>\r\n      <button><img src={button_default} alt=\"my image\" /></button>\r\n      <div class={\"button_text\"}>{\"Extract Trait\"}</div>\r\n      </div> \r\n      <div>{messageStatus}</div> \r\n      </div> \r\n    )\r\n}\r\n\r\nconst geneIndexertoArr = (index) => {\r\n  if (index % 2 == 0) {return index/2} else { return ((index - 1)/2)+9}\r\n}\r\n\r\nconst selectedGene = () => {\r\n  let geneIndex = selectedGeneIndex;\r\n  return (\r\n    <>\r\n    <img src={geneIcons[geneIndexertoArr(geneIndex)]}>      \r\n    </img>\r\n    <div class={\"GeneText\"}>\r\n    {geneDisasaemblerMapped(prop.geneSeq, geneIndex * 3) + \" \" + strDissasermbler(prop.strSeq, geneIndex * 3) + \"/100\"}\r\n    </div>\r\n    {(parseInt(strDissasermbler(prop.strSeq, geneIndex * 3)) == 100 && prop.geneSeq.substring(geneIndex*3, (geneIndex*3 )+ 3) !== \"000\") ? <img class={\"ValidityLong\"} src={icon_yes}></img> :<img class={\"ValidityLong\"} src={icon_no}></img>}\r\n    </>\r\n  )\r\n}\r\n\r\n\r\n  const extractDisplay = () => {\r\n    let geneIndex = selectedGeneIndex;\r\n    return (\r\n      <>\r\n      <div className={\"SelectedGene\"} id={\"GetTraitSelectedGene\"}> {selectedGene()}</div>\r\n      \r\n      <div className={\"UpgradeCanvasPreview\"} id={\"PreviewCanvasTrait\"}>\r\n        <div className={\"TextHeaderDiv\"}>Extracted Skeletoon preview:</div>\r\n        <canvas id=\"skeletoon_preview_canvas\" width=\"2000\" height=\"2000\"></canvas></div>\r\n      <div className={\"UpgradeCanvasPreview\"} id={\"TraitCanvas\"}>\r\n        <div className={\"TextHeaderDiv\"}>Extracted Trait preview:</div>\r\n        <canvas id=\"trait_preview_canvas\" width=\"2000\" height=\"2000\"></canvas></div>\r\n      <div className={\"ButtonsDisplay\"} id={\"ButtonsTrait\"}>{actionButtons()}</div>\r\n      </>\r\n    )\r\n  }\r\n\r\n  const geneDisasaemblerMapped = (sequence, index) => {\r\n    let geneSingle = sequence.substring(index, index + 3);\r\n    geneSingle = TraitMap[geneSingle][\"1\"][2];\r\n    return geneSingle;\r\n  };\r\n\r\n  const strDissasermbler = (sequence, index) => {\r\n    let strSingle = sequence.substring(index, index + 3);\r\n    return strSingle;\r\n  };\r\n\r\n  const allDisplaySingle = (geneIndex) => {\r\n    return (\r\n      <div class={\"GetSingleTrait\"} >\r\n      <img src={(geneIcons[geneIndexertoArr(geneIndex)])} onClick={() => {setselectedGeneIndex(((geneIndex))); setDisplaySettings(\"Single\")}}>      \r\n      </img>\r\n      <div class={\"GeneText\"} onClick={() => {setselectedGeneIndex(((geneIndex))); setDisplaySettings(\"Single\")}}>\r\n      {geneDisasaemblerMapped(prop.geneSeq, geneIndex * 3) + \" \" + strDissasermbler(prop.strSeq, geneIndex * 3) + \"/100\"}\r\n      </div>\r\n      {(parseInt(strDissasermbler(prop.strSeq, geneIndex * 3)) == 100 && prop.geneSeq.substring(geneIndex*3, (geneIndex*3 )+ 3) !== \"000\")? <img class={\"Validity\"} src={icon_yes} onClick={() => {setselectedGeneIndex(((geneIndex))); setDisplaySettings(\"Single\")}}></img> :<img class={\"Validity\"} src={icon_no} onClick={() => {setselectedGeneIndex(((geneIndex))); setDisplaySettings(\"Single\")}}></img>}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const listAllItemsf = geneIcons.map((gene, index) => (\r\n    <il class={\"GeneRow\"} id={\"Gene\" + listToGeneIndexer(index)} key={gene}>\r\n      {allDisplaySingle(index)}\r\n      <br></br>\r\n    </il>\r\n  ));\r\n\r\n  const allDisplay = () => {\r\n    \r\n    return (\r\n      <div className={\"TraitList\"} id={\"TraitListGetTrait\"}>\r\n            <ul>{listAllItemsf}</ul>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const settings = () => {\r\n      return (\r\n        <div class=\"btn-group\">\r\n        <div class=\"button-wrapper\" onClick={() => {setDisplaySettings(\"All\")}}>\r\n        <button><img src={button_default} alt=\"my image\" /></button>\r\n        <div class={\"button_text\"}>{\"All\"}</div>\r\n        </div>\r\n        <div class=\"button-wrapper\" id={\"SingleViewButton\"} onClick={() => {setDisplaySettings(\"Single\")}}>\r\n        <button><img src={button_default} alt=\"my image\" /></button>\r\n        <div class={\"button_text\"} >{\"Single\"}</div>\r\n        </div>  \r\n        </div> \r\n      )\r\n  \r\n  }\r\n\r\n  const actionDisplay = () => {\r\n    if (displaySettings === \"All\") {\r\n      return (\r\n        allDisplay()\r\n      )\r\n    } else {\r\n      return (\r\n        extractDisplay()\r\n      )\r\n    }\r\n\r\n  }\r\n\r\n  const traitSelector = () => {\r\n    return (\r\n      <>\r\n      <div id={\"GeneTextHeader\"}>{displaySettings === \"Single\" ? \"Select Gene to extract:\" : \"Your Genome:\"}</div>\r\n      <div className={\"GeneSelector\"}>{renderTraits()}</div>      \r\n\r\n      <div className={\"ActionDisplay\"} id={\"GetTraitDisplay\"}>\r\n      {displaySettings !== null ? actionDisplay() : \"\"}\r\n      </div>\r\n      <div className={\"DisplayManager\"}>{settings()}</div>\r\n      </>\r\n    )\r\n  }\r\n\r\n  const listItems = geneIcons.map((gene, index) => (\r\n    <il class={\"GeneRow\"} id={\"Gene\" + listToGeneIndexer(index)} key={gene}>\r\n      <img src={gene} onClick={() => {setselectedGeneIndex(listToGeneIndexer(index)); setDisplaySettings(\"Single\")}}></img>\r\n      <br></br>\r\n    </il>\r\n  ));\r\n\r\n  \r\n\r\n  const renderTraits = () => {\r\n    return (\r\n        <ul>{listItems}</ul>\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    let index = selectedGeneIndex\r\n    if (prop.skeletoonTokenId >= 10000) {\r\n      setMessageStatus(\"Only original 10 000 Skeletoons can extract traits\")\r\n    } else \r\n    if (prop.geneSeq.substring(index*3, (index*3 )+ 3) == \"000\") {\r\n      setMessageStatus(\"Can't extract Non-existing trait\")\r\n    } else\r\n    if (parseInt(strDissasermbler(prop.strSeq, index * 3)) < 100) {\r\n      setMessageStatus(\"Gene needs strength of 100 to be extracted\")\r\n    } else  {\r\n      setMessageStatus(\"Gene Extraction costs 100 Strength\")\r\n    }\r\n  }, [selectedGeneIndex, prop.skeletoonTokenId, prop.geneSeq, prop.strSeq])\r\n  return (\r\n    <div>{traitSelector()}</div>\r\n  )\r\n}\r\n\r\nexport default GetTrait","import React from 'react'\r\nimport \"../../../styles/Mint.css\";\r\nimport TraitMap from \"../../helpers/TraitMap.json\";\r\nimport RewardsMap from \"../../helpers/RewardsMap.json\";\r\nimport Web3 from \"web3\";\r\nimport { useEffect, useState } from \"react\";\r\nimport {\r\n  button_default,\r\n} from \"../../../data/canvassrc\";\r\nimport { drawSkeletoonFull } from '../../helpers/Renderer';\r\nimport { aSPSK, cTWSP, aTWSP, ctestnetSPSK, atestnetSPSK, cSPSK } from '../../helpers/Groups';\r\nimport { displayLoader } from '../../helpers/Loader';\r\n\r\nconst Mint = (prop) => {\r\n  const [constructor, setConstructor] = useState(0);\r\n  const [SPSKbalance, setSPSKbalance] = useState([]);\r\n  const [SPSKsupply, setSPSKsupply] = useState(null);\r\n  const [claimedTokens, setClaimedTokens] = useState([]);\r\n  const [mintAmount, setMintAmount] = useState(null);\r\n  const [price, setPrice] = useState(\"0\");\r\n\r\n  const contractSPSK = cSPSK;\r\n  const contractTWSP = cTWSP;\r\n\r\n  const web3 = new Web3(Web3.givenProvider);\r\n\r\n  const mintTX = () => {\r\n\r\n    contractSPSK.methods.getPrice().call(async (err, result) => {\r\n      if (!err)\r\n      {\r\n        let price = web3.utils.fromWei(result, 'ether')\r\n        let priceInt = parseInt(price) * parseInt(mintAmount)\r\n        price = web3.utils.toWei(priceInt.toString())\r\n        let txData = contractSPSK.methods.mint(prop.address, mintAmount).encodeABI();\r\n        web3.eth.sendTransaction(\r\n          {\r\n            from: prop.address,\r\n            to: aSPSK,\r\n            value: price,\r\n            data: txData,\r\n            gas : await contractSPSK.methods.mint(prop.address, mintAmount).estimateGas({from: prop.address}),\r\n            gasPrice: await web3.eth.getGasPrice()\r\n          }).on('receipt', function(receipt) {\r\n            balanceSPSK()\r\n            fetchSPSKbalance()\r\n          });\r\n      }\r\n    })\r\n  }\r\n\r\n  const claimTX = async () => {\r\n\r\n    let txData = contractTWSP.methods.claim(claimedTokens).encodeABI();\r\n      web3.eth.sendTransaction(\r\n        {\r\n          from: prop.address,\r\n          to: aTWSP,\r\n          data: txData,\r\n          gas : await contractTWSP.methods.claim(claimedTokens).estimateGas({from: prop.address}),\r\n          gasPrice: await web3.eth.getGasPrice()\r\n        }).on('receipt', function(receipt) {\r\n          \r\n        });\r\n  }\r\n\r\n  const balanceSPSK = () => {\r\n    contractSPSK.methods.totalSupply().call((err,result) => {\r\n      if(!err){\r\n        setSPSKsupply(result)\r\n      } else {\r\n        console.log(err)\r\n        return err\r\n      }\r\n    })\r\n  }\r\n\r\n  const calcCost = () => {\r\n    if (mintAmount!== null)\r\n    {\r\n      return (\r\n        (parseInt(web3.utils.fromWei(price, 'ether')) * parseInt(mintAmount)).toString()\r\n      )\r\n    } else return \"\"\r\n  }\r\n\r\n  const mintOriginal = () => {\r\n    return(\r\n      <>\r\n      <div id={\"DisplayOGSupply\"}>\r\n        {SPSKsupply + \"/ 10 000 Spooky Skeletoons Minted\"}\r\n        <br></br>\r\n        {\"Enter amount you wish to mint and click Mint bellow\"}\r\n      </div>\r\n      <div id={\"InputBoxMint\"}>\r\n        <input className={\"inputMint\"} type=\"number\" placeholder={\"Amount\"} onChange={e => {setMintAmount(e.target.value)}}/>\r\n        {\"Cost \" + calcCost() + \" FTM\"}\r\n      </div>\r\n      <div id={\"MintButton\"}>\r\n      <div class=\"btn-group\">\r\n      <div class=\"button-wrapper\" onClick={() => {mintTX()}}>\r\n        <button><img src={button_default} alt=\"my image\" /></button>\r\n        <div class={\"button_text\"}>{\"Mint\"}</div>\r\n      </div>  \r\n      </div>  \r\n      </div>\r\n      </>\r\n    )\r\n  }\r\n\r\n  const setTokensToClaim = (idArr, amount) => {\r\n    if (idArr !== null) {\r\n      let splitArr = idArr.split(\",\")\r\n      setClaimedTokens(splitArr)\r\n    } \r\n    if (amount !== null){\r\n      setClaimedTokens(SPSKbalance.slice(0, parseInt(amount)))\r\n    }\r\n  }\r\n\r\n  const claimTWSP = () => {\r\n    return (\r\n      <>\r\n      <div id={\"ClaimInput\"}>\r\n        {SPSKbalance.length > 0 ? \r\n        <>\r\n        <input className={\"inputMint\"} type=\"text\" placeholder={\"TokenId,TokenId,TokenId\"} onChange={e => {setTokensToClaim(e.target.value, null)}}/>\r\n        <input className={\"inputMint\"} type=\"number\" placeholder={\"Amount\"} onChange={e => {setTokensToClaim(null, e.target.value)}}/>\r\n        </>\r\n        : \"\"}\r\n      </div>\r\n      <div id={\"ClaimButton\"}>\r\n      <div class=\"btn-group\">\r\n      <div class=\"button-wrapper\" onClick={() => {claimTX()}}>\r\n        <button><img src={button_default} alt=\"my image\" /></button>\r\n        <div class={\"button_text\"}>{\"Claim\"}</div>\r\n      </div>  \r\n      </div> \r\n      </div>\r\n      </>\r\n    )\r\n  }\r\n\r\n  const infoBox = () => {\r\n    return (\r\n      <div id={\"InfoBox\"}>\r\n        {SPSKbalance.length > 0 ? \"You have \" + SPSKbalance.length + \" ToonWorld Skeletoons that you can claim, with Ids: [\" + SPSKbalance + \"] Enter Token Id or Amount of tokens that you wish to claim bellow and click \\\"Claim\\\"\" : \"You have no ToonWorld Skeletoons that can be claimed. Mint Spooky Skeletoon and claim your ToonWorld Skeletoon \"}\r\n        <br></br>\r\n        <br></br>\r\n        {SPSKbalance.length > 0 ?\"Token IDs: ~~~~~~OR~~~~~~ Token Amount:\": \"\"}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const fetchSPSKbalance = () => {\r\n    contractSPSK.methods.walletOfOwner(prop.address).call(async (err, result) => {\r\n      if (!err) {\r\n        let temp = result\r\n        let unclaimed = [];\r\n        contractTWSP.methods.isTokenClaimedBatch(temp).call(async (err, result) => {\r\n          if (!err){\r\n            for (let i = 0; i < temp.length; i++){\r\n              if (result[i] == 0){\r\n                unclaimed = [...unclaimed, temp[i]];\r\n              }\r\n            }\r\n            setSPSKbalance(unclaimed)\r\n          }\r\n        })\r\n      } else {\r\n        \r\n      }\r\n    });\r\n  }\r\n\r\n  useEffect( () => {\r\n    fetchSPSKbalance()\r\n    balanceSPSK()\r\n    contractSPSK.methods.getPrice().call((err, result) => {\r\n      if (!err)\r\n      {\r\n        setPrice(result);\r\n      }\r\n    })\r\n  },[prop.address])\r\n\r\n  return (\r\n    <>\r\n    {mintOriginal()}\r\n    {claimTWSP()}\r\n    {infoBox()}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Mint","import React from \"react\";\r\nimport \"../../../styles/Profile.css\";\r\nimport TraitMap from \"../../helpers/TraitMap.json\";\r\nimport RewardsMap from \"../../helpers/RewardsMap.json\";\r\nimport Web3 from \"web3\";\r\nimport { useEffect, useState } from \"react\";\r\nimport geneDataAll from \"../../helpers/geneDataAll.json\";\r\nimport {\r\n  icon_Bg_D,\r\n  icon_Bg_M,\r\n  icon_Body_D,\r\n  icon_Body_M,\r\n  icon_Cape_D,\r\n  icon_Cape_M,\r\n  icon_Eye_D,\r\n  icon_Eye_M,\r\n  icon_Hat_D,\r\n  icon_Hat_M,\r\n  icon_Head_D,\r\n  icon_Head_M,\r\n  icon_Item_D,\r\n  icon_Item_M,\r\n  icon_Mouth_D,\r\n  icon_Mouth_M,\r\n  icon_Pet_D,\r\n  icon_Pet_M,\r\n} from \"../../../data/canvassrc\";\r\nimport { cTWRewards } from \"../../helpers/Groups\";\r\nconst Profile = (prop) => {\r\n  const [pendingRewards, setPendingRewards] = useState(0);\r\n  const [timeLocked, setTimeLocked] = useState({dateLock: new Date()});\r\n  const [unlockDateString, setUnlockDateString] = useState(\"\");\r\n\r\n\r\n  const contract = cTWRewards;\r\n\r\n  let genes = prop.geneSeq;\r\n  let geneStrength = prop.strSeq;\r\n  let geneIcons = [\r\n    icon_Bg_D,\r\n    icon_Pet_D,\r\n    icon_Body_D,\r\n    icon_Mouth_D,\r\n    icon_Head_D,\r\n    icon_Eye_D,\r\n    icon_Hat_D,\r\n    icon_Item_D,\r\n    icon_Cape_D,\r\n    icon_Bg_M,\r\n    icon_Pet_M,\r\n    icon_Body_M,\r\n    icon_Mouth_M,\r\n    icon_Head_M,\r\n    icon_Eye_M,\r\n    icon_Hat_M,\r\n    icon_Item_M,\r\n    icon_Cape_M,\r\n  ];\r\n  let totalRewards = { PointsAll: 0, PointsSkelly: 0, PointsZombie: 0, PointsDemon: 0, Glyphs: [] };\r\n  let TWBrewardMultis = [2, 1];\r\n  let rewardClaims;\r\n\r\n  const rewardMapper = (rewardGene, _str) => {\r\n    let str = parseInt(_str);\r\n    let RewardString = \"\";\r\n    if ((parseInt(rewardGene[0]) % 10) === 1) {\r\n      totalRewards.PointsAll += str;\r\n      if (str > 1) {\r\n        RewardString += str + \" Neutral points\";\r\n      } \r\n    }\r\n    if ((parseInt(rewardGene[0]) % 10) === 2) {\r\n      totalRewards.PointsSkelly += str;\r\n      if (str > 1) {\r\n        RewardString += str + \" Skelly points\";\r\n      } \r\n    }\r\n    if ((parseInt(rewardGene[0]) % 10) === 3) {\r\n      totalRewards.PointsZombie += str;\r\n      if (str > 1) {\r\n        RewardString += str + \" Zombie points\";\r\n      } \r\n    }\r\n    if ((parseInt(rewardGene[0]) % 10) === 4) {\r\n      totalRewards.PointsDemon += str;\r\n      if (str > 1) {\r\n        RewardString += str + \" Demon points\";\r\n      } \r\n    }\r\n    if (parseInt(rewardGene[0]) > 10) {\r\n      if (Math.floor((str/10)* rewardGene[3]) > 1) {\r\n        let tempString = \" [Glyph: \" + rewardGene[4] + \" (STR: \" +Math.floor((str/10)* rewardGene[3]) + \") ]\";\r\n        totalRewards.Glyphs.push(tempString.substring(1));\r\n        RewardString += tempString;\r\n      } \r\n    }\r\n    return RewardString;\r\n  };\r\n\r\n  const geneDisasaemblerMapped = (sequence, index) => {\r\n    let geneSingle = sequence.substring(index, index + 3);\r\n    geneSingle = TraitMap[geneSingle][\"1\"][2];\r\n    return geneSingle;\r\n  };\r\n\r\n  const strDissasermbler = (sequence, index) => {\r\n    let strSingle = sequence.substring(index, index + 3);\r\n    return strSingle;\r\n  };\r\n\r\n  const listToGeneIndexer = (index) => {\r\n    if (index < 9) {\r\n      return index * 2;\r\n    } else {\r\n      return (index - 9) * 2 + 1;\r\n    }\r\n  };\r\n\r\n  const listItems = geneIcons.map((gene, index) => (\r\n    <il class={\"GeneRow\"} id={\"Gene\" + listToGeneIndexer(index)} key={gene}>\r\n      <img src={gene}></img>\r\n      <div class={\"GeneText\"}>\r\n        {geneDisasaemblerMapped(genes, listToGeneIndexer(index) * 3) + \" \" + strDissasermbler(geneStrength, listToGeneIndexer(index) * 3) + \"/100\"}\r\n        <br></br>\r\n        {rewardMapper(RewardsMap[genes.substring(listToGeneIndexer(index) * 3, listToGeneIndexer(index) * 3 + 3)], strDissasermbler(geneStrength, listToGeneIndexer(index) * 3))}\r\n      </div>\r\n      <br></br>\r\n    </il>\r\n  ));\r\n\r\n  const renderTraits = () => {\r\n    return (\r\n      <div className={\"TraitList\"}>\r\n        <ul>{listItems}</ul>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const nextReward = () => {\r\n    contract.methods.getTimeLock(prop.skeletoonTokenId).call(async (err, result) => {\r\n      if (!err) {\r\n        setTimeLocked({dateLock: new Date(result*1000)})\r\n\r\n      } else {\r\n        console.log(\"ERROR getting timeLock\");\r\n      }\r\n    });\r\n  }\r\n\r\n  const renderRewardsTotal = () => {\r\n    contract.methods.getAvailableRewards(prop.skeletoonTokenId).call(async (err, result) => {\r\n      if (!err) {\r\n        setPendingRewards(result);\r\n      } else {\r\n        console.log(\"ERROR getting available rewards\");\r\n      }\r\n    });\r\n\r\n    let GlyphStr = \"\";\r\n    if (pendingRewards != 0) {\r\n      for (let i = 0; i < totalRewards.Glyphs.length; i++) {\r\n        GlyphStr += totalRewards.Glyphs[i] + \" x\" + pendingRewards;\r\n      }\r\n      return (\r\n        <div id={\"ActiveRewards\"} className={\"RewardsBox\"}>\r\n          {\"Total Rewards:\"}\r\n          <br></br>\r\n          <br></br>\r\n          {totalRewards.PointsAll * pendingRewards + \" Neutral Points\"}\r\n          <br></br>\r\n          {totalRewards.PointsSkelly * pendingRewards + \" Skelly Points\"}\r\n          <br></br>\r\n          {totalRewards.PointsZombie * pendingRewards + \" Zombie Points\"}\r\n          <br></br>\r\n          {totalRewards.PointsDemon * pendingRewards + \" Demon Points\"}\r\n          <br></br>\r\n          {GlyphStr}\r\n          <br></br>\r\n          <div class=\"rewardNextUnlock\">{unlockDateString}</div>\r\n        </div>\r\n      );\r\n    } else {\r\n      for (let i = 0; i < totalRewards.Glyphs.length; i++) {\r\n        GlyphStr += totalRewards.Glyphs[i] + \" x1 \";\r\n      }\r\n      return (\r\n        <div id={\"PendingRewards\"} className={\"RewardsBox\"}>\r\n          {\"Total Rewards:\"}\r\n          <br></br>\r\n          <br></br>\r\n          {totalRewards.PointsAll + \" Neutral Points\"}\r\n          <br></br>\r\n          {totalRewards.PointsSkelly + \" Skelly Points\"}\r\n          <br></br>\r\n          {totalRewards.PointsZombie + \" Zombie Points\"}\r\n          <br></br>\r\n          {totalRewards.PointsDemon + \" Demon Points\"}\r\n          <br></br>\r\n          {GlyphStr}\r\n          <div class=\"rewardNextUnlock\">{unlockDateString}</div>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  const renderButton = () => {};\r\n\r\n  const unixTimeStampToNextReward = (timeStamp) => {\r\n    let claimedStamp\r\n    if (pendingRewards == 0) {\r\n      claimedStamp = 28800 - timeStamp\r\n    }\r\n    if (pendingRewards == 1) {\r\n      claimedStamp = 86400 - timeStamp\r\n    }\r\n    if (pendingRewards == 2) {\r\n      claimedStamp = 172800 - timeStamp\r\n    }\r\n    if (pendingRewards == 3) {\r\n      return \"Maximum rewards stacked. Claim rewards to stack new rewards.\"\r\n    } else \r\n    {\r\n      let hours = Math.floor(claimedStamp/3600).toString()\r\n      if (hours.length == 1) {hours = \"0\" + hours}\r\n      let minutes = Math.floor((claimedStamp - hours*3600)/60).toString()\r\n      if (minutes.length == 1) {minutes = \"0\" + minutes}\r\n      let seconds = Math.floor((claimedStamp - hours*3600)- minutes*60).toString()\r\n      if (seconds.length == 1) {seconds = \"0\" + seconds}\r\n      if (timeStamp / 3600 > 87600){\r\n        return \"Claim your First Reward to stack additional rewards\"\r\n      } else {\r\n        return \"Next reward will be stacked in: \" + hours + \":\" + minutes + \":\" + seconds\r\n      }\r\n    }   \r\n  }\r\n\r\n  const profileView = () => {\r\n    return (\r\n      <>\r\n        <div id=\"ProfileHeaderM\">{\"Skeletoon Traits:\"}</div>\r\n        {renderTraits()}\r\n        {renderRewardsTotal()}\r\n      </>\r\n    );\r\n  };\r\n\r\n  \r\n\r\n  useEffect(() => {\r\n    var today = new Date();\r\n    let unixTimeLocked = ((new Date(today.getTime())) - timeLocked.dateLock.getTime()) / 1000\r\n    setUnlockDateString(unixTimeStampToNextReward(unixTimeLocked))\r\n  }, [timeLocked])\r\n\r\n  useEffect(() => {\r\n    nextReward()\r\n  }, [prop.skeletoonTokenId])\r\n\r\n  return <div>{profileView()}</div>;\r\n};\r\n\r\nexport default Profile;\r\n","import React from \"react\";\r\nimport \"../../../styles/Rewards.css\";\r\nimport TraitMap from \"../../helpers/TraitMap.json\";\r\nimport RewardsMap from \"../../helpers/RewardsMap.json\";\r\nimport Web3 from \"web3\";\r\nimport { useEffect, useState } from \"react\";\r\nimport geneDataAll from \"../../helpers/geneDataAll.json\";\r\nimport {\r\n  icon_Bg_D,\r\n  icon_Bg_M,\r\n  icon_Body_D,\r\n  icon_Body_M,\r\n  icon_Cape_D,\r\n  icon_Cape_M,\r\n  icon_Eye_D,\r\n  icon_Eye_M,\r\n  icon_Hat_D,\r\n  icon_Hat_M,\r\n  icon_Head_D,\r\n  icon_Head_M,\r\n  icon_Item_D,\r\n  icon_Item_M,\r\n  icon_Mouth_D,\r\n  icon_Mouth_M,\r\n  icon_Pet_D,\r\n  icon_Pet_M,\r\n  rewardsAll,\r\n  rewardsSingle,\r\n} from \"../../../data/canvassrc\";\r\nimport { aTWRewards, cTWRewards } from \"../../helpers/Groups\";\r\nconst Rewards = (prop) => {\r\n  const [pendingRewards, setPendingRewards] = useState(0);\r\n  const [timeLocked, setTimeLocked] = useState({dateLock: new Date()});\r\n  const [unlockDateString, setUnlockDateString] = useState(\"\");\r\n  const [ticketsAll, setAllTickets] = useState(null);\r\n  const [ticketsPersonal, setPersonalTickerts] = useState(null);\r\n\r\n\r\n  const contract = cTWRewards;\r\n\r\n  let genes = prop.geneSeq;\r\n  let geneStrength = prop.strSeq;\r\n  let geneIcons = [\r\n    icon_Bg_D,\r\n    icon_Pet_D,\r\n    icon_Body_D,\r\n    icon_Mouth_D,\r\n    icon_Head_D,\r\n    icon_Eye_D,\r\n    icon_Hat_D,\r\n    icon_Item_D,\r\n    icon_Cape_D,\r\n    icon_Bg_M,\r\n    icon_Pet_M,\r\n    icon_Body_M,\r\n    icon_Mouth_M,\r\n    icon_Head_M,\r\n    icon_Eye_M,\r\n    icon_Hat_M,\r\n    icon_Item_M,\r\n    icon_Cape_M,\r\n  ];\r\n  let totalRewards = { PointsAll: 0, PointsSkelly: 0, PointsZombie: 0, PointsDemon: 0, Glyphs: [] };\r\n  let TWBrewardMultis = [2, 1];\r\n  let rewardClaims;\r\n\r\n  const web3 = new Web3(Web3.givenProvider);\r\n\r\n  const rewardMapper = (rewardGene, _str) => {\r\n    let str = parseInt(_str);\r\n    let RewardString = \"\";\r\n    if ((parseInt(rewardGene[0]) % 10) === 1) {\r\n      totalRewards.PointsAll += str;\r\n      if (str > 1) {\r\n        RewardString += str + \" Neutral points\";\r\n      } \r\n    }\r\n    if ((parseInt(rewardGene[0]) % 10) === 2) {\r\n      totalRewards.PointsSkelly += str;\r\n      if (str > 1) {\r\n        RewardString += str + \" Skelly points\";\r\n      } \r\n    }\r\n    if ((parseInt(rewardGene[0]) % 10) === 3) {\r\n      totalRewards.PointsZombie += str;\r\n      if (str > 1) {\r\n        RewardString += str + \" Zombie points\";\r\n      } \r\n    }\r\n    if ((parseInt(rewardGene[0]) % 10) === 4) {\r\n      totalRewards.PointsDemon += str;\r\n      if (str > 1) {\r\n        RewardString += str + \" Demon points\";\r\n      } \r\n    }\r\n    if (parseInt(rewardGene[0]) > 10) {\r\n      if (Math.floor((str/10)* rewardGene[3]) > 1) {\r\n        let tempString = \" [Glyph: \" + rewardGene[4] + \" (STR: \" +Math.floor((str/10)* rewardGene[3]) + \") ]\";\r\n        totalRewards.Glyphs.push(tempString.substring(1));\r\n        RewardString += tempString;\r\n      } \r\n    }\r\n    return RewardString;\r\n  };\r\n\r\n  const geneDisasaemblerMapped = (sequence, index) => {\r\n    let geneSingle = sequence.substring(index, index + 3);\r\n    geneSingle = TraitMap[geneSingle][\"1\"][2];\r\n    return geneSingle;\r\n  };\r\n\r\n  const strDissasermbler = (sequence, index) => {\r\n    let strSingle = sequence.substring(index, index + 3);\r\n    return strSingle;\r\n  };\r\n\r\n  const listToGeneIndexer = (index) => {\r\n    if (index < 9) {\r\n      return index * 2;\r\n    } else {\r\n      return (index - 9) * 2 + 1;\r\n    }\r\n  };\r\n\r\n  const listItems = geneIcons.map((gene, index) => (\r\n    <il class={\"GeneRow\"} id={\"Gene\" + listToGeneIndexer(index)} key={gene}>\r\n      <img src={gene}></img>\r\n      <div class={\"GeneText\"}>\r\n        {geneDisasaemblerMapped(genes, listToGeneIndexer(index) * 3) + \" \" + strDissasermbler(geneStrength, listToGeneIndexer(index) * 3) + \"/100\"}\r\n        <br></br>\r\n        {rewardMapper(RewardsMap[genes.substring(listToGeneIndexer(index) * 3, listToGeneIndexer(index) * 3 + 3)], strDissasermbler(geneStrength, listToGeneIndexer(index) * 3))}\r\n      </div>\r\n      <br></br>\r\n    </il>\r\n  ));\r\n\r\n  const renderTraits = () => {\r\n    return (\r\n      <div className={\"TraitList\"} id={\"InvGenes\"}>\r\n        <ul>{listItems}</ul>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const nextReward = () => {\r\n    contract.methods.getTimeLock(prop.skeletoonTokenId).call(async (err, result) => {\r\n      if (!err) {\r\n        setTimeLocked({dateLock: new Date(result*1000)})\r\n\r\n      } else {\r\n        console.log(\"ERROR getting timeLock\");\r\n      }\r\n    });\r\n  }\r\n\r\n  const renderRewardsTotal = () => {\r\n    contract.methods.getAvailableRewards(prop.skeletoonTokenId).call(async (err, result) => {\r\n      if (!err) {\r\n        setPendingRewards(result);\r\n      } else {\r\n        console.log(\"ERROR getting available rewards\");\r\n      }\r\n    });\r\n\r\n    let GlyphStr = \"\";\r\n    if (pendingRewards != 0) {\r\n      for (let i = 0; i < totalRewards.Glyphs.length; i++) {\r\n        GlyphStr += totalRewards.Glyphs[i] + \" x\" + pendingRewards;\r\n      }\r\n      return (\r\n        <div id={\"ActiveRewardsAlt\"} className={\"RewardsBox\"}>\r\n          {\"Total Rewards:\"}\r\n          <br></br>\r\n          <br></br>\r\n          {totalRewards.PointsAll * pendingRewards + \" Neutral Points\"}\r\n          <br></br>\r\n          {totalRewards.PointsSkelly * pendingRewards + \" Skelly Points\"}\r\n          <br></br>\r\n          {totalRewards.PointsZombie * pendingRewards + \" Zombie Points\"}\r\n          <br></br>\r\n          {totalRewards.PointsDemon * pendingRewards + \" Demon Points\"}\r\n          <br></br>\r\n          {GlyphStr}\r\n          <br></br>\r\n          <div class=\"rewardNextUnlock\">{unlockDateString}</div>\r\n        </div>\r\n      );\r\n    } else {\r\n      for (let i = 0; i < totalRewards.Glyphs.length; i++) {\r\n        GlyphStr += totalRewards.Glyphs[i] + \" x1 \";\r\n      }\r\n      return (\r\n        <div id={\"PendingRewardsAlt\"} className={\"RewardsBox\"}>\r\n          {\"Total Rewards:\"}\r\n          <br></br>\r\n          <br></br>\r\n          {totalRewards.PointsAll + \" Neutral Points\"}\r\n          <br></br>\r\n          {totalRewards.PointsSkelly + \" Skelly Points\"}\r\n          <br></br>\r\n          {totalRewards.PointsZombie + \" Zombie Points\"}\r\n          <br></br>\r\n          {totalRewards.PointsDemon + \" Demon Points\"}\r\n          <br></br>\r\n          {GlyphStr}\r\n          <div class=\"rewardNextUnlock\">{unlockDateString}</div>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  const renderButton = () => {};\r\n\r\n  //ADD support for gen2 Later\r\n  const unixTimeStampToNextReward = (timeStamp) => {\r\n    let claimedStamp\r\n    if (pendingRewards == 0) {\r\n      claimedStamp = 28800 - timeStamp\r\n    }\r\n    if (pendingRewards == 1) {\r\n      claimedStamp = 86400 - timeStamp\r\n    }\r\n    if (pendingRewards == 2) {\r\n      claimedStamp = 172800 - timeStamp\r\n    }\r\n    if (pendingRewards == 3) {\r\n      return \"Maximum rewards stacked. Claim rewards to stack new rewards.\"\r\n    } else \r\n    {\r\n      let hours = Math.floor(claimedStamp/3600).toString()\r\n      if (hours.length == 1) {hours = \"0\" + hours}\r\n      let minutes = Math.floor((claimedStamp - hours*3600)/60).toString()\r\n      if (minutes.length == 1) {minutes = \"0\" + minutes}\r\n      let seconds = Math.floor((claimedStamp - hours*3600)- minutes*60).toString()\r\n      if (seconds.length == 1) {seconds = \"0\" + seconds}\r\n      if (timeStamp / 3600 > 87600){\r\n        return \"Claim your First Reward to stack additional rewards\"\r\n      } else {\r\n        return \"Next reward will be stacked in: \" + hours + \":\" + minutes + \":\" + seconds\r\n      }\r\n    }   \r\n  }\r\n  \r\n  \r\n\r\n  const claimAll = () => {\r\n\r\n\r\n  }\r\n\r\n  const claimSingle = async () => {\r\n    let skeletoonID = prop.skeletoonTokenId;\r\n      let txData = cTWRewards.methods.claimSingleReward(skeletoonID).encodeABI();\r\n      web3.eth.sendTransaction(\r\n        {\r\n          from: prop.address,\r\n          to: aTWRewards,\r\n          data: txData,\r\n          gas : await cTWRewards.methods.claimSingleReward(skeletoonID).estimateGas({from: prop.address}),\r\n          gasPrice: await web3.eth.getGasPrice()\r\n        }).on('receipt', function(receipt) {\r\n          setPendingRewards(0)\r\n        });\r\n\r\n  }\r\n\r\n  const rewardButtons = () => {\r\n    return(\r\n      <>\r\n      <div id={\"RewardsAllButton\"}>\r\n        <img src={rewardsAll} class={\"RewardImg\"} onClick={() => {claimAll()}}></img>\r\n        <br></br>\r\n        {\"View NFT Contest Entries\"}\r\n      </div>\r\n        {pendingRewards > 0 ? <div id={\"RewardsSingleButton\"}>\r\n        <img src={rewardsSingle} class={\"RewardImg\"} onClick={() => {claimSingle()}}></img>\r\n        <br></br>\r\n        {\"Claim Single Skeletoon Reward\"}</div>:\"\"}\r\n      </>\r\n    )\r\n  }\r\n\r\n\r\n  const renderContest = () => {\r\n    if (ticketsAll !== null && ticketsPersonal !== null)\r\n    {return (\r\n      <div id={\"Contest\"} className={\"RewardsBox\"}>\r\n        <div id=\"contest_text1\">{\"NFT Contest\"}<br></br>{\"Total claims across ToonWorld: \"+ticketsAll}</div>\r\n\r\n        <div id=\"contest_text2\">{\"This skeletoon currently has: \"+ticketsPersonal + \" Claims\"}</div>\r\n      </div>\r\n    )}\r\n    else {\r\n      <></>\r\n    }\r\n  }\r\n\r\n  const profileView = () => {\r\n    return (\r\n      <>\r\n        {renderTraits()}\r\n        <div id={\"RewardButtons\"}>{rewardButtons()}</div>\r\n        <div id={\"RewardSingle\"}>{renderRewardsTotal()}</div>\r\n        <div id={\"ContestBox\"}>{renderContest()}</div>\r\n      </>\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    var today = new Date();\r\n    let unixTimeLocked = ((new Date(today.getTime())) - timeLocked.dateLock.getTime()) / 1000\r\n    setUnlockDateString(unixTimeStampToNextReward(unixTimeLocked))\r\n  }, [timeLocked])\r\n\r\n  useEffect(() => {\r\n    nextReward()\r\n  }, [prop.skeletoonTokenId])\r\n\r\n  return <div>{profileView()}</div>;\r\n};\r\n\r\nexport default Rewards;\r\n","import React from 'react'\r\nimport \"../../../styles/Summon.css\";\r\nimport TraitMap from \"../../helpers/TraitMap.json\";\r\nimport RewardsMap from \"../../helpers/RewardsMap.json\";\r\nimport Web3 from \"web3\";\r\nimport { useEffect, useState } from \"react\";\r\nimport {\r\n  button_default,\r\n  icon_Bg_D,\r\n  icon_Body_D,\r\n  icon_Cape_D,\r\n  icon_Eye_D,\r\n  icon_Hat_D,\r\n  icon_Head_D,\r\n  icon_Item_D,\r\n  icon_minus,\r\n  icon_Mouth_D,\r\n  icon_no,\r\n  icon_Pet_D,\r\n  icon_plus,\r\n  icon_yes,\r\n  traitInv,\r\n} from \"../../../data/canvassrc\";\r\nimport { drawSkeletoonFull } from '../../helpers/Renderer';\r\nimport { aTWG, aTWLogic, aTWSP, aTWT, cTWG, cTWLogic, cTWSP, cTWT } from '../../helpers/Groups';\r\nimport { displayLoader } from '../../helpers/Loader';\r\nconst Summon = (prop) => {\r\n  const emptyTrait = {id: null, type:\"000\"}\r\n  const [selectedGeneIndex, setselectedGeneIndex] = useState(0); // Req for TX\r\n  const [traitIds, setTraitIds] = useState([]); // Needed For TX\r\n  const [usedTraits, setUsedTraits] = useState([emptyTrait,emptyTrait,emptyTrait,emptyTrait,emptyTrait,emptyTrait,emptyTrait,emptyTrait,emptyTrait]);\r\n  const [fetching, setFetching] = useState(\"None\");\r\n  const [approvalState, setApprovalState] = useState(0);\r\n\r\n  const web3 = new Web3(Web3.givenProvider);\r\n\r\n  const traitContract = cTWT;\r\n  let geneIcons = [\r\n    icon_Bg_D,\r\n    icon_Pet_D,\r\n    icon_Body_D,\r\n    icon_Mouth_D,\r\n    icon_Head_D,\r\n    icon_Eye_D,\r\n    icon_Hat_D,\r\n    icon_Item_D,\r\n    icon_Cape_D\r\n  ];\r\n\r\n  const previewCanvas = () => {\r\n    return (\r\n      <canvas id=\"skeletoon_summon_canvas\" width=\"2000\" height=\"2000\"></canvas>\r\n    )\r\n  }\r\n\r\n  const previewDraw = () => {\r\n    let pStr = \"000000000000000000000000000000000000000000000000000000\";\r\n    let summonArr = usedTraits\r\n    let pGene = \"\";\r\n    summonArr.forEach(trait => {\r\n      let temp = trait.type;\r\n      for (let i = 0; i<3 ;i++){\r\n        if (temp.length < 3) {\r\n          temp = \"0\" + temp\r\n        }\r\n      }\r\n      pGene = pGene + temp + \"000\"\r\n    });\r\n    drawSkeletoonFull(pGene, pStr, 'skeletoon_summon_canvas', 0, 1, 500)\r\n  } \r\n\r\n  const sendTX = async () => {\r\n    let approvals = approvalState;\r\n    let usedTraitIDs = [];\r\n    for (let i=0; i< 9; i++){\r\n      usedTraitIDs[i] = usedTraits[i].id;\r\n    }\r\n    if (approvals % 2  === 0){\r\n      let txData = cTWT.methods.setApprovalForAll(aTWLogic, \"1\").encodeABI();\r\n      web3.eth.sendTransaction(\r\n        {\r\n          from: prop.address,\r\n          to: aTWT,\r\n          data: txData,\r\n          gas : await cTWT.methods.setApprovalForAll(aTWLogic, \"1\").estimateGas({from: prop.address}),\r\n          gasPrice: await web3.eth.getGasPrice()\r\n        }).on('receipt', function(receipt) {\r\n          setApprovalState(1)\r\n        });\r\n    } else \r\n    cTWLogic.methods.summonFee().call(async (err, result) => {\r\n\r\n      if (approvals === 3){\r\n\r\n        let txData = cTWLogic.methods.summonSkeletoon(usedTraitIDs).encodeABI();\r\n        web3.eth.sendTransaction(\r\n          {\r\n            from: prop.address,\r\n            to: aTWLogic,\r\n            value: result,\r\n            data: txData,\r\n            gas : await cTWLogic.methods.summonSkeletoon(usedTraitIDs).estimateGas({from: prop.address}),\r\n            gasPrice: await web3.eth.getGasPrice()\r\n          }).on('receipt', function(receipt) {\r\n          });\r\n      }\r\n    })  \r\n  }\r\n\r\n  const actionButtons = () => {\r\n    return (\r\n      <div class=\"btn-group\">\r\n      <div class=\"button-wrapper\" onClick={() => {\r\n        var myCanvas = document.getElementById('skeletoon_summon_canvas');\r\n        myCanvas.width = 2000;\r\n        myCanvas.height = 2000;\r\n        previewDraw()\r\n        }}>\r\n      <button><img src={button_default} alt=\"my image\" /></button>\r\n      <div class={\"button_text\"}>{\"Preview\"}</div>\r\n      </div>\r\n      { approvalState >= 2\r\n      ?\r\n      <div class=\"button-wrapper\" id={\"SingleViewButton\"} onClick={() => {sendTX()}}>\r\n      <button><img src={button_default} alt=\"my image\" /></button>\r\n      <div class={\"button_text\"} >{approvalState == 3 ? \"Summon\": \"Approve Traits\"}</div>\r\n      </div>  \r\n      : \"\"}\r\n      </div> \r\n    )\r\n\r\n}\r\n\r\n  const traitBalance = () => {\r\n    if (fetching != \"None\" ){\r\n      return;\r\n    }\r\n    if (traitIds.length > 0){\r\n      return;\r\n    }\r\n    setFetching(\"Traits\");\r\n    setTraitIds([]);\r\n    fetchInventoryTrait()\r\n    return (\r\n      \"LOADING\"\r\n    )\r\n  }\r\n\r\n  const fetchInventoryTrait = () => {\r\n    traitContract.methods.walletOfOwner(prop.address).call(async (err,result) => {\r\n        if (!err){\r\n          traitContract.methods.getTraitPropertiesBatch(result).call( async (err,result) => {\r\n                let invTemp = [];\r\n                for (let i = 0; i < result.length; i= i+2){\r\n                    let temp = {id: result[i], type: result[i+1]}\r\n                    invTemp = [...invTemp, temp];\r\n                } \r\n                setTraitIds(invTemp);\r\n                setFetching(\"Done\");\r\n            })\r\n        }\r\n    })\r\n  }\r\n\r\n\r\n\r\n  function filterTrait(trait) {\r\n    let temp = trait.type\r\n    for (let i = 0 ; i<3 ;i++){\r\n      if (temp.length < 3)\r\n      {temp = \"0\"+temp}\r\n    }\r\n      return (TraitMap[temp][\"1\"][3] == selectedGeneIndex)\r\n  }\r\n\r\n  const traitSelectedFromInv = (trait) => {\r\n    const newUsed = [...usedTraits];\r\n    let index = selectedGeneIndex /2\r\n    newUsed[index] = trait\r\n    if (newUsed !== usedTraits)\r\n    {\r\n      setUsedTraits(newUsed)\r\n    }\r\n  }\r\n\r\n  const traitInventoryDisplay = () => {\r\n    let traits = traitIds;\r\n    const inventoryTraitDiv = traits.filter(trait => filterTrait(trait)).map((trait, index) => (\r\n      <il class={\"invDiv\"} id={\"invTrait\" + trait.id} key={trait.id}>\r\n        <img src={traitInv + \"/\"+ trait.type + \".png\"} onClick={() => {traitSelectedFromInv(trait)}}></img>\r\n      </il>\r\n    ));   \r\n    return (<ul>{inventoryTraitDiv}</ul>)\r\n  }\r\n\r\n  const displayInventory = () => {\r\n    if (fetching ==\"None\") {\r\n      traitBalance()\r\n    }\r\n    if (fetching == \"Traits\") {\r\n      return (\r\n        <div>{\"LOADING\"}</div>\r\n      )\r\n    } else if (fetching == \"Done\") {\r\n      return (\r\n       traitInventoryDisplay()\r\n      )\r\n    } else {return(<></>)}\r\n   }\r\n\r\n  const isTraitAdded = ( text ) => {\r\n    let tempText = text\r\n      for (let i=0; i<3; i++){\r\n        if (tempText.length < 3) {\r\n          return tempText = \"0\"+tempText\r\n        }\r\n      }\r\n  } \r\n\r\n\r\n\r\n  const listItems = geneIcons.map((gene, index) => (\r\n    <il class={\"GeneRow\"} id={\"Gene\" + index} key={gene}>\r\n      <img src={gene} onClick={() => {setselectedGeneIndex((index*2))}}></img>\r\n      {<>{(usedTraits[index].id !== null) ? \r\n      <><img src={traitInv + \"/\"+ usedTraits[index].type + \".png\"} class={\"addedTraitToSummon\"} onClick={() => {setselectedGeneIndex((index*2))}}></img>\r\n      <img class={\"ValidityLong\"} src={icon_yes} onClick={() => {setselectedGeneIndex((index*2))}}></img>\r\n      </> :\r\n      <><div class={\"GeneTextAlt\"} onClick={() => {setselectedGeneIndex((index*2))}}>{\"Trait required\"}</div><img class={\"ValidityLong\"} src={icon_no} onClick={() => {setselectedGeneIndex((index*2))}}></img></>}</>}\r\n      <br></br>\r\n    </il>\r\n  ));\r\n\r\n  const renderTraits = () => {\r\n    return (\r\n        <ul>{listItems}</ul>\r\n    );\r\n  };\r\n\r\n  useEffect(()=>{\r\n    let Arr = usedTraits\r\n    let counter = 0;\r\n    for (let i =0; i<9;i++){\r\n      if (Arr[i].id !== null) {\r\n        counter++;\r\n      }\r\n    }\r\n    let tempApproval = approvalState\r\n    if (counter === 9 && (tempApproval % 2) == 0){\r\n      traitContract.methods.isApprovedForAll(prop.address, aTWLogic).call( async(err, result) => {\r\n        if (result == true) {\r\n          setApprovalState(3)\r\n        }\r\n      });\r\n    }\r\n    else if (counter === 9 && tempApproval < 2){\r\n      setApprovalState(2)\r\n    }\r\n  },[usedTraits, approvalState])\r\n\r\n  return (\r\n    <div>\r\n      <div id=\"SummonHeaderM\">{\"Burn 9 Traits to Summon Skeletoon\"}</div>\r\n      <div id=\"SummonHeader1\">Select Trait</div>\r\n      <div id=\"SummonHeader2\">Inventory</div>\r\n      <div id={\"TraitSelector\"}>{renderTraits()}</div>\r\n      <div id={\"SummonInventory\"}>{displayInventory()}</div>\r\n      <div id={\"SummonButtons\"}>{actionButtons()}</div>\r\n      <div id={\"SummonCanvas\"}>{previewCanvas()}</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Summon","import React from 'react'\r\nimport \"../../../styles/Upgrade.css\";\r\nimport TraitMap from \"../../helpers/TraitMap.json\";\r\nimport RewardsMap from \"../../helpers/RewardsMap.json\";\r\nimport Web3 from \"web3\";\r\nimport { useEffect, useState } from \"react\";\r\nimport {\r\n  button_default,\r\n  glyphDefault,\r\n  glyphInv,\r\n  icon_Bg_D,\r\n  icon_Bg_M,\r\n  icon_Body_D,\r\n  icon_Body_M,\r\n  icon_Cape_D,\r\n  icon_Cape_M,\r\n  icon_Eye_D,\r\n  icon_Eye_M,\r\n  icon_Hat_D,\r\n  icon_Hat_M,\r\n  icon_Head_D,\r\n  icon_Head_M,\r\n  icon_Item_D,\r\n  icon_Item_M,\r\n  icon_minus,\r\n  icon_Mouth_D,\r\n  icon_Mouth_M,\r\n  icon_Pet_D,\r\n  icon_Pet_M,\r\n  icon_plus,\r\n  traitInv,\r\n} from \"../../../data/canvassrc\";\r\nimport { drawSkeletoonFull } from '../../helpers/Renderer';\r\nimport { aTWG, aTWLogic, aTWT, cTWG, cTWLogic, cTWSP, cTWT } from '../../helpers/Groups';\r\nimport { displayLoader } from '../../helpers/Loader';\r\n\r\n\r\nconst Upgrade = (prop) => {\r\n  const [selectedGeneIndex, setselectedGeneIndex] = useState(null); // Req for TX\r\n  const [usedPoints, setUsedPoints] = useState(0) //  Req for TX\r\n  const [timeLocked, setTimeLocked] = useState({dateLock: new Date()}); // Req for Points\r\n  const [availablePoints, setAvailablePoint] = useState(0); // Req for Points\r\n  const [unlockDateString, setUnlockDateString] = useState(\"\"); // Req for Points\r\n  const [pointCost, setPointCost] = useState(\"\"); // May be needed for TX ?\r\n\r\n  const [traitIds, setTraitIds] = useState([]); // Needed For TX\r\n  const [glyphIds, setGlyphIds] = useState([]); // Needed for TX\r\n  const [inventoryState, setInventoryState] = useState(\"None\");\r\n  const [selectedTrait, setSelectedTrait] = useState(\"0\");\r\n  const [selectedGlyph, setSelectedGlyph] = useState(\"0\");\r\n  const [fetching, setFetching] = useState(\"None\");\r\n  const [approvalState, setApprovalState] = useState(0);\r\n\r\n\r\n  const contract = cTWLogic;\r\n  const traitContract = cTWT;\r\n  const glyphContract = cTWG;\r\n  const skeletoonContract = cTWSP;\r\n  const web3 = new Web3(Web3.givenProvider);\r\n\r\n\r\n  let geneIcons = [\r\n    icon_Bg_D,\r\n    icon_Pet_D,\r\n    icon_Body_D,\r\n    icon_Mouth_D,\r\n    icon_Head_D,\r\n    icon_Eye_D,\r\n    icon_Hat_D,\r\n    icon_Item_D,\r\n    icon_Cape_D,\r\n    icon_Bg_M,\r\n    icon_Pet_M,\r\n    icon_Body_M,\r\n    icon_Mouth_M,\r\n    icon_Head_M,\r\n    icon_Eye_M,\r\n    icon_Hat_M,\r\n    icon_Item_M,\r\n    icon_Cape_M,\r\n  ];\r\n\r\n  const strPointCost = () => {\r\n    contract.methods.strPointCost().call(async (err, result) => {\r\n      if (!err) {\r\n          setPointCost(web3.utils.fromWei(result, 'ether'))\r\n      } else {\r\n          console.log(\"Error requesting price cost\")\r\n      }\r\n    })\r\n  };\r\n\r\n  const listToGeneIndexer = (index) => {\r\n    if (index < 9) {\r\n      return index * 2;\r\n    } else {\r\n      return (index - 9) * 2 + 1;\r\n    }\r\n  };\r\n\r\n  const geneIndexertoArr = (index) => {\r\n    if (index % 2 == 0) {return index/2} else { return ((index - 1)/2)+9}\r\n  }\r\n\r\n  const listItems = geneIcons.map((gene, index) => (\r\n    <il class={\"GeneRow\"} id={\"Gene\" + listToGeneIndexer(index)} key={gene}>\r\n      <img src={gene} onClick={() => {setselectedGeneIndex(listToGeneIndexer(index))}}></img>\r\n      <br></br>\r\n    </il>\r\n  ));\r\n\r\n  const renderTraits = () => {\r\n    return (\r\n        <ul>{listItems}</ul>\r\n    );\r\n  };\r\n\r\n  const selectedGene = () => {\r\n    return (\r\n      <>\r\n      <img src={geneIcons[geneIndexertoArr(selectedGeneIndex)]}>      \r\n      </img>\r\n      <div class={\"GeneText\"}>\r\n      {geneDisasaemblerMapped(prop.geneSeq, selectedGeneIndex * 3) + \" \" + strDissasermbler(prop.strSeq, selectedGeneIndex * 3) + \"/100\"}\r\n      </div>\r\n      </>\r\n    )\r\n  }\r\n\r\n  const changeStrSeqSwap = () => {\r\n    let prefix = \"\";\r\n    if (selectedGeneIndex != 0)\r\n    {prefix = prop.strSeq.substring(0, ((selectedGeneIndex-1)*3)+3)}\r\n    let edited\r\n    if (selectedGlyph != \"0\")\r\n    {\r\n      let glyphStr = glyphIds.find(({id}) => id === selectedGlyph)\r\n      edited = (0 + parseInt(glyphStr.points)).toString()\r\n    } else {\r\n      edited = (0).toString()\r\n    }\r\n    edited = (parseInt(edited) + parseInt(usedPoints)).toString()\r\n    for (let twj = edited.length; twj < 3 ;twj++) {edited = \"0\" + edited}\r\n    let suffix =prop.strSeq.substring(((selectedGeneIndex)*3)+3,54);\r\n     return (prefix+edited+suffix)\r\n  }\r\n\r\n  const upgradedGene = () => {\r\n    let pGene \r\n    let pStr\r\n    if (selectedTrait != \"0\"){\r\n      pGene = changeGeneSeq();\r\n      pStr = changeStrSeqSwap();\r\n    } else {\r\n      pGene = prop.geneSeq\r\n      pStr = changeStrSeq();\r\n    }\r\n    if (parseInt(strDissasermbler(pStr, selectedGeneIndex * 3))> 100){\r\n      return (\r\n        <>\r\n        <div id={\"UpgradedGeneHeader\"}>{\"Upgraded Gene\"}</div>\r\n        <img src={geneIcons[geneIndexertoArr(selectedGeneIndex)]}>  \r\n        </img>\r\n        <div class={\"GeneText\"}>\r\n        {geneDisasaemblerMapped(pGene, selectedGeneIndex * 3) + \"100/100\"}\r\n        </div>\r\n        </>\r\n      )\r\n    } else {\r\n      return (\r\n        <>\r\n        <div id={\"UpgradedGeneHeader\"}>{\"Upgraded Gene\"}</div>\r\n        <img src={geneIcons[geneIndexertoArr(selectedGeneIndex)]}>  \r\n        </img>\r\n        <div class={\"GeneText\"}>\r\n        {geneDisasaemblerMapped(pGene, selectedGeneIndex * 3) + \" \" + strDissasermbler(pStr, selectedGeneIndex * 3) + \"/100\"}\r\n        </div>\r\n        </>\r\n      )\r\n    }\r\n  }\r\n\r\n  const previewCanvas = () => {\r\n    return (\r\n      <canvas id=\"skeletoon_preview_canvas\" width=\"2000\" height=\"2000\"></canvas>\r\n    )\r\n  }\r\n  const sendTX = async () => {\r\n    let approvals = approvalState;\r\n    let position = selectedGeneIndex;\r\n    let points = usedPoints;\r\n    let pointsFree = availablePoints;\r\n    let costPerPoint = pointCost;\r\n    let glyphID = selectedGlyph;\r\n    let traitID = selectedTrait;\r\n    let skeletoonID = prop.skeletoonTokenId;\r\n    if (selectedTrait != \"0\" && (approvals % 2) == 0){\r\n      let txData = cTWT.methods.setApprovalForAll(aTWLogic, \"1\").encodeABI();\r\n      web3.eth.sendTransaction(\r\n        {\r\n          from: prop.address,\r\n          to: aTWT,\r\n          data: txData,\r\n          gas : await cTWT.methods.setApprovalForAll(aTWLogic, \"1\").estimateGas({from: prop.address}),\r\n          gasPrice: await web3.eth.getGasPrice()\r\n        }).on('receipt', function(receipt) {\r\n          setApprovalState(approvals+1)\r\n        });\r\n    } else \r\n    if (selectedGlyph != \"0\" && approvals < 2){\r\n      let txData = cTWG.methods.setApprovalForAll(aTWLogic, \"1\").encodeABI();\r\n      web3.eth.sendTransaction(\r\n        {\r\n          from: prop.address,\r\n          to: aTWG,\r\n          data: txData,\r\n          gas : await cTWG.methods.setApprovalForAll(aTWLogic, \"1\").estimateGas({from: prop.address}),\r\n          gasPrice: await web3.eth.getGasPrice()\r\n        }).on('receipt', function(receipt) {\r\n          setApprovalState(approvals+2)\r\n        });\r\n    } else \r\n    if (parseInt(points) > parseInt(pointsFree)){\r\n      let txData = cTWLogic.methods.upgradeSkeletoonPayed(skeletoonID.toString(), glyphID, traitID, points, position).encodeABI();\r\n      web3.eth.sendTransaction(\r\n        {\r\n          from: prop.address,\r\n          to: aTWLogic,\r\n          value: ((parseInt(points) - parseInt(pointsFree)) * (parseInt(web3.utils.toWei(costPerPoint)))).toString(),\r\n          data: txData,\r\n          gas : await cTWLogic.methods.upgradeSkeletoonPayed(skeletoonID.toString(), glyphID, traitID, points, position).estimateGas({from: prop.address}),\r\n          gasPrice: await web3.eth.getGasPrice()\r\n        }).on('receipt', function(receipt) {\r\n          // ???\r\n        });\r\n    } else {\r\n      let txData = cTWLogic.methods.upgradeSkeletoon(skeletoonID.toString(), glyphID, traitID, points, position).encodeABI();\r\n      web3.eth.sendTransaction(\r\n        {\r\n          from: prop.address,\r\n          to: aTWLogic,\r\n          data: txData,\r\n          gas : await cTWLogic.methods.upgradeSkeletoon(skeletoonID.toString(), glyphID, traitID, points, position).estimateGas({from: prop.address}),\r\n          gasPrice: await web3.eth.getGasPrice()\r\n        }).on('receipt', function(receipt) {\r\n          // ???\r\n        });\r\n    }\r\n  }\r\n\r\n  const drawPreview = () => {\r\n    let pStr = prop.strSeq;\r\n    let pGene = prop.geneSeq;\r\n    if (selectedTrait != \"0\"){\r\n      pGene = changeGeneSeq();\r\n    }\r\n    pStr = changeStrSeq();\r\n    drawSkeletoonFull(pGene, pStr, 'skeletoon_preview_canvas', 0, 0, 1000)\r\n  }\r\n\r\n  const actionButtons = () => {\r\n      return (\r\n        <div class=\"btn-group\">\r\n        <div class=\"button-wrapper\" onClick={() => {\r\n          var myCanvas = document.getElementById('skeletoon_preview_canvas');\r\n          myCanvas.width = 2000;\r\n          myCanvas.height = 2000;\r\n          drawPreview()\r\n          }}>\r\n        <button><img src={button_default} alt=\"my image\" /></button>\r\n        <div class={\"button_text\"}>{\"Preview\"}</div>\r\n        </div>\r\n        <div class=\"button-wrapper\" onClick={() => {sendTX()}}>\r\n        <button><img src={button_default} alt=\"my image\" /></button>\r\n        <div class={\"button_text\"}>{(selectedTrait != \"0\" && (approvalState % 2) == 0) ||  (selectedGlyph != \"0\" && approvalState < 2)? \"Approve\" : \"Upgrade\"}</div>\r\n        </div>  \r\n        </div> \r\n      )\r\n  }\r\n\r\n  const PointControl = () => {\r\n    return(\r\n      <div id={\"PointControl\"}>\r\n          <div class=\"button-wrapper\" id={\"buttonMinus\"} onClick={() => {\r\n            if (usedPoints > 0) {\r\n              setUsedPoints((parseInt(usedPoints)-1).toString())\r\n            }\r\n          }}>\r\n          <button><img src={icon_minus} alt=\"my image\" /></button>\r\n          </div>\r\n          <input id={\"PointInput\"} type=\"number\" value={usedPoints} onChange={e => { if (parseInt(e.target.value) > 100) {setUsedPoints(\"100\")} else {setUsedPoints(e.target.value)}}}/>\r\n          <div class=\"button-wrapper\" id={\"buttonPlus\"} onClick={() => {\r\n            if (usedPoints < 101) {\r\n              setUsedPoints((parseInt(usedPoints)+1).toString())\r\n            }\r\n          }}>\r\n          <button><img src={icon_plus} alt=\"my image\" /></button>\r\n          </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const nextPointReq = () => {\r\n    contract.methods.getTimeLocked(prop.skeletoonTokenId).call(async (err, result) => {\r\n      if (!err) {\r\n        setTimeLocked({dateLock: new Date(result*1000)})\r\n      } else {\r\n        console.log(\"ERROR getting timeLock\");\r\n      }\r\n    });\r\n  }\r\n\r\n  const availablePointsReq = () => {\r\n    contract.methods.getAvailablePoints(prop.skeletoonTokenId).call(async (err, result) => {\r\n      if (!err) {\r\n        setAvailablePoint(result)\r\n      } else {\r\n        console.log(\"ERROR getting timeLock\");\r\n      }\r\n    });\r\n  }\r\n\r\n  const unixTimeStampToNextReward = (timeStamp) => {\r\n    let claimedStamp\r\n    if (availablePoints == 0) {\r\n      claimedStamp = 3600 - timeStamp\r\n    }\r\n    if (availablePoints == 1) {\r\n      claimedStamp = 14400 - timeStamp\r\n    }\r\n    if (availablePoints == 2) {\r\n      claimedStamp = 28800 - timeStamp\r\n    }\r\n    if (availablePoints == 3) {\r\n      claimedStamp = 57600 - timeStamp\r\n    }\r\n    if (availablePoints == 4) {\r\n      claimedStamp = 115200 - timeStamp\r\n    }\r\n    if (availablePoints == 5) {\r\n      return \"Maximum points stacked. use points to reset point stacking.\"\r\n    } else \r\n    {\r\n      let hours = Math.floor(claimedStamp/3600).toString()\r\n      if (hours.length == 1) {hours = \"0\" + hours}\r\n      let minutes = Math.floor((claimedStamp - hours*3600)/60).toString()\r\n      if (minutes.length == 1) {minutes = \"0\" + minutes}\r\n      let seconds = Math.floor((claimedStamp - hours*3600)- minutes*60).toString()\r\n      if (seconds.length == 1) {seconds = \"0\" + seconds}\r\n      if (timeStamp / 3600 > 87600){\r\n        return \"Use your first point to stack Available Points\"\r\n      } else {\r\n        return \"Next point unlocked in: \" + hours + \":\" + minutes + \":\" + seconds\r\n      }\r\n    }   \r\n  }\r\n\r\n  const availablePointsDisplay = () => {\r\n    return (\r\n      <div id={\"AvailablePoints\"}>\r\n      {\"This skeletoon has \" + availablePoints + \" free points\"} \r\n      </div>\r\n    )\r\n  }\r\n\r\n  const nextPointDisplay = () => {\r\n    return (\r\n      <div id={\"NextPoint\"}>\r\n      {unlockDateString}\r\n      </div>\r\n    )\r\n  }\r\n\r\n\r\n  const pointCostDisplay = () => {\r\n        let boughtPoints = parseInt(usedPoints) - parseInt(availablePoints)\r\n        if (parseInt(usedPoints) < parseInt(availablePoints))\r\n        {\r\n          return (\r\n          <div id={\"PointCost\"}>\r\n          </div>\r\n        )} else {return (\r\n          <div id={\"PointCost\"}>\r\n          {\"Cost \" + (boughtPoints) * parseFloat(pointCost)}\r\n          </div>\r\n        )}     \r\n  }\r\n\r\n  const strDisplay = () => {\r\n      return (\r\n        <>\r\n        {availablePointsDisplay()}\r\n        {nextPointDisplay()}\r\n        {PointControl()}\r\n        {pointCostDisplay()}\r\n        </>\r\n      )\r\n  }\r\n\r\n  const geneDisasaemblerMapped = (sequence, index) => {\r\n    let geneSingle = sequence.substring(index, index + 3);\r\n    geneSingle = TraitMap[geneSingle][\"1\"][2];\r\n    return geneSingle;\r\n  };\r\n\r\n  const strDissasermbler = (sequence, index) => {\r\n    let strSingle = sequence.substring(index, index + 3);\r\n    return strSingle;\r\n  };\r\n\r\n\r\n\r\n  const traitBalance = () => {\r\n    if (fetching != \"None\" ){\r\n      return;\r\n    }\r\n    setInventoryState(\"Trait\")\r\n    if (traitIds.length > 0){\r\n      return;\r\n    }\r\n    setFetching(\"Traits\");\r\n    setTraitIds([]);\r\n    fetchInventoryTrait()\r\n  }\r\n\r\n  const fetchInventoryTrait = () => {\r\n    traitContract.methods.walletOfOwner(prop.address).call(async (err,result) => {\r\n        if (!err){\r\n          traitContract.methods.getTraitPropertiesBatch(result).call( async (err,result) => {\r\n                let invTemp = [];\r\n                for (let i = 0; i < result.length; i= i+2){\r\n                    let temp = {id: result[i], type: result[i+1]}\r\n                    invTemp = [...invTemp, temp];\r\n                } \r\n                setTraitIds(invTemp);\r\n                setFetching(\"None\");\r\n            })\r\n        }\r\n    })\r\n  }\r\n\r\n  const glyphBalance = () => {\r\n    if (fetching != \"None\"){\r\n      return;\r\n    }\r\n    setInventoryState(\"Glyph\")\r\n    if (glyphIds.length > 0) {\r\n      return;\r\n    }\r\n    setFetching(\"Glyph\");\r\n    setGlyphIds([]);\r\n    fetchInventoryGlyph()\r\n  }\r\n  \r\n  const fetchInventoryGlyph = () => {\r\n    glyphContract.methods.walletOfOwner(prop.address).call(async (err,result) => {\r\n        if (!err){\r\n          glyphContract.methods.getGlyphPropertiesBatch(result).call( async (err,result) => {\r\n                let invTemp = [];\r\n                for (let i = 0; i < result.length; i= i+3){\r\n                    let temp = {id: result[i], points: result[i+1], type:result[i+2]}\r\n                    invTemp = [...invTemp, temp];\r\n                } \r\n                setGlyphIds(invTemp);\r\n                setFetching(\"None\");\r\n            })\r\n        }\r\n    })  \r\n  }\r\n\r\n  const findType = () => {\r\n    let selectedTraitType;\r\n    if (selectedTrait != \"0\" ) {\r\n      selectedTraitType = traitIds.filter(obj => {\r\n        return obj.id === selectedTrait\r\n      })\r\n      return selectedTraitType[0].type\r\n    } else \r\n    return \"\"\r\n  }\r\n\r\n  const findApplies = () => {\r\n    let selectedGlyphApplies;\r\n    if (selectedGlyph != \"0\" ) {\r\n          let selectedGlyphApplies = glyphIds.filter(obj => {\r\n        return obj.id === selectedGlyph\r\n      })\r\n      return selectedGlyphApplies[0].type\r\n    } else \r\n    return \"\"\r\n  }\r\n\r\n  const tokenSelector = () => {\r\n    \r\n    return (\r\n      <div class=\"btn-group\">\r\n      <div class=\"button-wrapper\" onClick={() => {traitBalance()}}>\r\n      <button><img src={button_default} alt=\"my image\" /></button>\r\n      <div class={\"button_text\"}>{\"Trait\"}</div>\r\n      </div>\r\n      <div class=\"button-wrapper\" onClick={() => {glyphBalance()}}>\r\n      <button><img src={button_default} alt=\"my image\" /></button>\r\n      <div class={\"button_text\"}>{\"Glyphs\"}</div>\r\n      </div>\r\n      <div class=\"button-wrapper\" onClick={() => {setSelectedGlyph(\"0\"); setSelectedTrait(\"0\"); setInventoryState(\"None\")}}>\r\n      <button><img src={button_default} alt=\"my image\" /></button>\r\n      <div class={\"button_text\"} id={\"ClearSelecedButton\"}>{\"Clear\"}</div>\r\n      </div> \r\n      {selectedTrait != \"0\"? (<img src={traitInv + \"/\"+ findType() + \".png\"} class={\"selected\"}></img>) : \"\"}\r\n      {selectedGlyph != \"0\"? (<img src={glyphInv + \"/\" + findApplies() + \".png\"} class={\"selected\"}></img>) : \"\"} \r\n      </div> \r\n    )\r\n    \r\n  }\r\n\r\n\r\n  function filterTrait(trait) {\r\n    let temp = trait.type\r\n    for (let i = 0 ; i<3 ;i++){\r\n      if (temp.length < 3)\r\n      {temp = \"0\"+temp}\r\n    }\r\n      return (TraitMap[temp][\"1\"][3] == selectedGeneIndex || selectedGeneIndex % 2 == 1)\r\n  }\r\n\r\n  const traitInventoryDisplay = () => {\r\n    let traits = traitIds;\r\n    const inventoryTraitDiv = traits.filter(trait => filterTrait(trait)).map((trait, index) => (\r\n      <il class={\"invDiv\"} id={\"invTrait\" + trait.id} key={trait.id}>\r\n        <img src={traitInv + \"/\"+ trait.type + \".png\"} onClick={() => {setSelectedTrait(trait.id)}}></img>\r\n      </il>\r\n    ));   \r\n    return (<ul>{inventoryTraitDiv}</ul>)\r\n  }\r\n\r\n  function filterGlyph(glyph){\r\n    let temp = parseInt(glyph.type)\r\n    let tempgeneindex = selectedGeneIndex\r\n    if (selectedGeneIndex % 2 == 1) \r\n    {tempgeneindex--} \r\n\r\n      return (parseInt(Math.floor(temp/(2**((18-tempgeneindex)/2)))%2) )\r\n  }\r\n\r\n  const glyphInventoryDisplay = () => {\r\n    let glyphs = glyphIds;\r\n    const inventoryGlyphDiv = glyphs.filter(glyph => filterGlyph(glyph)).map((glyph, index) => (\r\n      <il class={\"invDiv\"} id={\"invGlyph\" + glyph.id} key={glyph.id}>\r\n        <img src={glyphInv + \"/\" + glyph.type + \".png\"} class={\"GlyphIcon\"} onClick={() => {setSelectedGlyph(glyph.id)}}></img>\r\n      </il>\r\n    ));\r\n    return (<ul>{inventoryGlyphDiv}</ul>)\r\n  }\r\n\r\n  const displayInventory = () => {\r\n   if (fetching != \"None\") {\r\n     return (\r\n       <div>{\"LOADING\"}</div>\r\n     )\r\n   } else if (inventoryState ==\"Trait\") {\r\n     return (\r\n      traitInventoryDisplay()\r\n     )\r\n   } else if (inventoryState ==\"Glyph\") {\r\n     return (\r\n      glyphInventoryDisplay()\r\n     )\r\n   } else {return(<></>)}\r\n  }\r\n\r\n  const upgradeDisplay = () => {\r\n    return (\r\n      <div className={\"ActionDisplay\"}>\r\n      <div className={\"SelectedGene\"}> {selectedGene()}</div>\r\n      <div className={\"UpgradedGene\"}>{upgradedGene()}</div>\r\n      <div className={\"PointsDisplay\"}>{strDisplay()}</div>\r\n      <div className={\"ButtonsDisplay\"}>{ actionButtons()}</div>\r\n      <div className={\"TokenSelector\"}>{ tokenSelector()}</div>\r\n      <div className={\"TokenInventory\"}>{ displayInventory()}</div>\r\n      <div className={\"UpgradeCanvasPreview\"}>{ previewCanvas()}</div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const changeStrSeq = () => {\r\n    let prefix = \"\";\r\n    if (selectedGeneIndex != 0)\r\n    {prefix = prop.strSeq.substring(0, ((selectedGeneIndex-1)*3)+3)}\r\n    let edited\r\n    if (selectedGlyph != \"0\")\r\n    {\r\n      let glyphStr = glyphIds.find(({id}) => id === selectedGlyph)\r\n      edited = (parseInt(prop.strSeq.substring((selectedGeneIndex)*3, ((selectedGeneIndex)*3)+3)) + parseInt(glyphStr.points)).toString()\r\n    } else {\r\n      edited = (parseInt(prop.strSeq.substring((selectedGeneIndex)*3, ((selectedGeneIndex)*3)+3))).toString()\r\n    }\r\n    edited = (parseInt(edited) + parseInt(usedPoints)).toString()\r\n    for (let twj = edited.length; twj < 3 ;twj++) {edited = \"0\" + edited}\r\n    let suffix =prop.strSeq.substring(((selectedGeneIndex)*3)+3,54);\r\n     return (prefix+edited+suffix)\r\n  }\r\n\r\n  const changeGeneSeq = () => {\r\n    let prefix = \"\";\r\n    if (selectedGeneIndex != 0)\r\n    {prefix = prop.geneSeq.substring(0, ((selectedGeneIndex-1)*3)+3)}\r\n    let edited = traitIds.find(({id}) => id === selectedTrait)\r\n    edited = edited.type\r\n    for (let i = 0 ; i<3 ;i++){\r\n      if (edited.length < 3)\r\n      {edited = \"0\"+edited}\r\n    }\r\n    let suffix =prop.geneSeq.substring(((selectedGeneIndex)*3)+3,54);\r\n     return (prefix+edited+suffix)\r\n  }\r\n\r\n  const traitSelector = () => {\r\n    return (\r\n      <>\r\n      <div id={\"GeneTextHeader\"}>{\"Select Gene to upgrade\"}</div>\r\n      <div className={\"GeneSelector\"}>{renderTraits()}</div>\r\n      {selectedGeneIndex !== null ? upgradeDisplay() : \"\"}\r\n      </>\r\n    )\r\n  }\r\n\r\n  useEffect(() => {\r\n    var today = new Date();\r\n    let unixTimeLocked = ((new Date(today.getTime())) - timeLocked.dateLock.getTime()) / 1000\r\n    setUnlockDateString(unixTimeStampToNextReward(unixTimeLocked))\r\n  }, [usedPoints, availablePoints])\r\n\r\n  useEffect(() => {\r\n    let tempApproval = approvalState\r\n    if (selectedTrait != \"0\" && (tempApproval % 2) == 0){\r\n      traitContract.methods.isApprovedForAll(prop.address, aTWLogic).call( async(err, result) => {\r\n        if (result == true) {\r\n          setApprovalState(tempApproval + 1)\r\n        }\r\n      });\r\n    }\r\n    if (selectedGlyph != \"0\" && tempApproval < 2){\r\n      glyphContract.methods.isApprovedForAll(prop.address, aTWLogic).call( async(err, result) => {\r\n        if (result == true) {\r\n          setApprovalState(tempApproval + 2)\r\n        }\r\n      });\r\n    }\r\n  }, [selectedTrait, selectedGlyph, approvalState])\r\n\r\n  useEffect(() => {\r\n    nextPointReq()\r\n    availablePointsReq()\r\n    strPointCost()\r\n  }, [prop.skeletoonTokenId])\r\n  \r\n\r\n  return (\r\n    <div>{traitSelector()}</div>\r\n  )\r\n}\r\n\r\nexport default Upgrade","import React from 'react'\r\n\r\nconst Vote = () => {\r\n  return (\r\n    <div>Vote</div>\r\n  )\r\n}\r\n\r\nexport default Vote","import React from 'react'\r\nimport { button_default, glyphInv, traitInv } from '../../../data/canvassrc';\r\nimport \"../../../styles/StarterPack.css\";\r\nimport Web3 from \"web3\";\r\nimport { aTWStarter, cTWStarter } from '../../helpers/Groups';\r\n\r\n\r\n\r\nconst StarterPack = (prop) => {\r\n    const web3 = new Web3(Web3.givenProvider);\r\n\r\n    const sendTX = async () => {\r\n    let txData = cTWStarter.methods.claimSingleReward(prop.skeletoonTokenId).encodeABI();\r\n      web3.eth.sendTransaction(\r\n        {\r\n          from: prop.address,\r\n          to: aTWStarter,\r\n          data: txData,\r\n          gas : await cTWStarter.methods.claimSingleReward(prop.skeletoonTokenId).estimateGas({from: prop.address}),\r\n          gasPrice: await web3.eth.getGasPrice()\r\n        }).on('receipt', function(receipt) {\r\n          \r\n        });\r\n    }\r\n\r\n  return (\r\n    <div id={\"Pack\"}>\r\n        {\"Following items will be airdroped to your wallet. Each Skeletoon can claim 1 starter pack.\"}\r\n        <br></br>\r\n        <img class={\"packImg\"} src={traitInv+ \"/53.png\"}></img>\r\n        <img class={\"packImg\"} src={traitInv+ \"/54.png\"}></img>\r\n        <img class={\"packImg\"} src={traitInv+ \"/56.png\"}></img>\r\n        <img class={\"packImg\"} src={traitInv+ \"/57.png\"}></img>\r\n        <img class={\"packImg\"} src={traitInv+ \"/58.png\"}></img>\r\n        <img class={\"packImg\"} src={traitInv+ \"/59.png\"}></img>\r\n        <img class={\"packImg\"} src={traitInv+ \"/60.png\"}></img>\r\n        <img class={\"packImg\"} src={traitInv+ \"/61.png\"}></img>\r\n        <img class={\"packImg\"} src={traitInv+ \"/62.png\"}></img>\r\n        <img class={\"packImg\"} src={traitInv+ \"/63.png\"}></img>\r\n        <br></br>\r\n        <div class=\"btn-group\">\r\n        <div class=\"button-wrapper\" id={\"StarterPackClaim\"} onClick={() => {sendTX()}}>\r\n        <button><img src={button_default} alt=\"my image\" /></button>\r\n        <div class={\"button_text\"} >{\"Claim\"}</div>\r\n        </div>\r\n        </div>\r\n    </div>\r\n    \r\n  )\r\n}\r\n\r\nexport default StarterPack","import React, {useEffect, useState} from 'react'\r\nimport \"../../styles/TombstoneMeniu.css\";\r\nimport abi from \"../../contracts/ABI.json\";\r\nimport Web3 from \"web3\";\r\nimport { fetchMetadata } from \"../../scripts/Helper\";\r\nimport { drawSingleCanvas, drawSkeletoonFull } from \"../helpers/Renderer\"\r\nimport { cTWSP, getGenes, getGroup, getStrength } from \"../helpers/Groups\"\r\nimport { button_dark, button_default, button_mini, button_mini2h, button_next, button_prev, icon_refresh, meniu_default } from '../../data/canvassrc';\r\n\r\n//DELET this import defore publish\r\nimport geneDataAll from \"../helpers/geneDataAll.json\";\r\n\r\nimport GetTrait from './display/GetTrait';\r\nimport Mint from './display/Mint';\r\nimport Profile from './display/Profile';\r\nimport Rewards from './display/Rewards';\r\nimport Summon from './display/Summon';\r\nimport Upgrade from './display/Upgrade';\r\nimport Vote from './display/Vote';\r\nimport StarterPack from './display/StarterPack';\r\n\r\n\r\nconst contractAddress = \"0x1dadaa7e55b2c7238ed04891ac182ea1468b79b9\";\r\nconst { ethereum } = window;\r\n\r\nconst TombstoneMeniu = (prop) => {\r\n\r\n    const [skeletoons, setSkeletoons] = useState([]);\r\n    const [selectedSkeletoonId, setSelectedSkeletoonId] = useState(null);\r\n    const [selectedMeniu, setSelectedMeniu] = useState();\r\n    const [availableMenius, setAvalableMenius] = useState([]);\r\n    const [isDisplayProfiled, setDisplayProfiled] = useState(true);\r\n    const [areSkeletoonsFetched, setFetch] = useState(0);\r\n    const [meniuConstructor, setmeniuConstructor] = useState(\"default\");\r\n    const [gene, setGeneSeq] = useState(null);\r\n    const [strength, setStrSeq] = useState(null);\r\n    const [refresh, setRefresh] = useState(false);\r\n\r\n\r\n    \r\n\r\n    const web3 = new Web3(Web3.givenProvider);\r\n\r\n\r\n    const contract = cTWSP;\r\n\r\n    const goodFetcher = () => {\r\n        contract.methods.balanceOf(prop.address).call(async(err, result) => {   \r\n          for (let i = 0; i < result; i++) {\r\n            fetcherRetry(i)\r\n          }\r\n        });\r\n      };\r\n    \r\n      const fetcherRetry = (tokenID) => {\r\n        contract.methods.tokenOfOwnerByIndex(prop.address, tokenID).call(async(err, result) => {\r\n          if (!err) {\r\n            contract.methods.tokenURI( result).call( async(err, result) => {\r\n              if (!err) {\r\n                let tokenMetadata = await fetchMetadata( result);\r\n                setSkeletoons((skeletoonList) => [...skeletoonList, tokenMetadata]);\r\n              } else {\r\n                fetcherRetry(tokenID)\r\n              }\r\n            });\r\n          } else {\r\n            fetcherRetry(tokenID)\r\n          }\r\n        });\r\n      }\r\n\r\n      const displaySkeletoonProfile = () => {\r\n        return (\r\n            <div>\r\n                  \r\n              <div id={isDisplayProfiled ? \"skeletoonProfileDisplay\" :  \"skeletoonProfileDisplay_hidden\"}>  \r\n                {displaySkeletoon()}\r\n                <div className={\"navigationBtns\"}>{selectedSkeletoonId !== null ? navigation() : \"\"}</div>\r\n              </div>\r\n            </div>\r\n          );\r\n      }\r\n\r\n      const meniuButton = (selector, text) => {\r\n          return (\r\n            <div class=\"button-wrapper\" id={selector} onClick={() => {setSelectedMeniu(selector)}}>\r\n            <button><img src={button_dark} alt=\"my image\" /></button>\r\n            <div class={\"button_text\"}>{text}</div>\r\n            </div> \r\n          )\r\n      }\r\n\r\n\r\n      const navigation =  () => {\r\n        return (\r\n            <div className={\"miniHeader\"}>\r\n              {skeletoons.length > 1 ? <div className= {\"bwrap\"} onClick={() => {\r\n                  if (selectedSkeletoonId !== 0) {\r\n                    setSelectedSkeletoonId(selectedSkeletoonId - 1);\r\n                  } else {\r\n                    setSelectedSkeletoonId((skeletoons.length)-1);\r\n                  }\r\n                }}>\r\n              <button id={\"prev_nav\"}>\r\n              <img src={button_prev} alt=\"my image\" />    \r\n              </button></div> : \"\"}\r\n              {selectedMeniu === \"List\"?\r\n              <div className= {\"bwrap\"} onClick={() => {\r\n                setFetch(0);\r\n                setSelectedSkeletoonId(null);\r\n                setSkeletoons([]);\r\n                goodFetcher()  \r\n            }}>\r\n\r\n            <button id={\"middle_nav\"}>\r\n            <img src={button_mini2h} alt=\"my image\" />    \r\n            </button></div>\r\n              \r\n              :\r\n              <div className= {\"bwrap\"} onClick={() => {\r\n                setRefresh(!refresh)\r\n              }}>\r\n            <button id={\"middle_nav\"}>\r\n            <img src={button_mini2h} alt=\"my image\" />    \r\n            </button></div>}\r\n\r\n            {skeletoons.length > 1 ? <div className= {\"bwrap\"} onClick={() => {\r\n                  if (skeletoons.length - 1 !== selectedSkeletoonId) {\r\n                    setSelectedSkeletoonId(selectedSkeletoonId + 1);\r\n                  } else {\r\n                    setSelectedSkeletoonId(0);\r\n                  }\r\n                }}>\r\n            <button id={\"next_nav\"}>\r\n            <img src={button_next} alt=\"my image\" />    \r\n            </button></div> : \"\"}\r\n            </div>\r\n        );\r\n      }\r\n\r\n      const displaySkeletoon = () => {\r\n\r\n          return (\r\n            <div>\r\n                <canvas id=\"skeletoon_profile_canvas\" width=\"2000\" height=\"2000\"></canvas>\r\n                <div className={\"skeletoonDisplayName\"}>{selectedSkeletoonId !== null ? skeletoons[selectedSkeletoonId].name : \"\"}</div>\r\n            </div>\r\n          )\r\n      }\r\n\r\n\r\n\r\n      const listToonWorldSkeletoons = () => {\r\n        const listItems = skeletoons.map((token) => (\r\n          <il class={\"SkeletoonListItem\"}\r\n            key={token.id}\r\n            onClick={() => {\r\n              setSelectedSkeletoonId(skeletoons.map((object) => object.id).indexOf(token.id));\r\n            }}\r\n          >\r\n            {token.name}\r\n            <br></br>\r\n          </il>\r\n        ));\r\n        return (\r\n          <div className={\"skeletoonListMini\"}>\r\n            {\"My Skeletoons\"}\r\n            <ul>{listItems}</ul>\r\n            \r\n          </div>\r\n        );\r\n      };\r\n\r\n      const mainDisplay = () => {\r\n          switch (selectedMeniu) {\r\n              case \"List\":\r\n                return (\r\n                    listToonWorldSkeletoons()\r\n                )\r\n              case \"Mint\":\r\n                  return (\r\n                      <Mint address = {prop.address}></Mint>\r\n                  )\r\n              case \"Summon\":  \r\n                  return (\r\n                      <Summon address = {prop.address}></Summon>\r\n                  )\r\n              case \"Profile\":\r\n                  return (\r\n                      <Profile skeletoonTokenId = {skeletoons[selectedSkeletoonId].id} geneSeq = {gene} strSeq = {strength} ></Profile>\r\n                  )\r\n              case \"Upgrade\":\r\n                  return (\r\n                      <Upgrade skeletoonTokenId = {skeletoons[selectedSkeletoonId].id} geneSeq = {gene} strSeq = {strength} address = {prop.address}></Upgrade>\r\n                  )\r\n              case \"MintTrait\":  \r\n                  return (\r\n                      <GetTrait skeletoonTokenId = {skeletoons[selectedSkeletoonId].id} geneSeq = {gene} strSeq = {strength} address = {prop.address}></GetTrait>\r\n                  ) \r\n              case \"Rewards\":\r\n                  return (\r\n                      <Rewards skeletoonTokenId = {skeletoons[selectedSkeletoonId].id} geneSeq = {gene} strSeq = {strength} address = {prop.address}></Rewards>\r\n                  ) \r\n              case \"Vote\":\r\n                  return (\r\n                      <Vote></Vote>\r\n                  )\r\n              case \"StarterPack\":\r\n                  return (\r\n                      <StarterPack skeletoonTokenId = {skeletoons[selectedSkeletoonId].id} address = {prop.address}></StarterPack>\r\n                  )\r\n          }\r\n      }\r\n\r\n      const meniuDisplay = () => {\r\n          return(\r\n            \r\n            <div class=\"btn-group\">\r\n                {meniuButton(\"Mint\",\"Mint\")}\r\n                \r\n                \r\n            \r\n                {availableMenius.includes(\"Toonworld Skeletoon Profile\") ? <div>\r\n                {/*meniuButton(\"Summon\",\"Summon\")*/}\r\n                {meniuButton(\"Profile\",\"Profile\")}\r\n                {meniuButton(\"Upgrade\",\"Upgrade\")}   \r\n                {meniuButton(\"List\",\"List\")}\r\n                {meniuButton(\"MintTrait\",\"Extract Trait\")} \r\n                {meniuButton(\"StarterPack\", \"Starter Pack\")}\r\n                </div>: \"\"}\r\n                {availableMenius.includes(\"ToonWorldSpecials\") || availableMenius.includes(\"ShyFeet\") || availableMenius.includes(\"SinfulCreattons\") || availableMenius.includes(\"Skeletoons\") || availableMenius.includes(\"Toonworld Skeletoon Profile\")? meniuButton(\"Rewards\",\"Rewards\")  : \"\"}\r\n                \r\n            </div>\r\n          )\r\n      }\r\n\r\n    useEffect(() => {\r\n        drawSingleCanvas(meniu_default, 'tombstoneMeniu_canvas');\r\n    }, [meniuConstructor]);\r\n\r\n    useEffect(() => {\r\n        setFetch(0);\r\n        setSelectedSkeletoonId(null);\r\n        setSkeletoons([]);\r\n        goodFetcher()\r\n        setAvalableMenius(getGroup(prop.address))\r\n    }, [prop.address]);\r\n\r\n    useEffect(() => {\r\n        if (selectedMeniu === \"Profile\" || selectedMeniu === \"Upgrade\" || selectedMeniu === \"MintTrait\" || selectedMeniu === \"List\" || selectedMeniu === \"StarterPack\"){\r\n            setDisplayProfiled(true)\r\n        } else if (selectedMeniu === \"Rewards\" && availableMenius.includes(\"Toonworld Skeletoon Profile\")){\r\n            setDisplayProfiled(true)\r\n        } else {\r\n            setDisplayProfiled(false)\r\n        }\r\n    }, [selectedMeniu])\r\n\r\n    useEffect(() => {\r\n        if (availableMenius.includes(\"Toonworld Skeletoon Profile\")){\r\n            setSelectedMeniu(\"List\")\r\n            } else {\r\n            setSelectedMeniu(\"Mint\")    \r\n            }\r\n    }, [availableMenius.length])\r\n\r\n    useEffect(() =>{\r\n        if (selectedSkeletoonId !== null){\r\n\r\n            // Change to get gene and stregth data from on chain\r\n            \r\n            cTWSP.methods.getStrength(skeletoons[selectedSkeletoonId].id).call(async(err, result) =>{\r\n                if (!err)\r\n                {    \r\n                    let strResult = result\r\n                    for (let i = 54 - strResult.length; i >0 ; i--){\r\n                      strResult = \"0\" + strResult\r\n                    }\r\n                    setStrSeq(strResult)\r\n                    cTWSP.methods.getGenes(skeletoons[selectedSkeletoonId].id).call(async(err, result) =>{\r\n                      if (!err)\r\n                      {    \r\n                          let geneResult = result\r\n                          for (let i = 54 - geneResult.length; i >0 ; i--){\r\n                            geneResult = \"0\" + geneResult\r\n                          }\r\n                          setGeneSeq(geneResult)\r\n                          var myCanvas = document.getElementById('skeletoon_profile_canvas');\r\n                          myCanvas.width = 2000;\r\n                          myCanvas.height = 2000;\r\n                          drawSkeletoonFull(geneResult, strResult, 'skeletoon_profile_canvas', 0, 2, 250);\r\n                      }\r\n                      else \r\n                      {console.log(err)}\r\n                  })\r\n                }\r\n                else \r\n                {console.log(err)}\r\n            })    \r\n        }\r\n    }, [selectedSkeletoonId])\r\n\r\n    useEffect(() => {\r\n        if (areSkeletoonsFetched == 0 && skeletoons.length === 1) {\r\n            setSelectedSkeletoonId(0)\r\n            setFetch(1)\r\n        }\r\n    }, [skeletoons])\r\n\r\n   /* useEffect(() => {\r\n        if (typeof gene === \"string\" && typeof strength === \"string\"){\r\n            var myCanvas = document.getElementById('skeletoon_profile_canvas');\r\n            myCanvas.width = 2000;\r\n            myCanvas.height = 2000;\r\n            drawSkeletoonFull(gene, strength, 'skeletoon_profile_canvas', 0, 2, 250);\r\n        }\r\n    },[gene, strength])*/\r\n\r\n    useEffect(() => {\r\n      if (selectedSkeletoonId !== null){\r\n\r\n          // Change to get gene and stregth data from on chain\r\n          \r\n          cTWSP.methods.getStrength(skeletoons[selectedSkeletoonId].id).call(async(err, result) =>{\r\n              if (!err)\r\n              {    \r\n                  for (let i = 54 - result.length; i >0 ; i--){\r\n                      result = \"0\" + result\r\n                  }\r\n                  setStrSeq(result)\r\n                  cTWSP.methods.getGenes(skeletoons[selectedSkeletoonId].id).call(async(err, result) =>{\r\n                    if (!err)\r\n                    {    \r\n                        for (let i = 54 - result.length; i >0 ; i--){\r\n                            result = \"0\" + result\r\n                        }\r\n                        setGeneSeq(result)\r\n                        var myCanvas = document.getElementById('skeletoon_profile_canvas');\r\n                          myCanvas.width = 2000;\r\n                          myCanvas.height = 2000;\r\n                          drawSkeletoonFull(gene, strength, 'skeletoon_profile_canvas', 0, 2, 250);\r\n                    }\r\n                    else \r\n                    {console.log(err)}\r\n                })\r\n              }\r\n              else \r\n              {console.log(err)}\r\n          })    \r\n      }\r\n    }, [refresh])\r\n\r\n\r\n\r\n  return (\r\n    <div id={\"tombstoneMeniu_container\"}>\r\n            <canvas id={\"tombstoneMeniu_canvas\"} width=\"300\" height=\"1140\"></canvas>\r\n            <div id={\"tombstoneMeniu_overlay\"}>\r\n                {meniuDisplay()}          \r\n            </div> \r\n            <div id={isDisplayProfiled?\"tombstoneDisplay_overlay_small\": \"tombstoneDisplay_overlay_large\"}>\r\n                {displaySkeletoonProfile()}\r\n                {mainDisplay()}\r\n            </div>         \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TombstoneMeniu","import React, { useEffect, useState } from \"react\";\r\nimport \"../../styles/Dashboard.css\";\r\nimport { drawSingleCanvas } from \"../helpers/Renderer\"\r\nimport \"../../styles/Tombstone.css\";\r\nimport TombstoneMeniu from \"./TombstoneMeniu\";\r\nimport { tombstone_default,  background_default } from '../../data/canvassrc';\r\nimport { reqChain } from \"../helpers/Groups\";\r\n\r\n\r\nconst Dashboard = (prop) => {\r\n  const [settings, setsettings] = useState([\"default\", \"default\"]);\r\n\r\n\r\n  useEffect(() => {   \r\n    drawSingleCanvas(background_default, 'dashboard_canvas');\r\n    drawSingleCanvas(tombstone_default, 'tombstone_canvas');\r\n  }, [settings]);\r\n\r\n  return (\r\n    <div id={\"dashboard_container\"}>\r\n      <canvas id={\"dashboard_canvas\"} width=\"3360\" height=\"1688\"></canvas>\r\n      <div id={\"tombstone_container\"}>\r\n            <canvas id={\"tombstone_canvas\"}  width=\"1940\" height=\"1600\"></canvas>\r\n            {prop.address !== true && prop.chain === reqChain ? <TombstoneMeniu address={prop.address} chain={prop.chain}></TombstoneMeniu> : <div id={\"connect_wallet_overlay\"}> Please connect to your wallet on fantom network             \r\n            </div>}   \r\n      </div>    \r\n    </div>\r\n  );\r\n\r\n};\r\n\r\nexport default Dashboard;\r\n","import React, { useEffect, useState } from 'react'\r\nimport \"../../styles/NFTcard.css\";\r\nimport TraitMap from \"../helpers/TraitMap.json\"\r\nimport RewardsMap from \"../helpers/RewardsMap.json\";\r\nimport { aTWG, aTWMarket, aTWSP, aTWT, cTWG, cTWMarket, cTWSP, cTWT } from '../helpers/Groups';\r\nimport {\r\n    glyphDefault,\r\n    glyphInv,\r\n    icon_Bg_D,\r\n    icon_Bg_M,\r\n    icon_Body_D,\r\n    icon_Body_M,\r\n    icon_Cape_D,\r\n    icon_Cape_M,\r\n    icon_Eye_D,\r\n    icon_Eye_M,\r\n    icon_Hat_D,\r\n    icon_Hat_M,\r\n    icon_Head_D,\r\n    icon_Head_M,\r\n    icon_Item_D,\r\n    icon_Item_M,\r\n    icon_Mouth_D,\r\n    icon_Mouth_M,\r\n    icon_Pet_D,\r\n    icon_Pet_M,\r\n    traitInv\r\n  } from \"../../data/canvassrc\";\r\nimport { drawSkeletoonFull } from '../helpers/Renderer';\r\nimport Web3 from \"web3\";\r\n\r\nconst NFTcard = (prop) => {\r\n    const [renderImageType , setRenderImageType] = useState(null);\r\n    const [renderPropertiesType ,setRenderPropertiesType] = useState(null)\r\n    const [marketRender, setMarketRender] = useState(null);\r\n    const [isApproved, setApproval] = useState(0);\r\n    const [price, setPrice] = useState(null);\r\n    const [seller, setSeller] = useState(null);\r\n    const [salePrice, setSalePrice] = useState(\"0\");\r\n\r\n    const web3 = new Web3(Web3.givenProvider);\r\n    \r\n\r\n    let geneIcons = [\r\n        icon_Bg_D,\r\n        icon_Pet_D,\r\n        icon_Body_D,\r\n        icon_Mouth_D,\r\n        icon_Head_D,\r\n        icon_Eye_D,\r\n        icon_Hat_D,\r\n        icon_Item_D,\r\n        icon_Cape_D,\r\n        icon_Bg_M,\r\n        icon_Pet_M,\r\n        icon_Body_M,\r\n        icon_Mouth_M,\r\n        icon_Head_M,\r\n        icon_Eye_M,\r\n        icon_Hat_M,\r\n        icon_Item_M,\r\n        icon_Cape_M,\r\n      ];\r\n    let totalRewards = { PointsAll: 0, PointsSkelly: 0, PointsZombie: 0, PointsDemon: 0, Glyphs: [] };\r\n    let TWBrewardMultis = [2, 1];\r\n\r\n    const padder = (input) => {\r\n        if (typeof input === \"string\"){let padded = input\r\n        for (let i = 54 - padded.length; i >0 ; i--){\r\n            padded = \"0\" + padded\r\n        }\r\n        return padded\r\n    } else {\r\n        return \r\n    }\r\n    }\r\n\r\n    const rewardMapper = (rewardGene, _str) => {\r\n      let str = parseInt(_str);\r\n      let RewardString = \"\";\r\n      if ((parseInt(rewardGene[0]) % 10) === 1) {\r\n        totalRewards.PointsAll += str;\r\n        if (str > 1) {\r\n          RewardString += str + \" Neutral points\";\r\n        } \r\n      }\r\n      if ((parseInt(rewardGene[0]) % 10) === 2) {\r\n        totalRewards.PointsSkelly += str;\r\n        if (str > 1) {\r\n          RewardString += str + \" Skelly points\";\r\n        } \r\n      }\r\n      if ((parseInt(rewardGene[0]) % 10) === 3) {\r\n        totalRewards.PointsZombie += str;\r\n        if (str > 1) {\r\n          RewardString += str + \" Zombie points\";\r\n        } \r\n      }\r\n      if ((parseInt(rewardGene[0]) % 10) === 4) {\r\n        totalRewards.PointsDemon += str;\r\n        if (str > 1) {\r\n          RewardString += str + \" Demon points\";\r\n        } \r\n      }\r\n      if (parseInt(rewardGene[0]) > 10) {\r\n        if (Math.floor((str/10)* rewardGene[3]) > 1) {\r\n          let tempString = \" [Glyph: \" + rewardGene[4] + \" (STR: \" +Math.floor((str/10)* rewardGene[3]) + \") ]\";\r\n          totalRewards.Glyphs.push(tempString.substring(1));\r\n          RewardString += tempString;\r\n        } \r\n      }\r\n      return RewardString;\r\n    };\r\n    \r\n      const geneDisasaemblerMapped = (sequence, index) => {\r\n        let geneSingle = sequence.substring(index, index + 3);\r\n        geneSingle = TraitMap[geneSingle][\"1\"][2];\r\n        return geneSingle;\r\n      };\r\n    \r\n      const strDissasermbler = (sequence, index) => {\r\n        let strSingle = sequence.substring(index, index + 3);\r\n        return strSingle;\r\n      };\r\n    \r\n      const listToGeneIndexer = (index) => {\r\n        if (index < 9) {\r\n          return index * 2;\r\n        } else {\r\n          return (index - 9) * 2 + 1;\r\n        }\r\n      };\r\n    \r\n      \r\n      \r\n    \r\n      const renderTraits = () => {\r\n        const listItems = geneIcons.map((gene, index) => (\r\n            <il class={\"GeneRow\"} id={\"Gene\" + listToGeneIndexer(index)} key={gene}>\r\n              <img src={gene}></img>\r\n              <div class={\"GeneText\"}>\r\n                {geneDisasaemblerMapped(padder(prop.card.properties.gene), listToGeneIndexer(index) * 3) + \" \" + strDissasermbler(padder(prop.card.properties.str), listToGeneIndexer(index) * 3) + \"/100\"}\r\n                <br></br>\r\n                {rewardMapper(RewardsMap[padder(prop.card.properties.gene).substring(listToGeneIndexer(index) * 3, listToGeneIndexer(index) * 3 + 3)], strDissasermbler(padder(prop.card.properties.str), listToGeneIndexer(index) * 3))}\r\n              </div>\r\n              <br></br>\r\n            </il>\r\n          ));\r\n        return (\r\n          <div className={\"TraitList\"} id={\"MarketTraitList\"}>\r\n            <ul>{listItems}</ul>\r\n          </div>\r\n        );\r\n      };\r\n\r\n      const renderTraitCard = () => {\r\n          let traitType = prop.card.properties.type\r\n          for (let i = 0; i < 3; i++){\r\n              if (traitType.length < 3){\r\n                traitType = \"0\"+traitType;\r\n              }\r\n          }\r\n          return (\r\n            <div className={\"TraitList\"} id={\"GlyphList\"}>\r\n            {\"Trait Name :\" + TraitMap[traitType][\"1\"][2]}\r\n            <br></br>\r\n            <br></br>\r\n            {\"Applies To Major Gene : \"}\r\n            <br></br>\r\n            <img src={geneIcons[(TraitMap[traitType][\"1\"][3])/2] }></img>\r\n            </div>\r\n          );\r\n      }\r\n\r\n      const renderGlyphCard = () => {\r\n          let glyphApplies = prop.card.properties.applies\r\n          let appliedPos = [false, false, false, false, false, false, false, false, false];\r\n          let icons = geneIcons.slice(0,9)\r\n          for (let i = 9; i>0 ; i--){\r\n            if ((parseInt(glyphApplies) >> i)%2 ===1){\r\n                appliedPos[9-i] = true\r\n            } else {\r\n                appliedPos[9-i] = false;\r\n            }\r\n          }\r\n          const iconFiltered = icons.filter( item => appliedPos[icons.indexOf(item)]).map((gene, index) => (\r\n            <il class={\"GeneRow\"} id={\"Gene\" + listToGeneIndexer(index)} key={gene}>\r\n              <img src={gene}></img>\r\n              <br></br>\r\n            </il>\r\n          ));\r\n          return (\r\n            <div className={\"TraitList\"} id={\"GlyphList\"}>\r\n            {\"Applies to trait types:\"}\r\n              <ul>{iconFiltered}</ul>\r\n            {\"Strength: \" + prop.card.properties.str}\r\n            </div>\r\n          );\r\n      }\r\n\r\n    const displayImage = () => {\r\n        if (prop.card.NFTtype === \"Skeletoon\"){\r\n            return (\r\n                <>\r\n                <canvas id=\"market_canvas\" width=\"2000\" height=\"2000\"></canvas>\r\n                 {renderTraits()}\r\n                </>\r\n            )\r\n        } else if (prop.card.NFTtype === \"Trait\") {\r\n            return (\r\n                <>\r\n                <img id=\"market_img\" src={(traitInv + \"/\"+prop.card.properties.type + \".png\")}></img>\r\n                {renderTraitCard()}\r\n                </>\r\n            )\r\n        } else if (prop.card.NFTtype === \"Glyph\") {\r\n            return (\r\n                <>\r\n                <img id=\"market_img\" src={glyphInv + \"/\" + prop.card.properties.applies + \".png\"}></img>\r\n                {renderGlyphCard()}\r\n                </>\r\n            )\r\n        } else {\r\n            return (\r\n                <></>\r\n            )\r\n        }\r\n    }\r\n\r\n    const listItem  = async () => {\r\n        let address;\r\n        if (prop.card.NFTtype === \"Glyph\") {\r\n            address = \"2\"\r\n        }\r\n        if (prop.card.NFTtype === \"Trait\") {\r\n            address = \"1\"\r\n        }\r\n        if (prop.card.NFTtype === \"Skeletoon\") {\r\n          address = \"0\"\r\n        }\r\n        if (salePrice !== \"0\")\r\n        {let txData = cTWMarket.methods.createMarketItem(address, prop.card.tokenID, salePrice).encodeABI();\r\n        web3.eth.sendTransaction(\r\n          {\r\n            from: prop.address,\r\n            to: aTWMarket,\r\n            value: \"0\",\r\n            data: txData,\r\n            gas : await cTWMarket.methods.createMarketItem(address, prop.card.tokenID, salePrice).estimateGas({from: prop.address}),\r\n            gasPrice: await web3.eth.getGasPrice()\r\n          }).on('receipt', function(receipt) {\r\n  \r\n          });}\r\n      }\r\n\r\n    const approveForSale  = async () => {\r\n        let address;\r\n        let contract;\r\n        if (prop.card.NFTtype === \"Glyph\") {\r\n            address = aTWG\r\n            contract = cTWG\r\n        }\r\n        if (prop.card.NFTtype === \"Trait\") {\r\n            address = aTWT\r\n            contract = cTWT\r\n        }\r\n        if (prop.card.NFTtype === \"Skeletoon\") {\r\n          address = aTWSP\r\n          contract = cTWSP\r\n        }\r\n        let txData = contract.methods.approve(aTWMarket, prop.card.tokenID).encodeABI();\r\n        web3.eth.sendTransaction(\r\n          {\r\n            from: prop.address,\r\n            to: address,\r\n            data: txData,\r\n            gas : await contract.methods.approve(aTWMarket, prop.card.tokenID).estimateGas({from: prop.address}),\r\n            gasPrice: await web3.eth.getGasPrice()\r\n          }).on('receipt', function(receipt) {\r\n            setApproval(1)\r\n          });\r\n      }\r\n\r\n    const buyListing  = async () => {\r\n        let address;\r\n        if (prop.card.NFTtype === \"Glyph\") {\r\n            address = aTWG\r\n        }\r\n        if (prop.card.NFTtype === \"Trait\") {\r\n            address = aTWT\r\n        }\r\n        if (prop.card.NFTtype === \"Skeletoon\") {\r\n          address = aTWSP\r\n        }\r\n        let txData = cTWMarket.methods.createMarketSale(address, prop.card.marketID).encodeABI();\r\n        web3.eth.sendTransaction(\r\n          {\r\n            from: prop.address,\r\n            to: aTWMarket,\r\n            value: price,\r\n            data: txData,\r\n            gas : await cTWMarket.methods.createMarketSale(address, prop.card.marketID).estimateGas({from: prop.address}),\r\n            gasPrice: await web3.eth.getGasPrice()\r\n          }).on('receipt', function(receipt) {\r\n  \r\n          });\r\n      }\r\n\r\n    const cancelListing = async () => {\r\n      let address;\r\n      if (prop.card.NFTtype === \"Glyph\") {\r\n          address = aTWG\r\n      }\r\n      if (prop.card.NFTtype === \"Trait\") {\r\n          address = aTWT\r\n      }\r\n      if (prop.card.NFTtype === \"Skeletoon\") {\r\n        address = aTWSP\r\n      }\r\n      let txData = cTWMarket.methods.cancelMarketSale(address, prop.card.marketID).encodeABI();\r\n      web3.eth.sendTransaction(\r\n        {\r\n          from: prop.address,\r\n          to: aTWMarket,\r\n          data: txData,\r\n          gas : await cTWMarket.methods.cancelMarketSale(address, prop.card.marketID).estimateGas({from: prop.address}),\r\n          gasPrice: await web3.eth.getGasPrice()\r\n        }).on('receipt', function(receipt) {\r\n\r\n        });\r\n    }\r\n\r\n\r\n\r\n    const displayMarket = () => {\r\n        if (marketRender === \"Buy\" && price !==null) {\r\n            return (\r\n                <>\r\n                <div className={\"ItemPrice\"}>{price !== undefined && price !== null ? \"Price:\" + web3.utils.fromWei(price, 'ether') + \"FTM\" : \"Error Getting price\"}</div>\r\n                <div id={\"ItemSeller\"}>{\"Seller: \" + seller}</div>\r\n                <button class={\"FilterBtn\"} id={\"MarketBtn\"} onClick={() => {\r\n                    buyListing()\r\n                }}>\r\n                {\"Buy\"}\r\n                </button>\r\n                </>\r\n            )\r\n        }\r\n        if (marketRender === \"List\") {\r\n            return (\r\n                <>\r\n                <input class={\"StrengthInput\"} id={\"PriceInput\"} type=\"number\" placeholder={\"Price: 0.00 FTM\"} onChange={e => {  setSalePrice(web3.utils.toWei(e.target.value))\r\n                  }}/>\r\n                {isApproved === 1 && salePrice !== \"0\"? \r\n                <button class={\"FilterBtn\"} id={\"MarketBtn\"} onClick={() => {\r\n                    listItem()\r\n                }}>\r\n                {\"List on market\"}\r\n                </button>\r\n                :\r\n                <></>\r\n                }\r\n                {isApproved === 0 ?\r\n                  <button class={\"FilterBtn\"} id={\"MarketBtn\"} onClick={() => {\r\n                      approveForSale()\r\n                  }}>\r\n                  {\"Approve for sale\"}\r\n                  </button>\r\n                  :<></>\r\n                }\r\n                </>\r\n            )\r\n        }\r\n        if (marketRender === \"Cancel\" && price !==null) {\r\n            return (\r\n                <>\r\n                <div className={\"ItemPrice\"}>\r\n                {price !== undefined && price !== null?\"Price:\" + web3.utils.fromWei(price, 'ether') + \"FTM\" : \"Error Getting Price\"}</div>\r\n                <div id={\"ItemSeller\"}>{\"Seller: \" + seller}<br></br>{\"(You)\"}</div>\r\n                <button class={\"FilterBtn\"} id={\"MarketBtn\"} onClick={() => {\r\n                    cancelListing()\r\n                }}>\r\n                {\"Cancel Listing\"}\r\n                </button>\r\n                </>\r\n            )\r\n        } else {\r\n            return (<>\r\n            </>)\r\n        }\r\n    }\r\n    \r\n    \r\n\r\n\r\n  useEffect(() => {\r\n      setRenderImageType(prop.card.NFTtype)\r\n      let contract\r\n      if (prop.card.NFTtype === \"Skeletoon\")\r\n      { \r\n\r\n          let padGene = padder(prop.card.properties.gene)\r\n          let padStr = padder(prop.card.properties.str)\r\n          drawSkeletoonFull(padGene, padStr, 'market_canvas', 0, 1, 500)\r\n          contract = cTWSP\r\n      }\r\n        if (prop.card.NFTtype === \"Glyph\") {\r\n            contract = cTWG\r\n        }\r\n        if (prop.card.NFTtype === \"Trait\") {\r\n            contract = cTWT\r\n        }\r\n        contract.methods.getApproved(prop.card.tokenID).call((err,result) => {\r\n            if (result === aTWMarket){\r\n                setApproval(1)\r\n            } else {\r\n                setApproval(0)\r\n            }\r\n        })\r\n  }, [prop.card.NFTtype]) \r\n\r\n\r\n  useEffect(() => {\r\n    if (prop.card.marketID !== null) {\r\n        cTWMarket.methods.fetchSingle(prop.card.marketID).call(async (err,result) => { \r\n            if (!err){\r\n                if (result[3].toLowerCase() === prop.address){\r\n                    setMarketRender(\"Cancel\")\r\n                    setPrice(result[5])\r\n                    setSeller(result[3])\r\n                } else {\r\n                    setMarketRender(\"Buy\")\r\n                    setPrice(result[5])\r\n                    setSeller(result[3])\r\n                }       \r\n            }\r\n        })\r\n    } else {\r\n        setMarketRender(\"List\")\r\n    }\r\n  },[prop.card.marketID])\r\n    \r\n  return (\r\n    <div id={\"cardDisplay\"}>\r\n        {displayImage()}\r\n        {displayMarket()}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default NFTcard","import React from 'react'\r\nimport { useEffect, useState } from \"react\";\r\nimport \"../../styles/Market.css\";\r\nimport TraitMap from \"../helpers/TraitMap.json\"\r\nimport { aTWG, aTWMarket, aTWSP, aTWT, cTWG, cTWMarket, cTWSP, cTWT } from '../helpers/Groups';\r\nimport { fetchMetadata } from '../../scripts/Helper';\r\nimport {\r\n    gen1Placeholder,\r\n    gen2Placeholder,\r\n    glyphDefault,\r\n    glyphInv,\r\n    icon_Bg_D,\r\n    icon_Bg_M,\r\n    icon_Body_D,\r\n    icon_Body_M,\r\n    icon_Cape_D,\r\n    icon_Cape_M,\r\n    icon_Eye_D,\r\n    icon_Eye_M,\r\n    icon_Hat_D,\r\n    icon_Hat_M,\r\n    icon_Head_D,\r\n    icon_Head_M,\r\n    icon_Item_D,\r\n    icon_Item_M,\r\n    icon_Mouth_D,\r\n    icon_Mouth_M,\r\n    icon_Pet_D,\r\n    icon_Pet_M,\r\n    traitInv\r\n  } from \"../../data/canvassrc\";\r\nimport NFTcard from './NFTcard';\r\nimport Web3 from \"web3\";\r\n\r\nconst Market = (prop) => {\r\n    const [selectedDisplay, setSelectedDisplay] = useState(\"Inventory\")\r\n    const [selectedAddress, setSelectedAddress] = useState(\"Skeletoons\")\r\n    const [filter, setFilter] = useState({base: null, skeletoon: {\r\n        0 : {genes: null, strength:null},\r\n        1 : {genes: null, strength:null},\r\n        2 : {genes: null, strength:null},\r\n        3 : {genes: null, strength:null},\r\n        4 : {genes: null, strength:null},\r\n        5 : {genes: null, strength:null},\r\n        6 : {genes: null, strength:null},\r\n        7 : {genes: null, strength:null},\r\n        8 : {genes: null, strength:null},\r\n        9 : {genes: null, strength:null},\r\n        10 : {genes: null, strength:null},\r\n        11 : {genes: null, strength:null},\r\n        12 : {genes: null, strength:null},\r\n        13 : {genes: null, strength:null},\r\n        14 : {genes: null, strength:null},\r\n        15 : {genes: null, strength:null},\r\n        16 : {genes: null, strength:null},\r\n        17 : {genes: null, strength:null}\r\n    }, trait: {type:null, applies:null}, glyph:{strength:null, applies:null}})\r\n    const [constructor, setConstructor] = useState(\"default\");\r\n    const [page, setPage] = useState(0);\r\n    const [cardOpen, setCardOpen] = useState(0);\r\n    const [cardItem, setCardItem] = useState({NFTtype: null, tokenID: null, properties: [], marketID: null});\r\n    const [marketItems, setMarketItems] = useState({skeletoons: [], traits: [], glyphs: []});\r\n    const [inventory, setInventory] = useState({skeletoons: [], traits: [], glyphs: []})\r\n    const [listings, setListings] = useState({skeletoons: [], traits: [], glyphs: []})\r\n    const [filtered, setFiltered] = useState({skeletoons: [], traits: [], glyphs: []})\r\n    const [filterBool, setFilterBool] = useState(0);\r\n\r\n\r\n    let geneIcons = [\r\n        icon_Bg_D,\r\n        icon_Pet_D,\r\n        icon_Body_D,\r\n        icon_Mouth_D,\r\n        icon_Head_D,\r\n        icon_Eye_D,\r\n        icon_Hat_D,\r\n        icon_Item_D,\r\n        icon_Cape_D,\r\n        icon_Bg_M,\r\n        icon_Pet_M,\r\n        icon_Body_M,\r\n        icon_Mouth_M,\r\n        icon_Head_M,\r\n        icon_Eye_M,\r\n        icon_Hat_M,\r\n        icon_Item_M,\r\n        icon_Cape_M,\r\n      ];\r\n\r\n      let geneIconsTrait = [\r\n        icon_Bg_D,\r\n        icon_Pet_D,\r\n        icon_Body_D,\r\n        icon_Mouth_D,\r\n        icon_Head_D,\r\n        icon_Eye_D,\r\n        icon_Hat_D,\r\n        icon_Item_D,\r\n        icon_Cape_D\r\n      ];\r\n      //TEMP\r\n      const contract = cTWSP;\r\n      const TWT = cTWT;\r\n      const TWG = cTWG;\r\n      const cMarket = cTWMarket;\r\n      const aMarket = aTWMarket;\r\n\r\n      const web3 = new Web3(Web3.givenProvider);\r\n\r\n      const fetchInventoryGlyph = (inventoryLoadOld) => {\r\n        TWG.methods.walletOfOwner(prop.address).call(async (err,result) => {\r\n            if (!err){\r\n                TWG.methods.getGlyphPropertiesBatch(result).call( async (err,result) => {\r\n                    let invTemp = inventoryLoadOld\r\n                    for (let i = 0; i < result.length; i= i+3){\r\n                        let temp = {id: result[i], strength: result[i+1], appliesTo:result[i+2]}\r\n                        invTemp.glyphs = [...invTemp.glyphs, temp];\r\n                    } \r\n                    setInventory(invTemp);\r\n                })\r\n            }\r\n        })  \r\n      }\r\n\r\n      const fetchInventoryTrait = (inventoryLoadOld) => {\r\n        TWT.methods.walletOfOwner(prop.address).call(async (err,result) => {\r\n            if (!err){\r\n                TWT.methods.getTraitPropertiesBatch(result).call( async (err,result) => {\r\n                    let invTemp = inventoryLoadOld\r\n                    for (let i = 0; i < result.length; i= i+2){\r\n                        let temp = {id: result[i], typeId: result[i+1]}\r\n                        invTemp.traits = [...invTemp.traits, temp];\r\n                    } \r\n                    setInventory(invTemp);\r\n                    fetchInventoryGlyph(invTemp)\r\n                })\r\n            }\r\n        })\r\n      }\r\n\r\n      const fetchInventory = () => {\r\n          let inventoryLoad = {skeletoons: [], traits: [], glyphs: []}\r\n          contract.methods.walletOfOwner(prop.address).call( async (err,result) => {\r\n              if (!err){\r\n                  contract.methods.getSkeletoonPropertiesBatch(result).call( async (err,result) => {\r\n                      for (let i = 0; i < result.length; i= i+3){\r\n                          let temp = {id: result[i], gene: result[i+1], str: result[i+2]}\r\n                          inventoryLoad.skeletoons = [...inventoryLoad.skeletoons, temp];\r\n                      }\r\n                    setInventory(inventoryLoad);\r\n                    fetchInventoryTrait(inventoryLoad)\r\n                  })\r\n              }\r\n          })\r\n      }\r\n\r\n      const fetchListedGlyph = (marketLeft, marketOld) => {\r\n        let glyphIds = marketLeft.filter(item => ((item[1] === aTWG)&& (item[6] === \"0\"))).map(item => item[2])\r\n        let glyphsMarketID = marketLeft.filter(item => ((item[1] === aTWG)&& (item[6] === \"0\") )).map(item => item[0])\r\n        let glyphsPrice = marketLeft.filter(item => ((item[1] === aTWG) && (item[6] === \"0\") )).map(item => item[5])\r\n                TWG.methods.getGlyphPropertiesBatch(glyphIds).call( async (err,result) => {\r\n                    if (!err){\r\n                    let market = marketOld\r\n                    for (let i = 0; i < result.length; i= i+3){\r\n                        let temp = {id: result[i], strength: result[i+1], appliesTo:result[i+2], marketId:glyphsMarketID[i/3], price: glyphsPrice[i/3] }\r\n                        market.glyphs = [...market.glyphs, temp];\r\n                    } \r\n                    setMarketItems(market)\r\n                }\r\n                })\r\n      }\r\n\r\n      const fetchListedTrait = (marketLeft, marketOld) => {\r\n        let traitIds = marketLeft.filter(item => ((item[1] === aTWT)&& (item[6] === \"0\"))).map(item => item[2])\r\n        let traitsMarketID = marketLeft.filter(item => ((item[1] === aTWT)&& (item[6] === \"0\") )).map(item => item[0])\r\n        let traitsPrice = marketLeft.filter(item => ((item[1] === aTWT) && (item[6] === \"0\") )).map(item => item[5])\r\n                TWT.methods.getTraitPropertiesBatch(traitIds).call( async (err,result) => {\r\n                    if (!err){\r\n                    let market = marketOld\r\n                    for (let i = 0; i < result.length; i= i+2){\r\n                        let temp = {id: result[i], typeId: result[i+1], marketId: traitsMarketID[i/2], price: traitsPrice[i/2]}\r\n                        market.traits = [...market.traits, temp];\r\n                    } \r\n                    setMarketItems(market)\r\n                    fetchListedGlyph(marketLeft, market)\r\n                }\r\n                })\r\n      }\r\n\r\n      const fetchListed = () => {\r\n          let market = {skeletoons: [], traits: [], glyphs: []}\r\n          cMarket.methods.fetchMarketItems().call(async (err,result) => {\r\n              if (!err){\r\n                \r\n                let marketItems = result\r\n\r\n                let skeletoonsMarket = marketItems.filter(item => ((item[1] === aTWSP) && (item[6] === \"0\"))).map(item => item[2])\r\n                let skeletoonsMarketID = marketItems.filter(item => ((item[1] === aTWSP) && (item[6] === \"0\") )).map(item => item[0])\r\n                let skeletoonsPrice = marketItems.filter(item => ((item[1] === aTWSP) && (item[6] === \"0\") )).map(item => item[5])\r\n                             \r\n                contract.methods.getSkeletoonPropertiesBatch(skeletoonsMarket).call( async (err,result) => {\r\n                    for (let i = 0; i < result.length; i= i+3){\r\n                        let temp = {id: result[i], gene: result[i+1], str: result[i+2], marketId: skeletoonsMarketID[i/3], price:skeletoonsPrice[i/3]}\r\n                        market.skeletoons = [...market.skeletoons, temp];\r\n                    }\r\n                  setMarketItems(market)\r\n                  fetchListedTrait(marketItems, market)\r\n                })\r\n              }\r\n          })\r\n      }\r\n\r\n      const fetchListingsGlyph = (marketLeft, marketOld) => {\r\n        let glyphIds = marketLeft.filter(item => ((item[1] === aTWG)&& (item[6] === \"0\") &&(item[3].toLowerCase() === prop.address))).map(item => item[2])\r\n        let glyphsMarketID = marketLeft.filter(item => ((item[1] === aTWG)&& (item[6] === \"0\") &&(item[3].toLowerCase() === prop.address))).map(item => item[0])\r\n        let glyphsPrice = marketLeft.filter(item => ((item[1] === aTWG) && (item[6] === \"0\") && (item[3].toLowerCase() === prop.address))).map(item => item[5])\r\n        TWG.methods.getGlyphPropertiesBatch(glyphIds).call( async (err,result) => {\r\n            if (!err){\r\n            let market = marketOld\r\n            for (let i = 0; i < result.length; i= i+3){\r\n                let temp = {id: result[i], strength: result[i+1], appliesTo:result[i+2], marketId:glyphsMarketID[i/3], price: glyphsPrice[i/3]}\r\n                market.glyphs = [...market.glyphs, temp];\r\n            } \r\n            setListings(market)\r\n        }\r\n        })\r\n        }\r\n\r\n        const fetchListingsTrait = (marketLeft, marketOld)  => {\r\n            let traitIds = marketLeft.filter(item => ((item[1] === aTWT)&& (item[6] === \"0\") &&(item[3].toLowerCase() === prop.address))).map(item => item[2])\r\n            let traitsMarketID = marketLeft.filter(item => ((item[1] === aTWT)&& (item[6] === \"0\") &&(item[3].toLowerCase() === prop.address))).map(item => item[0])\r\n            let traitsPrice = marketLeft.filter(item => ((item[1] === aTWT) && (item[6] === \"0\") && (item[3].toLowerCase() === prop.address))).map(item => item[5])\r\n                TWT.methods.getTraitPropertiesBatch(traitIds).call( async (err,result) => {\r\n                    if (!err){\r\n                    let market = marketOld\r\n                    for (let i = 0; i < result.length; i= i+2){\r\n                        let temp = {id: result[i], typeId: result[i+1], marketId: traitsMarketID[i/2], price:traitsPrice[i/2]}\r\n                        market.traits = [...market.traits, temp];\r\n                    } \r\n                    setListings(market)\r\n                    fetchListingsGlyph(marketLeft, market)\r\n                }\r\n                })\r\n        }\r\n\r\n        const fetchListings = () => {\r\n        let market = {skeletoons: [], traits: [], glyphs: []}\r\n        cMarket.methods.fetchMarketItems().call(async (err,result) => {\r\n            if (!err){\r\n                \r\n                let marketItems = result\r\n\r\n                let skeletoonsMarket = marketItems.filter(item => ((item[1] === aTWSP) && (item[6] === \"0\") && (item[3].toLowerCase() === prop.address))).map(item => item[2])\r\n                let skeletoonsMarketID = marketItems.filter(item => ((item[1] === aTWSP) && (item[6] === \"0\") && (item[3].toLowerCase() === prop.address))).map(item => item[0])\r\n                let skeletoonsPrice = marketItems.filter(item => ((item[1] === aTWSP) && (item[6] === \"0\") && (item[3].toLowerCase() === prop.address))).map(item => item[5])\r\n\r\n\r\n               \r\n                contract.methods.getSkeletoonPropertiesBatch(skeletoonsMarket).call( async (err,result) => {\r\n                    for (let i = 0; i < result.length; i= i+3){\r\n                        let temp = {id: result[i], gene: result[i+1], str: result[i+2], marketId: skeletoonsMarketID[i/3], price:skeletoonsPrice[i/3]}\r\n                        market.skeletoons = [...market.skeletoons, temp];\r\n                    }\r\n                setListings(market)\r\n                fetchListingsTrait(marketItems, market)\r\n                })\r\n            }\r\n        })\r\n        }\r\n\r\n        const padder = (input) => {\r\n            if (typeof input === \"string\")\r\n            {let padded = input\r\n                for (let i = 54 - padded.length; i >0 ; i--){\r\n                    padded = \"0\" + padded\r\n                }\r\n                return padded\r\n            } else {\r\n                return \r\n            }\r\n        }\r\n\r\n\r\n        function skeletoonFilterer(skele){\r\n            let passFail = 0;\r\n            for (let i = 0; i <18; i++){\r\n                let tempFilterGene = (filter.skeletoon[i].genes)\r\n                let tempFilterStr = (filter.skeletoon[i].strength)\r\n                let tempGene = parseInt(padder(skele.gene).substring(i*3,(i*3)+3))\r\n                let tempStr = parseInt(padder(skele.str).substring(i*3,(i*3)+3))\r\n\r\n                if (tempFilterGene === null) {\r\n                    passFail++;\r\n                } else \r\n                {\r\n                    tempFilterGene = parseInt(tempFilterGene)\r\n                    if (tempGene === tempFilterGene) {\r\n                    passFail++;\r\n                }}\r\n                if (tempFilterStr === null) {\r\n                    passFail++;\r\n                } else \r\n                {\r\n                    tempFilterStr = parseInt(tempFilterStr)\r\n                    if (tempStr >= tempFilterStr) {\r\n                    passFail++;\r\n                }}\r\n            }\r\n\r\n            return (passFail === 36)              \r\n          }\r\n        \r\n          const filterSkeletoonsDisplay = () => {\r\n            let itemTemp= {skeletoons: [], traits: [], glyphs: []};\r\n            let marketCopy = marketItems\r\n            let invCopy = inventory\r\n            let listedCopy = listings\r\n            if (selectedDisplay === \"Market\"){\r\n                itemTemp = marketCopy\r\n            }\r\n            if (selectedDisplay === \"Inventory\"){\r\n                itemTemp = invCopy\r\n            }\r\n            if (selectedDisplay === \"Listings\"){\r\n                itemTemp = listedCopy\r\n            }\r\n\r\n\r\n            let itemsFiltered = {skeletoons: [], traits: [], glyphs: []}\r\n            itemsFiltered.skeletoons = itemTemp.skeletoons.filter(skeletoon => skeletoonFilterer(skeletoon))\r\n\r\n\r\n            if (selectedDisplay === \"Market\"){\r\n                itemsFiltered.traits = marketCopy.traits\r\n                itemsFiltered.glyphs = marketCopy.glyphs\r\n            }\r\n            if (selectedDisplay === \"Inventory\"){\r\n                itemsFiltered.traits = invCopy.traits\r\n                itemsFiltered.glyphs = invCopy.glyphs\r\n            }\r\n            if (selectedDisplay === \"Listings\"){\r\n                itemsFiltered.traits = listedCopy.traits\r\n                itemsFiltered.glyphs = listedCopy.glyphs\r\n            }\r\n            setFiltered(itemsFiltered)\r\n        }\r\n\r\n\r\n    const selectDisplay = () => {\r\n        if (prop.address !== null) {\r\n            return (\r\n                <div id={\"SelectDisplayBtnGroup\"}>\r\n                    <button class={\"MarketBtn\"} id={selectedDisplay === \"Market\" ? \"MarketListingsSelected\" :\"MarketListings\"}onClick={() => {\r\n                    setSelectedDisplay(\"Market\")\r\n                    }}>{\"Market\"}\r\n                    </button>\r\n                    <button class={\"MarketBtn\"} id={selectedDisplay === \"Inventory\" ? \"MyInventorySelected\" : \"MyInventory\"} onClick={() => {\r\n                    setSelectedDisplay(\"Inventory\")\r\n                    }}>{\"Inventory\"}\r\n                    </button>\r\n                    <button class={\"MarketBtn\"} id={selectedDisplay === \"Listings\" ? \"MyListingsSelected\" : \"MyListings\"} onClick={() => {\r\n                    setSelectedDisplay(\"Listings\")\r\n                    }}>{\"My Listings\"}\r\n                    </button>\r\n                </div>\r\n            )\r\n        } else {\r\n            return (\r\n                <div id={\"SelectDisplayBtnGroup\"}>\r\n                    <button class={\"MarketBtn\"} id={\"MarketListings\"}onClick={() => {\r\n                    setSelectedDisplay(\"Inventory\")\r\n                    }}>{\"Inventory\"}\r\n                    </button>\r\n                </div>\r\n            ) \r\n        }\r\n        \r\n    }\r\n\r\n    const selectAddress = () => {\r\n        return (\r\n            <div id={\"SelectAddressBtnGroup\"}>\r\n                <button class={\"MarketBtn\"} id={\"Skeletoons\"} onClick={() => {\r\n                setSelectedAddress(\"Skeletoons\")\r\n                }}>{\"Skeletoons\"}\r\n                </button>\r\n                <button class={\"MarketBtn\"} id={\"Traits\"} onClick={() => {\r\n                setSelectedAddress(\"Traits\")\r\n                }}>{\"Traits\"}\r\n                </button>\r\n                <button class={\"MarketBtn\"} id={\"Glyphs\"} onClick={() => {\r\n                setSelectedAddress(\"Glyphs\")\r\n                }}>{\"Glyphs\"}\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    function getKeyByValue(object, value) {\r\n        return Object.keys(object).find(key => TraitMap[key][\"1\"][2].toLowerCase().includes(value));\r\n    }\r\n\r\n    const skeleFilterInput = (geneValue,strValue, position) => {\r\n        let filterFlag = false;\r\n        let filtertemp = filter\r\n        let positionfiltered\r\n        if (position > 8){\r\n            positionfiltered = parseInt(((position - 9)*2)+1)\r\n        }\r\n        if (position <=8) {\r\n            positionfiltered = parseInt(position*2)\r\n        }\r\n\r\n        if (strValue !== null & strValue <= 100 && strValue >= 0) {\r\n            filtertemp.skeletoon[positionfiltered].strength = strValue\r\n            filterFlag = true;\r\n            if (strValue === \"\"){\r\n                filtertemp.skeletoon[positionfiltered].strength = null; \r\n            }\r\n        }\r\n        if (geneValue !== null){\r\n            filtertemp.skeletoon[positionfiltered].genes = getKeyByValue(TraitMap, geneValue.toLowerCase())\r\n            if (geneValue === \"\") {\r\n                filterFlag = true;\r\n                filtertemp.skeletoon[positionfiltered].genes = null; \r\n            }\r\n        }\r\n        setFilter(filtertemp)\r\n        setFilterBool(1)\r\n        filterSkeletoonsDisplay()\r\n        \r\n    }\r\n\r\n    const listItems = geneIcons.map((gene, index) => (\r\n        <il class={\"GeneRow\"} id={\"Gene\" + (index)} key={gene}>\r\n          <img src={gene}></img>\r\n          <input class={\"TraitInput\"} type=\"text\" placeholder={\"Trait name\"} onChange={e => {skeleFilterInput(e.target.value, null, index)}}/>\r\n          <input class={\"StrengthInput\"} type=\"number\" placeholder={\"Strength\"} onChange={e => {skeleFilterInput(null ,e.target.value , index)}}/>\r\n          <br></br>\r\n          <br></br>\r\n        </il>\r\n      ));\r\n    \r\n\r\n    const skeletoonFilter = () => {\r\n\r\n        \r\n        return (\r\n          <div className={\"TraitFilter\"}>\r\n            {\"Search Skeletoon by trait values\"}\r\n            <ul>{listItems}</ul>\r\n          </div>\r\n        )\r\n    }\r\n\r\n    function traitFilterer(trait){\r\n        return (parseInt(trait.typeId) === parseInt(filter.trait.type))              \r\n      }\r\n    \r\n      const filterTraitsDisplay = () => {\r\n        let itemTemp= {skeletoons: [], traits: [], glyphs: []};\r\n        let marketCopy = marketItems\r\n        let invCopy = inventory\r\n        let listedCopy = listings\r\n        if (selectedDisplay === \"Market\"){\r\n            itemTemp = marketCopy\r\n        }\r\n        if (selectedDisplay === \"Inventory\"){\r\n            itemTemp = invCopy\r\n        }\r\n        if (selectedDisplay === \"Listings\"){\r\n            itemTemp = listedCopy\r\n        }\r\n\r\n        let itemsFiltered = {skeletoons: [], traits: [], glyphs: []}\r\n        itemsFiltered.traits = itemTemp.traits.filter(trait => traitFilterer(trait))\r\n\r\n        if (selectedDisplay === \"Market\"){\r\n            itemsFiltered.skeletoons = marketCopy.skeletoons\r\n            itemsFiltered.glyphs = marketCopy.glyphs\r\n        }\r\n        if (selectedDisplay === \"Inventory\"){\r\n            itemsFiltered.skeletoons = invCopy.skeletoons\r\n            itemsFiltered.glyphs = invCopy.glyphs\r\n        }\r\n        if (selectedDisplay === \"Listings\"){\r\n            itemsFiltered.skeletoons = listedCopy.skeletoons\r\n            itemsFiltered.glyphs = listedCopy.glyphs\r\n        }\r\n        setFiltered(itemsFiltered)\r\n    }\r\n\r\n\r\n\r\n    const traitFilterInput = (type) => {\r\n        let filterFlag = false;\r\n        let filtertemp = filter\r\n\r\n        if (type !== null) {\r\n            filtertemp.trait.type = getKeyByValue(TraitMap, type.toLowerCase())\r\n            if (type === \"\") {\r\n                filterFlag = true;\r\n                filtertemp.trait.type = null; \r\n            }\r\n        }\r\n        setFilter(filtertemp)\r\n        setFilterBool(1)\r\n        filterTraitsDisplay()\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    const traitFilter = () => {\r\n\r\n        return (\r\n            <div className={\"TraitFilter\"}>\r\n                {\"Search Trait by type or applied position\"}\r\n                <br>\r\n                </br>\r\n                <input class={\"TraitInput\"} type=\"text\" placeholder={\"Trait name\"} onChange={e => {traitFilterInput(e.target.value)}}/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    function getKeyByValueGlyph (value) {\r\n        let obj = {_512: \"background\", _256: \"pet\", _128: \"body\", _64:\"mouth\", _32: \"head\", _16: \"eyes\", _8: \"hat\" , _4:\"item\", _2 : \"cape\"}\r\n        return Object.keys(obj).find(key => obj[key].includes(value));\r\n    }\r\n\r\n    function glyphFilterer(glyph){\r\n        let filterPass = 0;\r\n        if (filter.glyph.strength === null){\r\n            filterPass++\r\n        } else {\r\n            if (parseInt(filter.glyph.strength) <= parseInt(glyph.strength)){\r\n                filterPass++\r\n            }\r\n        }\r\n        if (filter.glyph.applies === null){\r\n            filterPass++\r\n        } else {\r\n            if ( (parseInt(Math.floor(glyph.appliesTo/filter.glyph.applies)%2) ) === 1 ) {\r\n                filterPass++\r\n            }\r\n\r\n        }\r\n        return (filterPass === 2)              \r\n      }\r\n    \r\n      const filterGlyphsDisplay = () => {\r\n        let itemTemp= {skeletoons: [], traits: [], glyphs: []};\r\n        let marketCopy = marketItems\r\n        let invCopy = inventory\r\n        let listedCopy = listings\r\n        if (selectedDisplay === \"Market\"){\r\n            itemTemp = marketCopy\r\n        }\r\n        if (selectedDisplay === \"Inventory\"){\r\n            itemTemp = invCopy\r\n        }\r\n        if (selectedDisplay === \"Listings\"){\r\n            itemTemp = listedCopy\r\n        }\r\n        let itemsFiltered = {skeletoons: [], traits: [], glyphs: []}\r\n        itemsFiltered.glyphs = itemTemp.glyphs.filter(glyph => glyphFilterer(glyph))\r\n        if (selectedDisplay === \"Market\"){\r\n            itemsFiltered.skeletoons = marketCopy.skeletoons\r\n            itemsFiltered.traits = marketCopy.traits\r\n        }\r\n        if (selectedDisplay === \"Inventory\"){\r\n            itemsFiltered.skeletoons = invCopy.skeletoons\r\n            itemsFiltered.traits = invCopy.traits\r\n        }\r\n        if (selectedDisplay === \"Listings\"){\r\n            itemsFiltered.skeletoons = listedCopy.skeletoons\r\n            itemsFiltered.traits = listedCopy.traits\r\n        }\r\n        setFiltered(itemsFiltered)\r\n    }\r\n\r\n    const glyphFilterInput = (str, appliesTo) => {\r\n        let filterFlag = false;\r\n        let filtertemp = filter\r\n        if (str !== null) {\r\n            filtertemp.glyph.strength = str\r\n            if (str === \"\") {\r\n                filterFlag = true;\r\n                filtertemp.glyph.strength = null; \r\n            }\r\n        }\r\n        if (appliesTo !== null) {\r\n            let tempHelper = getKeyByValueGlyph(appliesTo.toLowerCase())\r\n            if (typeof tempHelper === \"string\" && tempHelper.length >1)\r\n            {\r\n                filtertemp.glyph.applies = tempHelper.substring(1)\r\n            }\r\n            if (appliesTo === \"\") {\r\n                filterFlag = true;\r\n                filtertemp.glyph.applies = null; \r\n            }\r\n        }\r\n        setFilter(filtertemp)\r\n        setFilterBool(1)\r\n        filterGlyphsDisplay()\r\n    }\r\n\r\n    const glyphFilter = () => {\r\n        return (\r\n            <div className={\"TraitFilter\"}>\r\n                {\"Search Glyph by strength or applied position\"}\r\n                <br>\r\n                </br>\r\n                <input class={\"TraitInput\"} type=\"number\" placeholder={\"Glyph Strength min.\"} onChange={e => {glyphFilterInput(e.target.value, null)}}/>\r\n                <br></br>\r\n                <br></br>\r\n                <input class={\"TraitInput\"} type=\"text\" placeholder={\"Glyph Applied position\"} onChange={e => {glyphFilterInput(null, e.target.value)}}/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const clearFilter = () => {\r\n        setFilter({base: null, skeletoon: {\r\n            0 : {genes: null, strength:null},\r\n            1 : {genes: null, strength:null},\r\n            2 : {genes: null, strength:null},\r\n            3 : {genes: null, strength:null},\r\n            4 : {genes: null, strength:null},\r\n            5 : {genes: null, strength:null},\r\n            6 : {genes: null, strength:null},\r\n            7 : {genes: null, strength:null},\r\n            8 : {genes: null, strength:null},\r\n            9 : {genes: null, strength:null},\r\n            10 : {genes: null, strength:null},\r\n            11 : {genes: null, strength:null},\r\n            12 : {genes: null, strength:null},\r\n            13 : {genes: null, strength:null},\r\n            14 : {genes: null, strength:null},\r\n            15 : {genes: null, strength:null},\r\n            16 : {genes: null, strength:null},\r\n            17 : {genes: null, strength:null}\r\n        }, trait: {type:null, applies:null}, glyph:{strength:null, applies:null}})\r\n        setFilterBool(0);\r\n        filterSkeletoonsDisplay()\r\n    }\r\n\r\n\r\n    const baseFilter = () => {\r\n        let filtertemp = filter\r\n        return (\r\n        <>\r\n\r\n        <button class={\"FilterBtn\"} id={\"Clear\"} onClick={() => {\r\n                clearFilter()\r\n                }}>\r\n        {\"Clear Filters\"}\r\n        </button>\r\n        </>\r\n        )\r\n    }\r\n\r\n    const selectFilter = () => {\r\n        return (\r\n            <div id={\"Filters\"}>\r\n                {baseFilter()}\r\n                {(selectedAddress == \"All\" || selectedAddress == \"Skeletoons\")? skeletoonFilter() : \"\"}\r\n                {(selectedAddress == \"All\" || selectedAddress == \"Traits\")? traitFilter() : \"\"}\r\n                {(selectedAddress == \"All\" || selectedAddress == \"Glyphs\")? glyphFilter() : \"\"}            \r\n            </div>\r\n        )\r\n    }\r\n\r\n    const openCard = (NFType, tokenId, index, marketId) => {\r\n        let displayArr\r\n        if (filterBool == 1){\r\n            displayArr = filtered\r\n        } else {\r\n            if (selectedDisplay === \"Listings\")\r\n            {\r\n                displayArr = listings\r\n            } else if (selectedDisplay === \"Inventory\") {\r\n                displayArr = inventory\r\n            } else if (selectedDisplay === \"Market\") {\r\n                displayArr = marketItems\r\n            }\r\n        }\r\n        setCardOpen(1);\r\n        let card = {NFTtype: null, tokenID: null, properties: []}\r\n        card.NFTtype = NFType\r\n        card.tokenID = tokenId\r\n        card.marketID = marketId\r\n        if (NFType === \"Skeletoon\"){\r\n            let properties ={gene: null, str:null}\r\n            properties.gene = displayArr.skeletoons[(index  + (14*page))].gene\r\n            properties.str = displayArr.skeletoons[(index  + (14*page))].str\r\n            card.properties = properties\r\n        }\r\n        if (NFType === \"Trait\"){\r\n            let properties ={type: null}\r\n            properties.type = displayArr.traits[(index  + (14*page))].typeId\r\n            card.properties = properties\r\n        }\r\n        if (NFType === \"Glyph\"){\r\n            let properties ={applies: null ,str: null}\r\n            properties.applies = displayArr.glyphs[(index  + (14*page))].appliesTo\r\n            properties.str = displayArr.glyphs[(index  + (14*page))].strength\r\n            card.properties = properties\r\n        }\r\n        setCardItem(card);\r\n\r\n    }\r\n\r\n    const createCard = () => {\r\n        return (\r\n            <div id=\"CardOverlay\">\r\n                <button class= {\"MarketBtn\"} id={\"closeCard\"} onClick={() => {\r\n                    setCardOpen(0);\r\n                }}>{\"X\"}</button>\r\n                <NFTcard card={cardItem} address={prop.address} chain={prop.chain}></NFTcard>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const cardsDisplay = () => {\r\n        let pagedNFT \r\n        let length\r\n        let displayArr\r\n        if (filterBool == 1){\r\n            displayArr = filtered\r\n        } else {\r\n            displayArr = marketItems\r\n        }\r\n        if (selectedAddress === \"Skeletoons\")\r\n        {pagedNFT =  displayArr.skeletoons.slice(page*14, (page*14)+14)\r\n            var renderedOutput = pagedNFT.map((item, index) => <div className={\"card\"} onClick={() => {openCard(\"Skeletoon\", item.id, index, item.marketId)}}>\r\n            <img src={parseInt(item.id) <= 10000 ? gen1Placeholder : gen2Placeholder }></img>\r\n             {\"Token Id: \" + item.id}\r\n             <br></br> \r\n             {item.price !== null  && item.price !== undefined ? \"Price: \" + web3.utils.fromWei(item.price) + \" FTM\" : \"Error Requesting price\"}\r\n             </div>)\r\n             length = displayArr.skeletoons.length\r\n        }\r\n        if (selectedAddress === \"Traits\")\r\n        {pagedNFT =  displayArr.traits.slice(page*14, (page*14)+14)\r\n            var renderedOutput = pagedNFT.map((item, index )=> <div className={\"card\"} onClick={() => {openCard(\"Trait\", item.id, index, item.marketId)}}>\r\n            <img src={(traitInv + \"/\"+item.typeId + \".png\")}></img>\r\n             {\"Token Id: \" + item.id}\r\n             <br></br> \r\n             {item.price !== null  && item.price !== undefined ? \"Price: \" + web3.utils.fromWei(item.price) + \" FTM\" : \"Error Requesting price\"}\r\n             </div>)\r\n             length = displayArr.traits.length\r\n        }\r\n        if (selectedAddress === \"Glyphs\")\r\n        {pagedNFT =  displayArr.glyphs.slice(page*14, (page*14)+14)\r\n            var renderedOutput = pagedNFT.map((item, index) => <div className={\"card\"} onClick={() => {openCard(\"Glyph\", item.id, index, item.marketId)}}>\r\n            <img src={glyphInv + \"/\" + item.appliesTo + \".png\"}></img>\r\n             {\"Token Id: \" + item.id}\r\n             <br></br> \r\n             {item.price !== null  && item.price !== undefined ? \"Price: \" + web3.utils.fromWei(item.price) + \" FTM\" : \"Error Requesting price\"}\r\n             </div>)\r\n             length = displayArr.glyphs.length\r\n        }\r\n\r\n        //add cost into card bellow name\r\n        \r\n        return (\r\n            <div id={\"CardsDisplay\"}>\r\n                <div id={\"PageNav\"}>\r\n                    <button id={\"PrevPage\"} onClick={() => {\r\n                if (page > 0)\r\n                {setPage(page-1)}\r\n                }}>{\"<\"}</button>\r\n                    {\"  \" + ((page*15)) + \"...\" + ((page*15)+14) + \"  \"}\r\n                    <button id={\"NextPage\"} onClick={() => {\r\n                if (page*15 < length)\r\n                setPage(page+1)\r\n                }}>{\">\"}</button>\r\n                </div>\r\n                {renderedOutput}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const cardsInventory = () => {\r\n        let pagedNFT \r\n        let length\r\n        let displayArr\r\n        if (filterBool == 1){\r\n            displayArr = filtered\r\n        } else {\r\n            displayArr = inventory\r\n        }\r\n        if (selectedAddress === \"Skeletoons\")\r\n        {pagedNFT =  displayArr.skeletoons.slice(page*14, (page*14)+14)\r\n            var renderedOutput = pagedNFT.map((item, index) => <div className={\"card\"} onClick={() => {openCard(\"Skeletoon\", item.id, index, null)}}>\r\n            <img src={parseInt(item.id) <= 10000 ? gen1Placeholder : gen2Placeholder }></img>\r\n            {\"Token Id: \" + item.id}\r\n             </div>)\r\n             length = displayArr.skeletoons.length\r\n        }\r\n        if (selectedAddress === \"Traits\")\r\n        {pagedNFT =  displayArr.traits.slice(page*14, (page*14)+14)\r\n            var renderedOutput = pagedNFT.map((item, index )=> <div className={\"card\"} onClick={() => {openCard(\"Trait\", item.id, index, null)}}>\r\n            <img src={(traitInv + \"/\"+item.typeId + \".png\")}></img>\r\n            {\"Token Id: \" + item.id} \r\n             </div>)\r\n             length = displayArr.traits.length\r\n        }\r\n        if (selectedAddress === \"Glyphs\")\r\n        {pagedNFT =  displayArr.glyphs.slice(page*14, (page*14)+14)\r\n            var renderedOutput = pagedNFT.map((item, index) => <div className={\"card\"} onClick={() => {openCard(\"Glyph\", item.id, index, null)}}>\r\n            <img src={glyphInv + \"/\" + item.appliesTo + \".png\"}></img>\r\n            {\"Token Id: \" + item.id}\r\n             </div>)\r\n             length = displayArr.glyphs.length\r\n        }\r\n\r\n        //add cost into card bellow name\r\n        \r\n        return (\r\n            <div id={\"CardsDisplay\"}>\r\n                <div id={\"PageNav\"}>\r\n                    <button id={\"PrevPage\"} onClick={() => {\r\n                if (page > 0)\r\n                {setPage(page-1)}\r\n                }}>{\"<\"}</button>\r\n                    {\"  \" + ((page*15)) + \"...\" + ((page*15)+14) + \"  \"}\r\n                    <button id={\"NextPage\"} onClick={() => {\r\n                if (page*15 < length)\r\n                setPage(page+1)\r\n                }}>{\">\"}</button>\r\n                </div>\r\n                {renderedOutput}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const cardsListings = () => {\r\n        let pagedNFT \r\n        let length\r\n        let displayArr\r\n        if (filterBool == 1){\r\n            displayArr = filtered\r\n        } else {\r\n            displayArr = listings\r\n        }\r\n        if (selectedAddress === \"Skeletoons\")\r\n        {pagedNFT =  displayArr.skeletoons.slice(page*14, (page*14)+14)\r\n            var renderedOutput = pagedNFT.map((item, index) => <div className={\"card\"} onClick={() => {openCard(\"Skeletoon\", item.id, index, item.marketId)}}>\r\n            <img src={parseInt(item.id) <= 10000 ? gen1Placeholder : gen2Placeholder }></img>\r\n            {\"Token Id: \" + item.id}\r\n             <br></br> \r\n             {item.price !== null  && item.price !== undefined ? \"Price: \" + web3.utils.fromWei(item.price) + \" FTM\" : \"Error Requesting price\"}\r\n             </div>)\r\n             length = displayArr.skeletoons.length\r\n        }\r\n        if (selectedAddress === \"Traits\")\r\n        {pagedNFT =  displayArr.traits.slice(page*14, (page*14)+14)\r\n            var renderedOutput = pagedNFT.map((item, index )=> <div className={\"card\"} onClick={() => {openCard(\"Trait\", item.id, index, item.marketId)}}>\r\n            <img src={(traitInv + \"/\"+item.typeId + \".png\")}></img>\r\n            {\"Token Id: \" + item.id}\r\n             <br></br> \r\n             {item.price !== null  && item.price !== undefined ? \"Price: \" + web3.utils.fromWei(item.price) + \" FTM\" : \"Error Requesting price\"}\r\n             </div>)\r\n             length = displayArr.traits.length\r\n        }\r\n        if (selectedAddress === \"Glyphs\")\r\n        {pagedNFT =  displayArr.glyphs.slice(page*14, (page*14)+14)\r\n            var renderedOutput = pagedNFT.map((item, index) => <div className={\"card\"} onClick={() => {openCard(\"Glyph\", item.id, index, item.marketId)}}>\r\n            <img src={glyphInv + \"/\" + item.appliesTo + \".png\"}></img>\r\n            {\"Token Id: \" + item.id}\r\n             <br></br> \r\n             {item.price !== null  && item.price !== undefined ? \"Price: \" + web3.utils.fromWei(item.price) + \" FTM\" : \"Error Requesting price\"}\r\n             </div>)\r\n             length = displayArr.glyphs.length\r\n        }\r\n\r\n        //add cost into card bellow name\r\n        \r\n        return (\r\n            <div id={\"CardsDisplay\"}>\r\n                <div id={\"PageNav\"}>\r\n                    <button id={\"PrevPage\"} onClick={() => {\r\n                if (page > 0)\r\n                {setPage(page-1)}\r\n                }}>{\"<\"}</button>\r\n                    {\"  \" + ((page*15)) + \"...\" + ((page*15)+14) + \"  \"}\r\n                    <button id={\"NextPage\"} onClick={() => {\r\n                if (page*15 < length)\r\n                setPage(page+1)\r\n                }}>{\">\"}</button>\r\n                </div>\r\n                {renderedOutput}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    \r\n    useEffect(() => {\r\n        fetchListings()\r\n        fetchListed()\r\n        if (prop.address !== null) {\r\n            fetchInventory()    \r\n        }\r\n    },[constructor, prop.address])\r\n\r\n    \r\n\r\n  return (\r\n    <div id={\"SelectDisplay\"}>\r\n        {cardOpen ? createCard() : \"\"}\r\n        {selectDisplay()}\r\n        {selectAddress()}\r\n        {selectFilter()}\r\n        {(selectedDisplay === \"Listings\")? cardsListings():\"\"}\r\n        {(selectedDisplay === \"Inventory\") ? cardsInventory():\"\"}\r\n        {(selectedDisplay === \"Market\") ? cardsDisplay():\"\"}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Market","import React from 'react'\r\nimport { useEffect, useState } from \"react\";\r\nimport \"../../styles/Wars.css\";\r\nimport TraitMap from \"../helpers/TraitMap.json\"\r\nimport { aTWG, aTWMarket, aTWSP, aTWT, cTWG, cTWMarket, cTWSP, cTWT, aTWWarsTest, cTWWars, aTWRewardsv2Test, cTWRewards } from '../helpers/Groups';\r\nimport { fetchMetadata } from '../../scripts/Helper';\r\nimport Web3 from \"web3\";\r\nimport { drawSingleCanvas, drawSkeletoonFull } from '../helpers/Renderer';\r\nimport { button_default, icon_minus, icon_plus, TWWDevil, TWWZombie, TWWSkelly, gen1Placeholder, TWWBackgrounds, TWWarsUI } from '../../data/canvassrc';\r\n\r\n\r\nconst Wars = (prop) => {\r\n  const [rendered, setRenderer] = useState(null)\r\n  const [walletFraction, setWalletFraction] = useState(null);\r\n  const [walletPoints, setWalletPoints] = useState(null)\r\n  const [pfp, setpfp] = useState({token: null, gene:null, str:null})\r\n  const [walletsParticipating, setWalletsParticipating] = useState(null);\r\n  const [skeletoonsInWallet, setSkeletoonsInWallet] = useState([]);\r\n  const [skeletoonSelected, setSkeletoonSelected] = useState(null);\r\n  const [usedPoints, setUsedPoints] = useState(\"0\");\r\n  const [usedAttackPoints, setUsedAttackPoints] = useState(\"0\");\r\n  const [cardOpen, setCardOpen] = useState(null);\r\n  const [fractionCardOpen, setFractionCardOpen] = useState(null);\r\n  const [totalPointsUsable, setTotalPointsUsable] = useState(null);\r\n  const [attackPointsUSable, setAttackPointsUsable] = useState(null);\r\n  const [fractionPointsTotal, setFractionPointsTotal] = useState([0,0,0]);\r\n\r\n\r\n  const fractionLogos = [TWWSkelly, TWWZombie, TWWDevil]\r\n  const web3 = new Web3(Web3.givenProvider);\r\n  let cWars = cTWWars;\r\n  let aTWWars = aTWWarsTest;\r\n  let aTWReward = aTWRewardsv2Test;\r\n  let cTWReward = cTWRewards;\r\n  let cTWSKP = cTWSP;\r\n\r\n  const displaySkeletoon = () => {\r\n      cTWSKP.methods.getSkeletoonProperties(skeletoonSelected).call(async (err,result) => {\r\n        if (!err){\r\n          let gene = result[1]\r\n          let str = result[2]\r\n          for (let i = 54 - gene.length; i >0 ; i--){\r\n            gene = \"0\" + gene\r\n          }\r\n          for (let i = 54 - str.length; i >0 ; i--){\r\n            str = \"0\" + str\r\n          }\r\n\r\n          drawSkeletoonFull(gene, str, 'skeletoon_pfp_canvas', 0, 2, 250)\r\n        }\r\n      })\r\n  }\r\n\r\n  const fortifyPoints = () => {\r\n      return(\r\n        <div id={\"PointControler\"}>\r\n            <div class=\"button-wrapper\" id={\"buttonMinus\"} onClick={() => {\r\n              if (usedPoints > 0) {\r\n                setUsedPoints((parseInt(usedPoints)-1).toString())\r\n              }\r\n            }}>\r\n            <button><img src={icon_minus} alt=\"my image\" /></button>\r\n            </div>\r\n            <input id={\"PointInput\"} type=\"number\" value={usedPoints} onChange={e => {parseInt(e.target.value) <= parseInt(totalPointsUsable) ? setUsedPoints(e.target.value) : setUsedPoints(totalPointsUsable)}}/>\r\n            <div class=\"button-wrapper\" id={\"buttonPlus\"} onClick={() => {\r\n              if (parseInt(usedPoints) < parseInt(totalPointsUsable))\r\n                setUsedPoints((parseInt(usedPoints)+1).toString())\r\n\r\n            }}>\r\n            <button><img src={icon_plus} alt=\"my image\" /></button>\r\n            </div>\r\n        </div>\r\n      )\r\n  }\r\n\r\n  const displayList = () => {\r\n    let tokens = skeletoonsInWallet\r\n    const listTokens = tokens.map((obj, index) => (\r\n      <il class={\"TokenRow\"} id={\"Token\" + index} key={obj}>\r\n        <div class={\"TokenDiv\"} onClick={() => {setSkeletoonSelected(obj)}}>\r\n          {\"Skeletoon ID: \" + obj}\r\n        </div>\r\n        <br></br>\r\n      </il>\r\n    ));\r\n    return (\r\n      <ul id={\"MyWalletTokens\"}>{listTokens}</ul>\r\n    )\r\n  }\r\n\r\n  const displayNavigation = () => {\r\n    return (\r\n      <>\r\n      <div class={\"navDiv\"} id={\"pNavDiv\"} onClick={() => {skeletoonSelected !== skeletoonsInWallet[0] ? setSkeletoonSelected(skeletoonsInWallet[(skeletoonsInWallet.indexOf(skeletoonSelected)-1)]): setSkeletoonSelected(skeletoonsInWallet[(skeletoonsInWallet.length-1)])}}>{\"<\"}</div>\r\n      <div class={\"navDiv\"} id={\"nNavDiv\"} onClick={() => {skeletoonSelected !== skeletoonsInWallet[(skeletoonsInWallet.length -1)]? setSkeletoonSelected(skeletoonsInWallet[(skeletoonsInWallet.indexOf(skeletoonSelected)+1)]) : setSkeletoonSelected(skeletoonsInWallet[0])}}>{\">\"}</div>\r\n      </>\r\n    )\r\n  }\r\n\r\n  const changeFractionTX = async (fractionNr) => {\r\n    let txData = cWars.methods.changeFraction(fractionNr).encodeABI();\r\n    web3.eth.sendTransaction(\r\n      {\r\n        from: prop.address,\r\n        to: aTWWars,\r\n        data: txData,\r\n        gas : await cWars.methods.changeFraction(fractionNr).estimateGas({from: prop.address}),\r\n        gasPrice: await web3.eth.getGasPrice()\r\n      }).on('receipt', function(receipt) {\r\n        cWars.methods.getWalletProperties(prop.address).call(async (err,result) => {\r\n          if (!err){\r\n              setWalletFraction(result[0]);\r\n          }\r\n      })\r\n      });\r\n  }\r\n\r\n  const changeFraction = () => {\r\n    return(\r\n      <>\r\n      {\"Select your fraction\"}\r\n      <br></br>\r\n      <img src={TWWSkelly} class={\"FractionLogo\"} onClick={() => {changeFractionTX(1)}}></img>\r\n      <img src={TWWZombie} class={\"FractionLogo\"} onClick={() => {changeFractionTX(2)}}></img>\r\n      <img src={TWWDevil} class={\"FractionLogo\"} onClick={() => {changeFractionTX(3)}}></img>\r\n      </>\r\n    )\r\n  }\r\n\r\n  const sendTxFortify = async () => {\r\n    let txData = cWars.methods.fortifyPoints(skeletoonSelected, usedPoints).encodeABI();\r\n      web3.eth.sendTransaction(\r\n        {\r\n          from: prop.address,\r\n          to: aTWWars,\r\n          data: txData,\r\n          gas : await cWars.methods.fortifyPoints(skeletoonSelected, usedPoints).estimateGas({from: prop.address}),\r\n          gasPrice: await web3.eth.getGasPrice()\r\n        }).on('receipt', function(receipt) {\r\n              setRenderer(!rendered);\r\n        });\r\n  }\r\n\r\n  const displayController = () => {\r\n    return (\r\n      <>\r\n      <div id={\"SelectedSkeletoonDisplay\"}><canvas id=\"skeletoon_pfp_canvas\" width=\"2000\" height=\"2000\"></canvas></div>\r\n      {( walletFraction !== \"0\" && walletFraction !== null) ?\r\n      <>\r\n      <div id={\"FortifyPoints\"}>\r\n        {walletFraction !== null ? \r\n        <img class={\"FractionLogo\"} src={fractionLogos[walletFraction-1]} onClick={() => {setFractionCardOpen(1)}}></img>: \"\"}\r\n        <br></br>\r\n        {\"Your current points: \" + walletPoints}\r\n        <br></br>{\"Available points to use: \" + totalPointsUsable}\r\n      <br></br>{\"Add points to fortify: \"}{fortifyPoints()}\r\n      <div class=\"btn-group\">\r\n        <div class=\"button-wrapper\" id={\"fortifyButton\"} onClick={() => {sendTxFortify()}}>\r\n        <button><img src={button_default} alt=\"my image\" /></button>\r\n        <div class={\"button_text\"}>{\"Fortify\"}</div>\r\n        </div>  \r\n        </div> \r\n      </div>\r\n      <div id={\"Navigate\"}>{skeletoonsInWallet.length > 1? displayNavigation(): \"\"}</div>\r\n      <div id={\"List\"}>{skeletoonsInWallet.length > 1? displayList(): \"\"}</div>\r\n      </>\r\n      :\r\n      <div id={\"ChangeFraction\"}>{skeletoonsInWallet.length > 0? changeFraction(): \"\"}</div>}\r\n      \r\n      </>\r\n    )\r\n  }\r\n\r\n  const displayFraction = (fractionNr) => {\r\n    let fraction = walletsParticipating.filter(item => (item.fraction == fractionNr)).sort((a, b) => \r\n     parseInt(a.points) - parseInt(b.points)\r\n    ).reverse();\r\n    const listAdresses = fraction.map((obj, index) => (\r\n      <il class={\"FractionRow\"} id={\"Profile\" + index} key={obj}>\r\n        <div class={\"FractionDiv\"} onClick={() => {setCardOpen(obj)}}>\r\n          {obj.address.substring(0,8) + \"...\" +obj.address.substring(obj.address.length-3,obj.address.length)  + \" Points: \" + obj.points}\r\n        </div>\r\n        <br></br>\r\n      </il>\r\n    ));\r\n    return (\r\n      <>\r\n      <img src={fractionLogos[fractionNr-1]} class={\"FractionLogo\"}></img>\r\n      <br></br>\r\n      {\"Total Points: \" + fractionPointsTotal[fractionNr-1]}\r\n      <ul>{listAdresses}</ul>\r\n      </>\r\n    )\r\n    \r\n  }\r\n\r\n  const renderDisplay = () => {\r\n    return (\r\n    <>\r\n    <div id=\"Controler\">{prop.address !== null? displayController() : \"\"}</div>\r\n    <div class=\"Fraction\" id=\"SFraction\">{walletsParticipating !== null ? displayFraction(1): \"\"}</div>\r\n    <div class=\"Fraction\" id=\"ZFraction\">{walletsParticipating !== null ? displayFraction(2): \"\"}</div>\r\n    <div class=\"Fraction\" id=\"DFraction\">{walletsParticipating !== null ? displayFraction(3): \"\"}</div>\r\n    </>\r\n    )\r\n  }\r\n\r\n  const attackPoints = (maxPoints) => {\r\n    console.log(maxPoints)\r\n    return(\r\n      <div id={\"ATKPointControler\"}>\r\n          <div class=\"button-wrapper\" id={\"buttonMinus\"} onClick={() => {\r\n            if (usedAttackPoints > 0) {\r\n              setUsedAttackPoints((parseInt(usedAttackPoints)-1).toString())\r\n            }\r\n          }}>\r\n          <button><img src={icon_minus} alt=\"my image\" /></button>\r\n          </div>\r\n          <input id={\"PointInput\"} type=\"number\" value={usedAttackPoints} onChange={e => {parseInt(e.target.value) <= parseInt(maxPoints) ? setUsedAttackPoints(e.target.value) : setUsedAttackPoints(maxPoints)}}/>\r\n          <div class=\"button-wrapper\" id={\"buttonPlus\"} onClick={() => {\r\n            if (parseInt(usedAttackPoints) < parseInt(maxPoints))\r\n            setUsedAttackPoints((parseInt(usedAttackPoints)+1).toString())\r\n\r\n          }}>\r\n          <button><img src={icon_plus} alt=\"my image\" /></button>\r\n          </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const attackTx = async (attacked_address) => {\r\n    let txData = cWars.methods.attackPoints(skeletoonSelected, usedAttackPoints, attacked_address).encodeABI();\r\n    web3.eth.sendTransaction(\r\n      {\r\n        from: prop.address,\r\n        to: aTWWars,\r\n        data: txData,\r\n        gas : await cWars.methods.attackPoints(skeletoonSelected, usedAttackPoints, attacked_address).estimateGas({from: prop.address}),\r\n        gasPrice: await web3.eth.getGasPrice()\r\n      }).on('receipt', function(receipt) {\r\n        setRenderer(!rendered);\r\n      });\r\n    \r\n  }\r\n\r\n  const createCard = (attacked) => {\r\n    let maxPoints\r\n    console.log(attackPointsUSable)\r\n    console.log(attacked.points)\r\n    if (parseInt(attackPointsUSable) <= parseInt(attacked.points)) {\r\n      maxPoints = attackPointsUSable\r\n    } else {\r\n      maxPoints = attacked.points\r\n    }\r\n    return (\r\n        <div id=\"CardOverlay\">\r\n            <button class= {\"MarketBtn\"} id={\"closeCard\"} onClick={() => {\r\n                setCardOpen(null);\r\n            }}>{\"X\"}</button>\r\n            <div id={\"ExtraControls\"}>\r\n            <canvas id=\"attacked_canvas\" width=\"2000\" height=\"2000\"></canvas>\r\n            <div id={\"AttackControls\"}>\r\n            {walletFraction !== null ? \"\": \"You need to log in to participate in ToonWorld Wars\"}\r\n            {walletFraction === \"0\" ? \"You need to select fraction to participate in ToonWorld Wars\" : \"\"}\r\n            {walletFraction === attacked.fraction ? \"You can't attack someone from your own fraction\" : <>\r\n            <div id={\"AttackedInfo\"}>\r\n              {\"This can attack for maximum of \" + attacked.points + \" points\" }\r\n              {walletFraction !== null && walletFraction !== \"0\" ? <><br></br>\r\n              <>{\"You have \" + attackPointsUSable + \" points for attacking\"}</>\r\n              <br></br>\r\n              <>{attackPoints(maxPoints)}</>\r\n              <br></br>\r\n              <div id={\"AttackBtnControls\"} onClick={() => {attackTx(attacked.address)}}>{\"Attack\"}</div> </>: \"\"}\r\n            </div>\r\n            </>}\r\n            </div>\r\n          </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst sendPFPtx = async () => {\r\n  let txData = cWars.methods.setProfilePicture(skeletoonSelected).encodeABI();\r\n  web3.eth.sendTransaction(\r\n    {\r\n      from: prop.address,\r\n      to: aTWWars,\r\n      data: txData,\r\n      gas : await cWars.methods.setProfilePicture(skeletoonSelected).estimateGas({from: prop.address}),\r\n      gasPrice: await web3.eth.getGasPrice()\r\n    }).on('receipt', function(receipt) {\r\n      setRenderer(!rendered);\r\n    });\r\n}\r\n\r\nconst createFractionCard = () => {\r\n  return (\r\n      <div id=\"CardOverlay\">\r\n          <button class= {\"MarketBtn\"} id={\"closeCard\"} onClick={() => {\r\n              setFractionCardOpen(null);\r\n          }}>{\"X\"}</button>\r\n          <div id={\"ExtraControls\"}>\r\n            <canvas id=\"pfp_canvas\" width=\"2000\" height=\"2000\"></canvas>\r\n            <div id={\"PFPControls\"} onClick={() => {sendPFPtx()}}>{\"Set as your wallet profile picture\"}</div>\r\n            <div id={\"FractionControls\"}>\r\n            {\"Change Fraction:\"}\r\n            <br></br>\r\n            {walletFraction=== \"1\"? \"\":<img src={TWWSkelly} class={\"FractionLogo\"} onClick={() => {changeFractionTX(1)}}></img>}\r\n            {walletFraction=== \"2\"? \"\":<img src={TWWZombie} class={\"FractionLogo\"} onClick={() => {changeFractionTX(2)}}></img>}\r\n            {walletFraction=== \"3\"? \"\":<img src={TWWDevil} class={\"FractionLogo\"} onClick={() => {changeFractionTX(3)}}></img>}\r\n            <br></br>\r\n            {\"Changing Fraction resets your points to 0 and subtracts your point total from fraction points\"}\r\n            </div>\r\n          </div>\r\n      </div>\r\n  )\r\n}\r\n\r\n  useEffect(() => {\r\n    if (prop.address !== null)\r\n    cWars.methods.getWalletProperties(prop.address).call(async (err,result) => {\r\n      if (!err){\r\n          setWalletFraction(result[0]);\r\n          setWalletPoints(result[1]);\r\n          cWars.methods.getProfilePicture(prop.address).call(async (err,result) => {\r\n            if (!err){\r\n              let temp = {token: result[0], gene:result[1], str:result[2]}\r\n              setpfp(temp);\r\n              cTWSKP.methods.walletOfOwner(prop.address).call(async (err,result) => {\r\n                if (!err){\r\n                  setSkeletoonsInWallet(result);\r\n                  setSkeletoonSelected(result[0])\r\n                }\r\n              })\r\n            }\r\n          })\r\n      }\r\n  })  \r\n\r\n  cWars.methods.walletsInGame().call(async (err, result)=> {\r\n    if (!err){\r\n      cWars.methods.getBatchWalletProperties(result,0).call(async (err, result) => {\r\n        let inGameWalletsFull = [];\r\n        for (let i = 0; i< result.length; i++) {\r\n          let tempWalletProp = {address: result[i][0], fraction: result[i][1], points: result[i][2]};\r\n          inGameWalletsFull = [...inGameWalletsFull, tempWalletProp];\r\n        }\r\n        setWalletsParticipating(inGameWalletsFull);\r\n      })\r\n    }\r\n  })\r\n\r\n  let pointsTotal = [0,0,0];\r\n    cWars.methods.skeletoonFractionPoints().call(async (err,result) => {\r\n      if (!err) {\r\n        pointsTotal[0] = result;\r\n        cWars.methods.zombieFractionPoints().call(async (err,result) => {\r\n          if (!err) {\r\n            pointsTotal[1] = result;\r\n            cWars.methods.demonFractionPoints().call(async (err,result) => {\r\n              if (!err) {\r\n                pointsTotal[2] = result;\r\n                setFractionPointsTotal(pointsTotal);\r\n              }\r\n            })\r\n          }\r\n        })\r\n      }\r\n    })\r\n\r\n  }, [rendered])\r\n\r\n  useEffect(() => {\r\n    if (prop.address !== null)\r\n    cWars.methods.getWalletProperties(prop.address).call(async (err,result) => {\r\n      if (!err){\r\n          setWalletFraction(result[0]);\r\n          setWalletPoints(result[1]);\r\n          cWars.methods.getProfilePicture(prop.address).call(async (err,result) => {\r\n            if (!err){\r\n              let temp = {token: result[0], gene:result[1], str:result[2]}\r\n              setpfp(temp);\r\n              cTWSKP.methods.walletOfOwner(prop.address).call(async (err,result) => {\r\n                if (!err){\r\n                  setSkeletoonsInWallet(result);\r\n                    setSkeletoonSelected(result[0])\r\n                }\r\n              })\r\n            }\r\n          })\r\n      }\r\n  })  \r\n  }, [prop.address])\r\n\r\n  useEffect(() => {\r\n    if (skeletoonSelected !== null) {\r\n      var myCanvas = document.getElementById('skeletoon_pfp_canvas');\r\n          myCanvas.width = 2000;\r\n          myCanvas.height = 2000;\r\n      displaySkeletoon()\r\n      cTWReward.methods.getPoints(skeletoonSelected).call(async (err,result) => {\r\n        if (!err){\r\n          let total = parseInt(result[0]) + parseInt(result[walletFraction])\r\n          setTotalPointsUsable(total.toString());\r\n          setAttackPointsUsable(result[walletFraction]);\r\n        }\r\n      })\r\n    }\r\n  }, [skeletoonSelected])\r\n\r\n  useEffect(() => {\r\n    if (fractionCardOpen === 1){\r\n      cTWSKP.methods.getSkeletoonProperties(skeletoonSelected).call(async (err,result) => {\r\n        if (!err){\r\n          let gene = result[1]\r\n          let str = result[2]\r\n          for (let i = 54 - gene.length; i >0 ; i--){\r\n            gene = \"0\" + gene\r\n          }\r\n          for (let i = 54 - str.length; i >0 ; i--){\r\n            str = \"0\" + str\r\n          }\r\n\r\n          drawSkeletoonFull(gene, str, 'pfp_canvas', 0, 1, 500)\r\n        }\r\n      })   \r\n    }\r\n  }, [fractionCardOpen])\r\n\r\n  useEffect(() => {\r\n    if (cardOpen !== null){\r\n      cWars.methods.getProfilePicture(cardOpen.address).call(async (err,result) => {\r\n        if (!err){\r\n\r\n          if (result[0] !== \"0\"){\r\n          let gene = result[1]\r\n          let str = result[2]\r\n          for (let i = 54 - gene.length; i >0 ; i--){\r\n            gene = \"0\" + gene\r\n          }\r\n          for (let i = 54 - str.length; i >0 ; i--){\r\n            str = \"0\" + str\r\n          }\r\n\r\n          drawSkeletoonFull(gene, str, 'attacked_canvas', 0, 1, 500)}\r\n          } if (result[0] === \"0\"){\r\n            drawSingleCanvas(gen1Placeholder, 'attacked_canvas')\r\n          }\r\n      })\r\n    }\r\n  }, [cardOpen])\r\n\r\n  useEffect(() => {\r\n    if (walletFraction === null) {\r\n      drawSingleCanvas(TWWBackgrounds[0], 'wars_background_canvas')\r\n    } else {\r\n      drawSingleCanvas(TWWBackgrounds[parseInt(walletFraction)], 'wars_background_canvas')\r\n    }\r\n  }, [rendered, walletFraction])\r\n\r\n  return (\r\n    <div id={\"wars_container\"}>\r\n    <canvas id={\"wars_background_canvas\"} width=\"1680\" height=\"855\"></canvas>\r\n    <div id={\"wars_overlay\"}>{fractionCardOpen !== null? createFractionCard(): \"\"}{cardOpen !== null? createCard(cardOpen): \"\"}{renderDisplay()}</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Wars","import \"./App.css\";\nimport logo from \"./logo.svg\";\nimport { useEffect, useState } from 'react';\nimport Dashboard from './components/dashboard/Dashboard'\nimport Web3 from 'web3'\nimport { header_logo } from \"./data/canvassrc\";\nimport Market from \"./components/marketplace/Market\";\nimport Wars from \"./components/wars/Wars\";\n\n\nfunction App() {\n\n  const [currentAccount, setCurrentAccount] = useState(null);\n  const [currentChain, setCurrentChain] = useState(null);\n  const [pageSelect, setPageSelect] = useState(\"ToonStone\")\n  const {ethereum} = window;\n  const web3 = new Web3(Web3.givenProvider)\n\n  const connectWalletHandler = async () => {\n    if (!ethereum) {\n      alert(\"Please install Metamask!\");\n    }\n\n    try {\n      const accounts = await ethereum.request({ method: 'eth_requestAccounts' });\n      setCurrentAccount(accounts[0]);\n      getChainId();\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  const connectWalletButton = () => {\n    \n    return (\n      <button onClick={connectWalletHandler} id='connectWallet'>\n        {currentAccount ? currentAccount : \"Connect Wallet\"}\n      </button>\n    )\n  }\n\n  const quickCanvas = () => {\n    \n  }\n\n  const getChainId = async () => {\n    ethereum.enable().then(async () => {\n\t\t\tlet chain = await web3.eth.getChainId();\n      setCurrentChain(chain)\n    });\n  }\n\n  const actionButtons = () => {\n    return (<>\n      <button class=\"button-wrapper\" id='ToonStone' onClick={() => {\n        setPageSelect(\"ToonStone\")\n        }}>{\"ToonStone\"}\n      </button>\n       <button class=\"button-wrapper\" id='Market' onClick={() => {\n        setPageSelect(\"Market\")\n        }}>{\"Inventory/Market\"}\n      </button>\n      <button class=\"button-wrapper\" id='Wars' onClick={() => {\n        setPageSelect(\"Wars\")\n        }}>{\"ToonWorld Wars\"}\n      </button>\n    </>)\n  }\n\n  const renderDispaly = () => {\n    switch (pageSelect) {\n      case \"ToonStone\":\n        return (\n            <Dashboard address={currentAccount} chain={currentChain}></Dashboard>\n        )\n      case \"Market\":\n        return (\n          <Market address={currentAccount} chain={currentChain}> </Market>\n        )\n      case \"Wars\":\n        return (\n          <Wars address={currentAccount} chain={currentChain}> </Wars>\n        )\n    }\n  }\n\n  useEffect(() => {\n    ethereum.on('accountsChanged', function () {\n      connectWalletHandler();\n    })\n    ethereum.on('chainChanged', () => {\n      getChainId();\n    });\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <header>\n            <img src={header_logo} id={\"logo\"}></img>\n            {actionButtons()}\n            {connectWalletButton()}\n        </header>\n        {renderDispaly()}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Web3ReactProvider} from '@web3-react/core';\nimport Web3 from 'web3'\n\n\nfunction getLibrary(provider) {\n  return new Web3(provider)\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <Web3ReactProvider getLibrary={getLibrary}>\n    <App />\n    </Web3ReactProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}