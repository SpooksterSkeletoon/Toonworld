{"version":3,"sources":["logo.svg","components/helpers/Renderer.js","scripts/Helper.js","components/helpers/Groups.js","data/canvassrc.js","components/dashboard/display/GetTrait.js","components/dashboard/display/Mint.js","components/dashboard/display/Profile.js","components/dashboard/display/Rewards.js","components/dashboard/display/Summon.js","components/dashboard/display/Upgrade.js","components/dashboard/display/Vote.js","components/dashboard/TombstoneMeniu.js","components/dashboard/Dashboard.js","components/marketplace/NFTcard.js","components/marketplace/Market.js","App.js","reportWebVitals.js","index.js"],"names":["imageURL","drawSingleCanvas","URL","canvasID","otherValue","ctx","document","getElementById","getContext","img","Image","src","onload","drawImage","drawSkeletoonFull","genes","strength","indexer","downscaleTimes","finalScale","j","singleGeneD","singleStrD","singleGeneWhole","breakpoints","i","flaggedWhole","substring","TraitMap","hasOwnProperty","Object","keys","length","parseInt","toString","console","log","setAttribute","downscaleRecursion","myCanvas","counter","resample_single","width","height","canvas","resize_canvas","width_source","height_source","ratio_w","Math","round","ratio_h","ratio_w_half","ceil","ratio_h_half","getImageData","img2","createImageData","data","data2","x2","weight","weights","weights_alpha","gx_r","gx_g","gx_b","gx_a","center_y","yy_start","floor","yy_stop","yy","dy","abs","center_x","w0","xx_start","xx_stop","xx","dx","w","sqrt","pos_x","clearRect","putImageData","fetchMetadata","url","a","fetch","response","json","jsonData","web3","Web3","givenProvider","contractSPSK","eth","Contract","abi","SPSK","contractSHY","SHY","contractSpecials","Specials","contractCreatoons","Creatoons","aTWSP","aTWT","aTWG","aTWLogic","aTWRewards","aTWMarket","ctestnetSPSK","TestNetSPSK","cTWSP","TWSP","cTWT","TWT","cTWG","TWG","cTWB","TWB","cTWLogic","TWLogic","cTWRewards","TWRewards","cTWMarket","TWMarket","uibatch","button_default","gen1Placeholder","gen2Placeholder","traitInv","glyphInv","icon_yes","icon_no","button_mini2h","icon_Bg_D","icon_Bg_M","icon_Pet_D","icon_Pet_M","icon_Body_D","icon_Body_M","icon_Mouth_D","icon_Mouth_M","icon_Head_D","icon_Head_M","icon_Eye_D","icon_Eye_M","icon_Hat_D","icon_Hat_M","icon_Item_D","icon_Item_M","icon_Cape_D","icon_Cape_M","GetTrait","prop","useState","displaySettings","setDisplaySettings","selectedGeneIndex","setselectedGeneIndex","messageStatus","setMessageStatus","geneIcons","listToGeneIndexer","index","drawPreview","selectedGene","pStr","prefix","strSeq","edited","twj","changeStrSeq","pGene","geneSeq","geneSingle","actionButtons","class","onClick","traitCanvas","alt","position","skeletoonID","skeletoonTokenId","strDissasermbler","txData","methods","getGene","encodeABI","sendTransaction","from","address","to","on","receipt","sendTX","geneIndexertoArr","geneIndex","geneDisasaemblerMapped","sequence","listAllItemsf","map","gene","id","actionDisplay","className","listItems","renderTraits","useEffect","Mint","SPSKbalance","setSPSKbalance","SPSKsupply","setSPSKsupply","claimedTokens","setClaimedTokens","mintAmount","setMintAmount","contractTWSP","balanceSPSK","totalSupply","call","err","result","setTokensToClaim","idArr","amount","splitArr","split","slice","fetchSPSKbalance","walletOfOwner","temp","unclaimed","isTokenClaimedBatch","type","placeholder","onChange","e","target","value","getPrice","price","utils","fromWei","priceInt","toWei","mint","claim","claimTX","Profile","pendingRewards","setPendingRewards","dateLock","Date","timeLocked","setTimeLocked","unlockDateString","setUnlockDateString","contract","geneStrength","totalRewards","Traits","Glyphs","TWBrewardMultis","rewardMapper","rewardGene","_str","str","RewardString","tempValue","tempString","push","RewardsMap","renderRewardsTotal","getAvailableRewards","GlyphStr","today","unixTimeLocked","getTime","timeStamp","claimedStamp","hours","minutes","seconds","unixTimeStampToNextReward","getTimeLock","Rewards","ticketsAll","setAllTickets","ticketsPersonal","setPersonalTickerts","rewardButtons","allTickets","getPersonalTickets","er","claimSingleReward","claimSingle","renderContest","Summon","emptyTrait","traitIds","setTraitIds","usedTraits","setUsedTraits","fetching","setFetching","approvalState","setApprovalState","traitContract","fetchInventoryTrait","getTraitPropertiesBatch","invTemp","traitInventoryDisplay","inventoryTraitDiv","filter","trait","filterTrait","newUsed","traitSelectedFromInv","Arr","tempApproval","isApprovedForAll","forEach","previewDraw","approvals","usedTraitIDs","setApprovalForAll","summonFee","summonSkeletoon","Upgrade","usedPoints","setUsedPoints","availablePoints","setAvailablePoint","pointCost","setPointCost","glyphIds","setGlyphIds","inventoryState","setInventoryState","selectedTrait","setSelectedTrait","selectedGlyph","setSelectedGlyph","glyphContract","upgradedGene","changeGeneSeq","points","pointsFree","costPerPoint","glyphID","traitID","upgradeSkeletoonPayed","upgradeSkeletoon","pointCostDisplay","boughtPoints","parseFloat","fetchInventoryGlyph","getGlyphPropertiesBatch","tokenSelector","obj","glyphInventoryDisplay","inventoryGlyphDiv","glyph","tempgeneindex","filterGlyph","glyphStr","find","suffix","getTimeLocked","getAvailablePoints","strPointCost","Vote","TombstoneMeniu","window","ethereum","skeletoons","setSkeletoons","selectedSkeletoonId","setSelectedSkeletoonId","selectedMeniu","setSelectedMeniu","availableMenius","setAvalableMenius","isDisplayProfiled","setDisplayProfiled","areSkeletoonsFetched","setFetch","meniuConstructor","setGeneSeq","setStrSeq","refresh","setRefresh","goodFetcher","balanceOf","fetcherRetry","tokenID","tokenOfOwnerByIndex","tokenURI","tokenMetadata","skeletoonList","meniuButton","selector","text","navigation","displaySkeletoon","name","group","getGroup","includes","getStrength","getGenes","token","object","indexOf","listToonWorldSkeletoons","mainDisplay","Dashboard","settings","chain","NFTcard","setRenderImageType","marketRender","setMarketRender","isApproved","setApproval","setPrice","seller","setSeller","salePrice","setSalePrice","padder","input","card","padded","properties","renderTraitCard","traitType","renderGlyphCard","glyphApplies","applies","appliedPos","icons","iconFiltered","item","NFTtype","padGene","padStr","getApproved","marketID","fetchSingle","toLowerCase","createMarketSale","buyListing","createMarketItem","listItem","approve","approveForSale","cancelMarketSale","cancelListing","Market","selectedDisplay","setSelectedDisplay","selectedAddress","setSelectedAddress","base","skeletoon","setFilter","constructor","page","setPage","cardOpen","setCardOpen","cardItem","setCardItem","traits","glyphs","marketItems","setMarketItems","inventory","setInventory","listings","setListings","filtered","setFiltered","filterBool","setFilterBool","cMarket","inventoryLoadOld","appliesTo","typeId","fetchListedGlyph","marketLeft","marketOld","glyphsMarketID","glyphsPrice","market","marketId","fetchListedTrait","traitsMarketID","traitsPrice","fetchListingsGlyph","fetchListingsTrait","filterSkeletoonsDisplay","itemTemp","marketCopy","invCopy","listedCopy","itemsFiltered","skele","passFail","tempFilterGene","tempFilterStr","tempGene","tempStr","skeletoonFilterer","getKeyByValue","key","skeleFilterInput","geneValue","strValue","positionfiltered","filtertemp","filterTraitsDisplay","traitFilterer","traitFilter","traitFilterInput","filterGlyphsDisplay","filterPass","glyphFilterer","glyphFilterInput","_512","_256","_128","_64","_32","_16","_8","_4","_2","getKeyByValueGlyph","baseFilter","openCard","NFType","tokenId","displayArr","fetchMarketItems","skeletoonsMarket","skeletoonsMarketID","skeletoonsPrice","getSkeletoonPropertiesBatch","fetchListings","fetchListed","inventoryLoad","fetchInventory","pagedNFT","renderedOutput","cardsListings","cardsInventory","cardsDisplay","App","currentAccount","setCurrentAccount","currentChain","setCurrentChain","pageSelect","setPageSelect","connectWalletHandler","alert","request","method","accounts","getChainId","enable","then","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getLibrary","provider"],"mappings":"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","file":"static/js/main.10829454.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import TraitMap from \"./TraitMap.json\"\r\n\r\nconst imageURL = \"https://ipfs.io/ipfs/QmSRtP9kFubbY9LUqzWsXLk4TQDWUsbcphZdUeuBKgawcJ/\";\r\n//const imageURL = \"../renderComponents/skeletoons/\";\r\n\r\nexport const drawSingleCanvas = (URL, canvasID) => {\r\n\r\n    let otherValue = URL\r\n\r\n    var myCanvas = document.getElementById(canvasID);\r\n    var ctx = myCanvas.getContext('2d');\r\n    var img = new Image;\r\n\r\n    img.src = otherValue;\r\n    img.onload = function(){\r\n      ctx.drawImage(img, 0,0); \r\n    };\r\n}\r\n\r\nexport const drawSkeletoonFull = (genes, strength, canvasID, indexer, downscaleTimes, finalScale,) => {\r\n    var myCanvas = document.getElementById(canvasID);\r\n    var ctx = myCanvas.getContext('2d');\r\n    var img = new Image;\r\n\r\n    let i = indexer\r\n    let j\r\n    let n\r\n    let singleGeneD\r\n    let singleStrD\r\n    let flaggedWhole = false;\r\n    let singleGeneWhole;\r\n    let breakpoints;\r\n\r\n    \r\n        \r\n        singleGeneD = genes.substring(( indexer * 2 ) * 3 ,(( indexer * 2 ) + 1 ) * 3)    \r\n        singleStrD  = strength.substring(( indexer * 2 ) * 3 ,(( indexer * 2 ) + 1 ) * 3)\r\n        singleGeneWhole = genes.substring(( indexer * 2 ) * 3 ,(( indexer * 2 ) + 2 ) * 3)\r\n\r\n        //ADD support for 000 traits\r\n\r\n        if (TraitMap.hasOwnProperty(singleGeneWhole)) {\r\n        breakpoints = Object.keys(TraitMap[singleGeneWhole]).length\r\n        for (j = 1; j <= breakpoints; j++){   \r\n            \r\n            if (singleStrD >=  parseInt(TraitMap[singleGeneWhole][j.toString()][1])) {\r\n                flaggedWhole = true;\r\n                img.src = imageURL + TraitMap[singleGeneWhole][j.toString()][0] + \".png\"\r\n                console.log(img.src)\r\n                img.setAttribute('crossOrigin', '');\r\n                img.onload = function(){\r\n                    console.log(img);\r\n                    ctx.drawImage(img, 0,0);               \r\n                    i++\r\n                    if (i < 9) {                \r\n                    drawSkeletoonFull(genes, strength, canvasID, i, downscaleTimes, finalScale) \r\n                    } else if (i=9){\r\n                        downscaleRecursion (canvasID, downscaleTimes, finalScale)\r\n                    }\r\n                };\r\n                break;\r\n            }\r\n        }\r\n        } if (flaggedWhole == false) {\r\n        \r\n        if (singleGeneD !== \"000\") {\r\n        breakpoints = Object.keys(TraitMap[singleGeneD]).length\r\n\r\n        for (j = 1; j <= breakpoints; j++){   \r\n            \r\n            if (singleStrD >=  parseInt(TraitMap[singleGeneD][j.toString()][1])) {\r\n                img.src = imageURL + TraitMap[singleGeneD][j.toString()][0] + \".png\"\r\n                img.setAttribute('crossOrigin', '');\r\n                img.onload = function(){\r\n                    console.log(img);\r\n                    ctx.drawImage(img, 0,0);               \r\n                    i++\r\n                    if (i < 9) {                \r\n                    drawSkeletoonFull(genes, strength, canvasID, i, downscaleTimes, finalScale) \r\n                    } else if (i=9){\r\n                        downscaleRecursion (canvasID, downscaleTimes, finalScale)\r\n                    }\r\n                };\r\n                break;\r\n            }\r\n        }} else {\r\n            i++\r\n                    if (i < 9) {                \r\n                    drawSkeletoonFull(genes, strength, canvasID, i, downscaleTimes, finalScale) \r\n                    } else if (i=9){\r\n                        downscaleRecursion (canvasID, downscaleTimes, finalScale)\r\n                    }\r\n        }\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\nfunction downscaleRecursion(canvasID, downscaleTimes, finalScale) {\r\n    var myCanvas = document.getElementById(canvasID);\r\n    let counter = downscaleTimes - 1\r\n    if (0 < downscaleTimes) {\r\n        console.log(\"Rescaling\")\r\n        resample_single(myCanvas, (myCanvas.width)/2, (myCanvas.height)/2, true)\r\n        downscaleRecursion(canvasID, counter, finalScale)\r\n    }\r\n    if (0 == downscaleTimes) {\r\n        console.log(\"Rescaling\")\r\n        resample_single(myCanvas, finalScale, finalScale, true)   \r\n     }\r\n}\r\n\r\n\r\n\r\nfunction resample_single(canvas, width, height, resize_canvas) {\r\n    var width_source = canvas.width;\r\n    var height_source = canvas.height;\r\n    width = Math.round(width);\r\n    height = Math.round(height);\r\n\r\n    var ratio_w = width_source / width;\r\n    var ratio_h = height_source / height;\r\n    var ratio_w_half = Math.ceil(ratio_w / 2);\r\n    var ratio_h_half = Math.ceil(ratio_h / 2);\r\n\r\n    var ctx = canvas.getContext(\"2d\");\r\n    var img = ctx.getImageData(0, 0, width_source, height_source);\r\n    var img2 = ctx.createImageData(width, height);\r\n    var data = img.data;\r\n    var data2 = img2.data;\r\n\r\n    for (var j = 0; j < height; j++) {\r\n        for (var i = 0; i < width; i++) {\r\n            var x2 = (i + j * width) * 4;\r\n            var weight = 0;\r\n            var weights = 0;\r\n            var weights_alpha = 0;\r\n            var gx_r = 0;\r\n            var gx_g = 0;\r\n            var gx_b = 0;\r\n            var gx_a = 0;\r\n            var center_y = (j + 0.5) * ratio_h;\r\n            var yy_start = Math.floor(j * ratio_h);\r\n            var yy_stop = Math.ceil((j + 1) * ratio_h);\r\n            for (var yy = yy_start; yy < yy_stop; yy++) {\r\n                var dy = Math.abs(center_y - (yy + 0.5)) / ratio_h_half;\r\n                var center_x = (i + 0.5) * ratio_w;\r\n                var w0 = dy * dy; //pre-calc part of w\r\n                var xx_start = Math.floor(i * ratio_w);\r\n                var xx_stop = Math.ceil((i + 1) * ratio_w);\r\n                for (var xx = xx_start; xx < xx_stop; xx++) {\r\n                    var dx = Math.abs(center_x - (xx + 0.5)) / ratio_w_half;\r\n                    var w = Math.sqrt(w0 + dx * dx);\r\n                    if (w >= 1) {\r\n                        //pixel too far\r\n                        continue;\r\n                    }\r\n                    //hermite filter\r\n                    weight = 2 * w * w * w - 3 * w * w + 1;\r\n                    var pos_x = 4 * (xx + yy * width_source);\r\n                    //alpha\r\n                    gx_a += weight * data[pos_x + 3];\r\n                    weights_alpha += weight;\r\n                    //colors\r\n                    if (data[pos_x + 3] < 255)\r\n                        weight = weight * data[pos_x + 3] / 250;\r\n                    gx_r += weight * data[pos_x];\r\n                    gx_g += weight * data[pos_x + 1];\r\n                    gx_b += weight * data[pos_x + 2];\r\n                    weights += weight;\r\n                }\r\n            }\r\n            data2[x2] = gx_r / weights;\r\n            data2[x2 + 1] = gx_g / weights;\r\n            data2[x2 + 2] = gx_b / weights;\r\n            data2[x2 + 3] = gx_a / weights_alpha;\r\n        }\r\n    }\r\n    //clear and resize canvas\r\n    if (resize_canvas === true) {\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n    } else {\r\n        ctx.clearRect(0, 0, width_source, height_source);\r\n    }\r\n\r\n    //draw\r\n    ctx.putImageData(img2, 0, 0);\r\n}","export const fetchMetadata = async (url) => {\r\n    const response = await fetch(url);\r\n    const jsonData = await response.json();\r\n    //console.log(jsonData)\r\n    return jsonData;\r\n  };","import abi from \"../../contracts/ABI.json\";\r\nimport Web3 from \"web3\";\r\n\r\nconst web3 = new Web3(Web3.givenProvider);\r\nconst contractSPSK = new web3.eth.Contract(abi.SPSK, \"0x1dadaa7e55b2c7238ed04891ac182ea1468b79b9\");\r\nconst contractSHY = new web3.eth.Contract(abi.SHY, \"0x360b2900E56ECfa31c5004c640F8b8c803e00336\");\r\nconst contractSpecials = new web3.eth.Contract(abi.Specials, \"0x3D50934150B1CfD1a6d336684ffFC1cC3Fe906b7\");\r\nconst contractCreatoons = new web3.eth.Contract(abi.Creatoons, \"0xF870B0D3022682d9a6a7aBBF562c7F8F6Fc6c708\");\r\n\r\nexport const atestnetSPSK = \"0x3780687C770500740F244Ac405824Ca35FD50BA1\"\r\n\r\nexport const aTWSP = \"0x4D4391E65D56735AC8802eA4a685549c5D794de1\"\r\nexport const aTWT = \"0x3476377a802F88D0F2f4A1892d2c7401cC1A782e\"\r\nexport const aTWG = \"0xF5BEeBbe909E2425099F9B4951D096afac80B21b\"\r\nexport const aTWB = \"0xF35608EA9e6B06e71dB762373367d5C1d98Ae4Ce\"\r\nexport const aTWLogic = \"0x8f25C4Ed9E00d70e66c507862E66A5A6110Db93A\"\r\nexport const aTWRewards = \"0x42055d98CFD0752574978b5088CcB341e9E27e49\"\r\nexport const aTWMarket = \"0x48c4177d88b12941281d230d26CF226d2802EdCA\";\r\n\r\nexport const aSPSK =  \"0x1dadaa7e55b2c7238ed04891ac182ea1468b79b9\";\r\n\r\nexport const ctestnetSPSK = new web3.eth.Contract(abi.TestNetSPSK, atestnetSPSK);\r\n\r\nexport const cTWSP = new web3.eth.Contract(abi.TWSP, aTWSP);\r\nexport const cTWT = new web3.eth.Contract(abi.TWT,aTWT);\r\nexport const cTWG = new web3.eth.Contract(abi.TWG,aTWG);\r\nexport const cTWB = new web3.eth.Contract(abi.TWB,aTWB);\r\nexport const cTWLogic = new web3.eth.Contract(abi.TWLogic,aTWLogic);\r\nexport const cTWRewards = new web3.eth.Contract(abi.TWRewards,aTWRewards);\r\nexport const cTWMarket = new web3.eth.Contract(abi.TWMarket, aTWMarket);\r\n\r\nexport const cSPSK = contractSPSK;\r\n\r\n\r\n\r\nexport const reqChain = 4002;\r\n\r\nexport const getGroup = (address) => {\r\n    let group = [];\r\n\r\n    contractSPSK.methods.balanceOf(address).call(async(err, result) => {\r\n        if (result > 0) {\r\n            group.push(\"Skeletoons\")\r\n        }\r\n        })\r\n    contractSHY.methods.balanceOf(address).call(async(err, result) => {\r\n        if (result > 0) {\r\n            group.push(\"ShyFeet\")\r\n        }\r\n        })\r\n    contractSpecials.methods.balanceOf(address).call(async(err, result) => {\r\n        if (result > 0) {\r\n            group.push(\"ToonWorldSpecials\")\r\n        }\r\n        })\r\n    contractCreatoons.methods.balanceOf(address).call(async(err, result) => {\r\n        if (result > 0) {\r\n            group.push(\"SinfulCreatoons\")\r\n        }\r\n        })\r\n    //TODO add ToonworldSkeletoons   \r\n    cTWSP.methods.balanceOf(address).call(async(err, result) => {\r\n        if (result > 0) {\r\n            group.push(\"Toonworld Skeletoon Profile\")\r\n        }\r\n        })\r\n    cTWT.methods.balanceOf(address).call(async(err, result) => {\r\n        if (result > 0) {\r\n            group.push(\"Toonworld Traits\")\r\n        }\r\n        })\r\n    cTWG.methods.balanceOf(address).call(async(err, result) => {\r\n        if (result > 0) {\r\n            group.push(\"Toonworld Glyph\")\r\n        }\r\n        })\r\n    cTWB.methods.balanceOf(address).call(async(err, result) => {\r\n        if (result > 0) {\r\n            group.push(\"Toonworld Bucks\")\r\n        }\r\n        })\r\n     \r\n    return group\r\n}\r\n\r\nexport const getGenes = (tokenId) => {\r\n    let gene\r\n    cTWSP.methods.getGenes(tokenId).call(async(err, result) =>{\r\n        if (!err)\r\n        {    console.log( result)\r\n            gene = await result;}\r\n        else \r\n        {console.log(err)}\r\n    })\r\n    return gene\r\n}\r\n\r\nexport const getStrength = (tokenId) => {\r\n    let str\r\n    cTWSP.methods.getStrength(tokenId).call(async(err, result) =>{\r\n        if (!err)\r\n        {   console.log( result)\r\n            str = await result;}\r\n        else \r\n        {console.log(err)}\r\n    })\r\n    return str;\r\n}\r\n\r\nexport const getAvailablePoints = () => {\r\n\r\n}\r\n\r\n","const uibatch = \"https://ipfs.io/ipfs/QmZzh44V4w3nvbQFLVYeJr7ghoGqLWAoLw6cUAaMA7dW1g/\"\r\nexport const header_logo = \"https://ipfs.io/ipfs/QmVbp67JMUyh1J5Hezj7ZLcVAW2iihNpbgVViPX3t3R71P\"\r\nexport const background_default = \"https://ipfs.io/ipfs/QmUvJShUxF9x6jyQxWMwY6FYmor7hjvqBSgvXZiRw9hMuY/Background_Default.png\";\r\nexport const button_default = uibatch + \"button_light.png\"\r\nexport const tombstone_default = \"https://ipfs.io/ipfs/QmUvJShUxF9x6jyQxWMwY6FYmor7hjvqBSgvXZiRw9hMuY/Toonstone_Default.png\";\r\nexport const meniu_default = \"https://ipfs.io/ipfs/QmUvJShUxF9x6jyQxWMwY6FYmor7hjvqBSgvXZiRw9hMuY/Meniu_Default.png\";\r\nexport const header = \"\";\r\nexport const gen1Placeholder = \"https://ipfs.io/ipfs/QmPzzuHgbbLReN537PL5QugF66t4eoY9qAcw4MkNTLuAin\"\r\nexport const gen2Placeholder = \"https://ipfs.io/ipfs/QmbYRqLdrPxJ9G3n3bXnuhy9Zz2cHMqkMyBMSDA6oohvxQ\"\r\n\r\nexport const traitInv = \"https://ipfs.io/ipfs/QmSQLno2WXtgZ9bhV8TokkLFJj4ot5qRjiSqyGp8XjsrQK\"\r\n\r\nexport const glyphInv = \"https://ipfs.io/ipfs/QmTMcnJv4mufW4r68xAYcujL4yt1dxGQbYtYcgdAfMEwnw\"\r\n\r\nexport const button_dark = uibatch + \"button_dark.png\"\r\nexport const button_mini = uibatch + \"button_mini.png\" \r\nexport const button_prev = uibatch + \"Navigation_Prev.png\"\r\nexport const button_next = uibatch + \"Navigation_Next.png\"\r\nexport const icon_plus = uibatch + \"plus.png\"\r\nexport const icon_minus = uibatch + \"minus.png\"\r\nexport const icon_refresh = uibatch + \"refresh.png\"\r\nexport const icon_yes = uibatch + \"Y.png\"\r\nexport const icon_no = uibatch + \"N.png\"\r\nexport const button_mini2h = uibatch + \"horizontal_mini2.png\"\r\nexport const button_mini2v = uibatch + \"vertical_mini2.png\"\r\n\r\nexport const icon_Bg_D = uibatch + \"TBG.png\"\r\nexport const icon_Bg_M = uibatch + \"TBGm.png\"\r\n\r\nexport const icon_Pet_D = uibatch + \"TPet.png\"\r\nexport const icon_Pet_M = uibatch + \"TPetm.png\"\r\n\r\nexport const icon_Body_D = uibatch + \"TBody.png\"\r\nexport const icon_Body_M = uibatch + \"TBodym.png\"\r\n\r\nexport const icon_Mouth_D = uibatch + \"TMouth.png\"\r\nexport const icon_Mouth_M = uibatch + \"TMouthm.png\"\r\n\r\nexport const icon_Head_D = uibatch + \"THead.png\"\r\nexport const icon_Head_M = uibatch + \"THeadm.png\"\r\n\r\nexport const icon_Eye_D = uibatch + \"TEye.png\"\r\nexport const icon_Eye_M = uibatch + \"TEyem.png\"\r\n\r\nexport const icon_Hat_D = uibatch + \"THat.png\"\r\nexport const icon_Hat_M = uibatch + \"THatm.png\"\r\n\r\nexport const icon_Item_D = uibatch + \"TItem.png\"\r\nexport const icon_Item_M = uibatch + \"TItemm.png\"\r\n\r\nexport const icon_Cape_D = uibatch + \"TCape.png\"\r\nexport const icon_Cape_M = uibatch + \"TCapem.png\"\r\n\r\nexport const glyphDefault = uibatch + \"glyph.png\"\r\n\r\nexport const rewardsAll = uibatch + \"rewards_all.png\"\r\nexport const rewardsSingle = uibatch + \"rewards_one.png\"","import React from 'react'\r\nimport \"../../../styles/GetTrait.css\";\r\nimport \"../../../styles/Upgrade.css\";\r\nimport TraitMap from \"../../helpers/TraitMap.json\";\r\nimport Web3 from \"web3\";\r\nimport { useEffect, useState } from \"react\";\r\nimport {\r\n  button_default,\r\n  icon_Bg_D,\r\n  icon_Bg_M,\r\n  icon_Body_D,\r\n  icon_Body_M,\r\n  icon_Cape_D,\r\n  icon_Cape_M,\r\n  icon_Eye_D,\r\n  icon_Eye_M,\r\n  icon_Hat_D,\r\n  icon_Hat_M,\r\n  icon_Head_D,\r\n  icon_Head_M,\r\n  icon_Item_D,\r\n  icon_Item_M,\r\n  icon_minus,\r\n  icon_Mouth_D,\r\n  icon_Mouth_M,\r\n  icon_no,\r\n  icon_Pet_D,\r\n  icon_Pet_M,\r\n  icon_plus,\r\n  icon_yes,\r\n  traitInv,\r\n} from \"../../../data/canvassrc\";\r\nimport { drawSingleCanvas, drawSkeletoonFull } from '../../helpers/Renderer';\r\nimport { aTWLogic, cTWLogic} from '../../helpers/Groups';\r\nimport { displayLoader } from '../../helpers/Loader';\r\n// TODO: Show all traits -> Click trait to select for extract -> Send getTrait tx and Prievie for new skeletoon + trait itself\r\nconst GetTrait = (prop) => {\r\n  const [displaySettings, setDisplaySettings] = useState(null);\r\n  const [selectedGeneIndex, setselectedGeneIndex] = useState(null);\r\n  const [messageStatus, setMessageStatus] = useState(null);\r\n\r\n  let geneIcons = [\r\n    icon_Bg_D,\r\n    icon_Pet_D,\r\n    icon_Body_D,\r\n    icon_Mouth_D,\r\n    icon_Head_D,\r\n    icon_Eye_D,\r\n    icon_Hat_D,\r\n    icon_Item_D,\r\n    icon_Cape_D,\r\n    icon_Bg_M,\r\n    icon_Pet_M,\r\n    icon_Body_M,\r\n    icon_Mouth_M,\r\n    icon_Head_M,\r\n    icon_Eye_M,\r\n    icon_Hat_M,\r\n    icon_Item_M,\r\n    icon_Cape_M,\r\n  ];\r\n\r\n  const web3 = new Web3(Web3.givenProvider);\r\n  const strCost = \"100\";\r\n\r\n  const listToGeneIndexer = (index) => {\r\n    if (index < 9) {\r\n      return index * 2;\r\n    } else {\r\n      return (index - 9) * 2 + 1;\r\n    }\r\n  };\r\n\r\n  const changeStrSeq = () => {\r\n    let prefix = \"\";\r\n    if (selectedGeneIndex != 0)\r\n    {prefix = prop.strSeq.substring(0, ((selectedGeneIndex-1)*3)+3)}\r\n    let edited = \"000\"\r\n    for (let twj = edited.length; twj < 3 ;twj++) {edited = \"0\" + edited}\r\n    let suffix =prop.strSeq.substring(((selectedGeneIndex)*3)+3,54);\r\n     return (prefix+edited+suffix)\r\n  }\r\n\r\n  // Do a mapping for trait visuals only (tGene, tStr)\r\n  const drawPreview = () => {\r\n    let selectedGene = selectedGeneIndex\r\n\r\n    let pStr = changeStrSeq();\r\n    let pGene = prop.geneSeq;\r\n\r\n    let geneSingle = pGene.substring((selectedGene*3), (selectedGene*3 )+ 3);\r\n\r\n\r\n\r\n    let tStr = \"000000000000000000000000000000000000000000000000000000\"\r\n    let tGene = \"000000000000000000000000000000000000000000000000\"+ geneSingle +\"000\"\r\n    drawSkeletoonFull(pGene, pStr, 'skeletoon_preview_canvas', 0, 2, 250);\r\n    drawSingleCanvas((traitInv + \"/\"+ geneSingle.substring(1) + \".png\"), 'trait_preview_canvas');\r\n  }\r\n\r\n  const sendTX = () => {\r\n    let position = selectedGeneIndex;\r\n    let skeletoonID = prop.skeletoonTokenId;\r\n    if (skeletoonID <= 10000 && parseInt(strDissasermbler(prop.strSeq, position * 3)) == 100 && prop.geneSeq.substring((position*3), (position*3 )+ 3) != \"000\"){\r\n      let txData = cTWLogic.methods.getGene(skeletoonID, position).encodeABI();\r\n      web3.eth.sendTransaction(\r\n        {\r\n          from: prop.address,\r\n          to: aTWLogic,\r\n          data: txData,\r\n        }).on('receipt', function(receipt) {\r\n          setMessageStatus(\"Trait Extracted Successfully\")\r\n        });\r\n    }\r\n  }\r\n\r\n  \r\n  const actionButtons = () => {\r\n    \r\n    return (\r\n      <div class=\"btn-group\">\r\n      <div class=\"button-wrapper\" onClick={() => {\r\n        var myCanvas = document.getElementById('skeletoon_preview_canvas');\r\n        myCanvas.width = 2000;\r\n        myCanvas.height = 2000;\r\n        var traitCanvas = document.getElementById('trait_preview_canvas');\r\n        traitCanvas.width = 250;\r\n        traitCanvas.height = 250;\r\n        drawPreview()\r\n        }}>\r\n      <button><img src={button_default} alt=\"my image\" /></button>\r\n      <div class={\"button_text\"}>{\"Preview\"}</div>\r\n      </div>\r\n      <div class=\"button-wrapper\" onClick={() => {\r\n        sendTX()\r\n        }}>\r\n      <button><img src={button_default} alt=\"my image\" /></button>\r\n      <div class={\"button_text\"}>{\"Extract Trait\"}</div>\r\n      </div> \r\n      <div>{messageStatus}</div> \r\n      </div> \r\n    )\r\n}\r\n\r\nconst geneIndexertoArr = (index) => {\r\n  if (index % 2 == 0) {return index/2} else { return ((index - 1)/2)+9}\r\n}\r\n\r\nconst selectedGene = () => {\r\n  let geneIndex = selectedGeneIndex;\r\n  return (\r\n    <>\r\n    <img src={geneIcons[geneIndexertoArr(geneIndex)]}>      \r\n    </img>\r\n    <div class={\"GeneText\"}>\r\n    {geneDisasaemblerMapped(prop.geneSeq, geneIndex * 3) + \" \" + strDissasermbler(prop.strSeq, geneIndex * 3) + \"/100\"}\r\n    </div>\r\n    {(parseInt(strDissasermbler(prop.strSeq, geneIndex * 3)) == 100 && prop.geneSeq.substring(geneIndex*3, (geneIndex*3 )+ 3) !== \"000\") ? <img class={\"ValidityLong\"} src={icon_yes}></img> :<img class={\"ValidityLong\"} src={icon_no}></img>}\r\n    </>\r\n  )\r\n}\r\n\r\n\r\n  const extractDisplay = () => {\r\n    let geneIndex = selectedGeneIndex;\r\n    return (\r\n      <>\r\n      <div className={\"SelectedGene\"} id={\"GetTraitSelectedGene\"}> {selectedGene()}</div>\r\n      \r\n      <div className={\"UpgradeCanvasPreview\"} id={\"PreviewCanvasTrait\"}>\r\n        <div className={\"TextHeaderDiv\"}>Extracted Skeletoon preview:</div>\r\n        <canvas id=\"skeletoon_preview_canvas\" width=\"2000\" height=\"2000\"></canvas></div>\r\n      <div className={\"UpgradeCanvasPreview\"} id={\"TraitCanvas\"}>\r\n        <div className={\"TextHeaderDiv\"}>Extracted Trait preview:</div>\r\n        <canvas id=\"trait_preview_canvas\" width=\"2000\" height=\"2000\"></canvas></div>\r\n      <div className={\"ButtonsDisplay\"} id={\"ButtonsTrait\"}>{actionButtons()}</div>\r\n      </>\r\n    )\r\n  }\r\n\r\n  const geneDisasaemblerMapped = (sequence, index) => {\r\n    let geneSingle = sequence.substring(index, index + 3);\r\n    geneSingle = TraitMap[geneSingle][\"1\"][2];\r\n    return geneSingle;\r\n  };\r\n\r\n  const strDissasermbler = (sequence, index) => {\r\n    let strSingle = sequence.substring(index, index + 3);\r\n    return strSingle;\r\n  };\r\n\r\n  const allDisplaySingle = (geneIndex) => {\r\n    return (\r\n      <div class={\"GetSingleTrait\"} >\r\n      <img src={(geneIcons[geneIndexertoArr(geneIndex)])} onClick={() => {setselectedGeneIndex(((geneIndex))); setDisplaySettings(\"Single\")}}>      \r\n      </img>\r\n      <div class={\"GeneText\"} onClick={() => {setselectedGeneIndex(((geneIndex))); setDisplaySettings(\"Single\")}}>\r\n      {geneDisasaemblerMapped(prop.geneSeq, geneIndex * 3) + \" \" + strDissasermbler(prop.strSeq, geneIndex * 3) + \"/100\"}\r\n      </div>\r\n      {(parseInt(strDissasermbler(prop.strSeq, geneIndex * 3)) == 100 && prop.geneSeq.substring(geneIndex*3, (geneIndex*3 )+ 3) !== \"000\")? <img class={\"Validity\"} src={icon_yes} onClick={() => {setselectedGeneIndex(((geneIndex))); setDisplaySettings(\"Single\")}}></img> :<img class={\"Validity\"} src={icon_no} onClick={() => {setselectedGeneIndex(((geneIndex))); setDisplaySettings(\"Single\")}}></img>}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const listAllItemsf = geneIcons.map((gene, index) => (\r\n    <il class={\"GeneRow\"} id={\"Gene\" + listToGeneIndexer(index)} key={gene}>\r\n      {allDisplaySingle(index)}\r\n      <br></br>\r\n    </il>\r\n  ));\r\n\r\n  const allDisplay = () => {\r\n    \r\n    return (\r\n      <div className={\"TraitList\"} id={\"TraitListGetTrait\"}>\r\n            <ul>{listAllItemsf}</ul>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const settings = () => {\r\n      return (\r\n        <div class=\"btn-group\">\r\n        <div class=\"button-wrapper\" onClick={() => {setDisplaySettings(\"All\")}}>\r\n        <button><img src={button_default} alt=\"my image\" /></button>\r\n        <div class={\"button_text\"}>{\"All\"}</div>\r\n        </div>\r\n        <div class=\"button-wrapper\" id={\"SingleViewButton\"} onClick={() => {setDisplaySettings(\"Single\")}}>\r\n        <button><img src={button_default} alt=\"my image\" /></button>\r\n        <div class={\"button_text\"} >{\"Single\"}</div>\r\n        </div>  \r\n        </div> \r\n      )\r\n  \r\n  }\r\n\r\n  const actionDisplay = () => {\r\n    if (displaySettings === \"All\") {\r\n      return (\r\n        allDisplay()\r\n      )\r\n    } else {\r\n      return (\r\n        extractDisplay()\r\n      )\r\n    }\r\n\r\n  }\r\n\r\n  const traitSelector = () => {\r\n    return (\r\n      <>\r\n      <div id={\"GeneTextHeader\"}>{displaySettings === \"Single\" ? \"Select Gene to extract:\" : \"Your Genome:\"}</div>\r\n      <div className={\"GeneSelector\"}>{renderTraits()}</div>      \r\n\r\n      <div className={\"ActionDisplay\"} id={\"GetTraitDisplay\"}>\r\n      {displaySettings !== null ? actionDisplay() : \"\"}\r\n      </div>\r\n      <div className={\"DisplayManager\"}>{settings()}</div>\r\n      </>\r\n    )\r\n  }\r\n\r\n  const listItems = geneIcons.map((gene, index) => (\r\n    <il class={\"GeneRow\"} id={\"Gene\" + listToGeneIndexer(index)} key={gene}>\r\n      <img src={gene} onClick={() => {setselectedGeneIndex(listToGeneIndexer(index)); setDisplaySettings(\"Single\")}}></img>\r\n      <br></br>\r\n    </il>\r\n  ));\r\n\r\n  \r\n\r\n  const renderTraits = () => {\r\n    return (\r\n        <ul>{listItems}</ul>\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    let index = selectedGeneIndex\r\n    if (prop.skeletoonTokenId >= 10000) {\r\n      setMessageStatus(\"Only original 10 000 Skeletoons can extract traits\")\r\n    } else \r\n    if (prop.geneSeq.substring(index*3, (index*3 )+ 3) == \"000\") {\r\n      setMessageStatus(\"Can't extract Non-existing trait\")\r\n    } else\r\n    if (parseInt(strDissasermbler(prop.strSeq, index * 3)) < 100) {\r\n      setMessageStatus(\"Gene needs strength of 100 to be extracted\")\r\n    } else  {\r\n      setMessageStatus(\"Gene Extraction costs 100 Strength\")\r\n    }\r\n  }, [selectedGeneIndex, prop.skeletoonTokenId, prop.geneSeq, prop.strSeq])\r\n  return (\r\n    <div>{traitSelector()}</div>\r\n  )\r\n}\r\n\r\nexport default GetTrait","import React from 'react'\r\nimport \"../../../styles/Mint.css\";\r\nimport TraitMap from \"../../helpers/TraitMap.json\";\r\nimport RewardsMap from \"../../helpers/RewardsMap.json\";\r\nimport Web3 from \"web3\";\r\nimport { useEffect, useState } from \"react\";\r\nimport {\r\n  button_default,\r\n} from \"../../../data/canvassrc\";\r\nimport { drawSkeletoonFull } from '../../helpers/Renderer';\r\nimport { aSPSK, cTWSP, aTWSP, ctestnetSPSK, atestnetSPSK, cSPSK } from '../../helpers/Groups';\r\nimport { displayLoader } from '../../helpers/Loader';\r\n\r\nconst Mint = (prop) => {\r\n  const [constructor, setConstructor] = useState(0);\r\n  const [SPSKbalance, setSPSKbalance] = useState([]);\r\n  const [SPSKsupply, setSPSKsupply] = useState(null);\r\n  const [claimedTokens, setClaimedTokens] = useState([]);\r\n  const [mintAmount, setMintAmount] = useState(null);\r\n\r\n  const contractSPSK = ctestnetSPSK;\r\n  const contractTWSP = cTWSP;\r\n\r\n  const web3 = new Web3(Web3.givenProvider);\r\n\r\n  const mintTX = () => {\r\n\r\n    // check if approve trait all needed, check if approve all glyph needed, check if payed or not,\r\n    contractSPSK.methods.getPrice().call((err, result) => {\r\n      if (!err)\r\n      {\r\n        let price = web3.utils.fromWei(result, 'ether')\r\n        let priceInt = parseInt(price) * parseInt(mintAmount)\r\n        price = web3.utils.toWei(priceInt.toString())\r\n        let txData = contractSPSK.methods.mint(prop.address, mintAmount).encodeABI();\r\n        web3.eth.sendTransaction(\r\n          {\r\n            from: prop.address,\r\n            to: aSPSK,\r\n            value: price,\r\n            data: txData,\r\n          }).on('receipt', function(receipt) {\r\n            balanceSPSK()\r\n            fetchSPSKbalance()\r\n          });\r\n      }\r\n    })\r\n  }\r\n\r\n  const claimTX = () => {\r\n\r\n    // check if approve trait all needed, check if approve all glyph needed, check if payed or not,\r\n    let txData = contractTWSP.methods.claim(claimedTokens).encodeABI();\r\n      web3.eth.sendTransaction(\r\n        {\r\n          from: prop.address,\r\n          to: aTWSP,\r\n          data: txData,\r\n        }).on('receipt', function(receipt) {\r\n          \r\n        });\r\n  }\r\n\r\n  const balanceSPSK = () => {\r\n    contractSPSK.methods.totalSupply().call((err,result) => {\r\n      if(!err){\r\n        console.log(result)\r\n        setSPSKsupply(result)\r\n      } else {\r\n        console.log(err)\r\n        return err\r\n      }\r\n    })\r\n  }\r\n\r\n  const calcCost = () => {\r\n    /*\r\n    contractSPSK.methods.getPrice().call((err,result) => {\r\n      if(!err){\r\n        return result\r\n      } else {\r\n        return err\r\n      }\r\n    })*/\r\n  }\r\n\r\n  const mintOriginal = () => {\r\n    return(\r\n      <>\r\n      <div id={\"DisplayOGSupply\"}>\r\n        {SPSKsupply + \"/ 10 000 Spooky Skeletoons Minted\"}\r\n        <br></br>\r\n        {\"Enter amount you wish to mint and click Mint bellow\"}\r\n      </div>\r\n      <div id={\"InputBoxMint\"}>\r\n        <input className={\"inputMint\"} type=\"number\" placeholder={\"Amount\"} onChange={e => {setMintAmount(e.target.value)}}/>\r\n        {\"Cost \" + calcCost() + \" FTM\"}\r\n      </div>\r\n      <div id={\"MintButton\"}>\r\n      <div class=\"btn-group\">\r\n      <div class=\"button-wrapper\" onClick={() => {mintTX()}}>\r\n        <button><img src={button_default} alt=\"my image\" /></button>\r\n        <div class={\"button_text\"}>{\"Mint\"}</div>\r\n      </div>  \r\n      </div>  \r\n      </div>\r\n      </>\r\n    )\r\n  }\r\n\r\n  const setTokensToClaim = (idArr, amount) => {\r\n    if (idArr !== null) {\r\n      let splitArr = idArr.split(\",\")\r\n      setClaimedTokens(splitArr)\r\n    } \r\n    if (amount !== null){\r\n      setClaimedTokens(SPSKbalance.slice(0, parseInt(amount)))\r\n    }\r\n  }\r\n\r\n  const claimTWSP = () => {\r\n    return (\r\n      <>\r\n      <div id={\"ClaimInput\"}>\r\n        {SPSKbalance.length > 0 ? \r\n        <>\r\n        <input className={\"inputMint\"} type=\"text\" placeholder={\"TokenId,TokenId,TokenId\"} onChange={e => {setTokensToClaim(e.target.value, null)}}/>\r\n        <input className={\"inputMint\"} type=\"number\" placeholder={\"Amount\"} onChange={e => {setTokensToClaim(null, e.target.value)}}/>\r\n        </>\r\n        : \"\"}\r\n      </div>\r\n      <div id={\"ClaimButton\"}>\r\n      <div class=\"btn-group\">\r\n      <div class=\"button-wrapper\" onClick={() => {claimTX()}}>\r\n        <button><img src={button_default} alt=\"my image\" /></button>\r\n        <div class={\"button_text\"}>{\"Claim\"}</div>\r\n      </div>  \r\n      </div> \r\n      </div>\r\n      </>\r\n    )\r\n  }\r\n\r\n  const infoBox = () => {\r\n    return (\r\n      <div id={\"InfoBox\"}>\r\n        {SPSKbalance.length > 0 ? \"You have \" + SPSKbalance.length + \" ToonWorld Skeletoons that you can claim, with Ids: [\" + SPSKbalance + \"] Enter Token Id or Amount of tokens that you wish to claim bellow and click \\\"Claim\\\"\" : \"You have no ToonWorld Skeletoons that can be claimed. Mint Spooky Skeletoon and claim your ToonWorld Skeletoon \"}\r\n        <br></br>\r\n        <br></br>\r\n        <br></br>\r\n        <br></br>\r\n        <br></br>\r\n        <br></br>\r\n        <br></br>\r\n        {SPSKbalance.length > 0 ?\"Token IDs: ~~~~~~OR~~~~~~ Token Amount:\": \"\"}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const fetchSPSKbalance = () => {\r\n    contractSPSK.methods.walletOfOwner(prop.address).call(async (err, result) => {\r\n      if (!err) {\r\n        let temp = result\r\n        let unclaimed = [];\r\n        contractTWSP.methods.isTokenClaimedBatch(temp).call(async (err, result) => {\r\n          if (!err){\r\n            for (let i = 0; i < temp.length; i++){\r\n              if (result[i] == 0){\r\n                unclaimed = [...unclaimed, temp[i]];\r\n              }\r\n            }\r\n            setSPSKbalance(unclaimed)\r\n          }\r\n        })\r\n      } else {\r\n        \r\n      }\r\n    });\r\n  }\r\n\r\n  useEffect( () => {\r\n    fetchSPSKbalance()\r\n    balanceSPSK()\r\n  },[prop.address])\r\n\r\n  return (\r\n    <>\r\n    {mintOriginal()}\r\n    {claimTWSP()}\r\n    {infoBox()}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Mint","import React from \"react\";\r\nimport \"../../../styles/Profile.css\";\r\nimport TraitMap from \"../../helpers/TraitMap.json\";\r\nimport RewardsMap from \"../../helpers/RewardsMap.json\";\r\nimport Web3 from \"web3\";\r\nimport { useEffect, useState } from \"react\";\r\nimport geneDataAll from \"../../helpers/geneDataAll.json\";\r\nimport {\r\n  icon_Bg_D,\r\n  icon_Bg_M,\r\n  icon_Body_D,\r\n  icon_Body_M,\r\n  icon_Cape_D,\r\n  icon_Cape_M,\r\n  icon_Eye_D,\r\n  icon_Eye_M,\r\n  icon_Hat_D,\r\n  icon_Hat_M,\r\n  icon_Head_D,\r\n  icon_Head_M,\r\n  icon_Item_D,\r\n  icon_Item_M,\r\n  icon_Mouth_D,\r\n  icon_Mouth_M,\r\n  icon_Pet_D,\r\n  icon_Pet_M,\r\n} from \"../../../data/canvassrc\";\r\nimport { cTWRewards } from \"../../helpers/Groups\";\r\n// Add rewards by trait, and rewards/ locked rewards on side\r\nconst Profile = (prop) => {\r\n  const [pendingRewards, setPendingRewards] = useState(0);\r\n  const [timeLocked, setTimeLocked] = useState({dateLock: new Date()});\r\n  const [unlockDateString, setUnlockDateString] = useState(\"\");\r\n\r\n\r\n  const contract = cTWRewards;\r\n\r\n  let genes = prop.geneSeq;\r\n  let geneStrength = prop.strSeq;\r\n  let geneIcons = [\r\n    icon_Bg_D,\r\n    icon_Pet_D,\r\n    icon_Body_D,\r\n    icon_Mouth_D,\r\n    icon_Head_D,\r\n    icon_Eye_D,\r\n    icon_Hat_D,\r\n    icon_Item_D,\r\n    icon_Cape_D,\r\n    icon_Bg_M,\r\n    icon_Pet_M,\r\n    icon_Body_M,\r\n    icon_Mouth_M,\r\n    icon_Head_M,\r\n    icon_Eye_M,\r\n    icon_Hat_M,\r\n    icon_Item_M,\r\n    icon_Cape_M,\r\n  ];\r\n  let totalRewards = { TWB: 0, Traits: 0, Glyphs: [] };\r\n  // FIX THIS\r\n  let TWBrewardMultis = [2, 1];\r\n  let rewardClaims;\r\n\r\n  const rewardMapper = (rewardGene, _str) => {\r\n    let str = parseInt(_str);\r\n    let RewardString = \"\";\r\n    if (str != \"000\") {\r\n      let tempValue = parseInt(str) * parseInt(rewardGene[1]) * TWBrewardMultis[0] * TWBrewardMultis[1];\r\n      RewardString += tempValue + \" $TWB \";\r\n      totalRewards.TWB += tempValue;\r\n    }\r\n    if (rewardGene[0] == 4 || rewardGene[0] == 7) {\r\n      totalRewards.Traits += str;\r\n      if (str > 1) {\r\n        RewardString += str + \" Contest Entries\";\r\n      } \r\n    }\r\n    if (rewardGene[0] == 6 || rewardGene[0] == 7) {\r\n      if (Math.floor((str/10)* rewardGene[3]) > 1) {\r\n        let tempString = \" [Glyph: \" + rewardGene[4] + \" (STR: \" +Math.floor((str/10)* rewardGene[3]) + \") ]\";\r\n        totalRewards.Glyphs.push(tempString.substring(1));\r\n        RewardString += tempString;\r\n      } \r\n    }\r\n    console.log(totalRewards);\r\n    return RewardString;\r\n  };\r\n\r\n  const geneDisasaemblerMapped = (sequence, index) => {\r\n    let geneSingle = sequence.substring(index, index + 3);\r\n    geneSingle = TraitMap[geneSingle][\"1\"][2];\r\n    return geneSingle;\r\n  };\r\n\r\n  const strDissasermbler = (sequence, index) => {\r\n    let strSingle = sequence.substring(index, index + 3);\r\n    return strSingle;\r\n  };\r\n\r\n  const listToGeneIndexer = (index) => {\r\n    if (index < 9) {\r\n      return index * 2;\r\n    } else {\r\n      return (index - 9) * 2 + 1;\r\n    }\r\n  };\r\n\r\n  const listItems = geneIcons.map((gene, index) => (\r\n    <il class={\"GeneRow\"} id={\"Gene\" + listToGeneIndexer(index)} key={gene}>\r\n      <img src={gene}></img>\r\n      <div class={\"GeneText\"}>\r\n        {geneDisasaemblerMapped(genes, listToGeneIndexer(index) * 3) + \" \" + strDissasermbler(geneStrength, listToGeneIndexer(index) * 3) + \"/100\"}\r\n        <br></br>\r\n        {rewardMapper(RewardsMap[genes.substring(listToGeneIndexer(index) * 3, listToGeneIndexer(index) * 3 + 3)], strDissasermbler(geneStrength, listToGeneIndexer(index) * 3))}\r\n      </div>\r\n      <br></br>\r\n    </il>\r\n  ));\r\n\r\n  const renderTraits = () => {\r\n    return (\r\n      <div className={\"TraitList\"}>\r\n        <ul>{listItems}</ul>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const nextReward = () => {\r\n    contract.methods.getTimeLock(prop.skeletoonTokenId).call(async (err, result) => {\r\n      if (!err) {\r\n        setTimeLocked({dateLock: new Date(result*1000)})\r\n\r\n      } else {\r\n        console.log(\"ERROR getting timeLock\");\r\n      }\r\n    });\r\n  }\r\n\r\n  const renderRewardsTotal = () => {\r\n    contract.methods.getAvailableRewards(prop.skeletoonTokenId).call(async (err, result) => {\r\n      if (!err) {\r\n        setPendingRewards(result);\r\n      } else {\r\n        console.log(\"ERROR getting available rewards\");\r\n      }\r\n    });\r\n\r\n    let GlyphStr = \"\";\r\n    if (pendingRewards != 0) {\r\n      for (let i = 0; i < totalRewards.Glyphs.length; i++) {\r\n        GlyphStr += totalRewards.Glyphs[i] + \" x\" + pendingRewards;\r\n      }\r\n      return (\r\n        <div id={\"ActiveRewards\"} className={\"RewardsBox\"}>\r\n          {\"Total Rewards:\"}\r\n          <br></br>\r\n          <br></br>\r\n          {totalRewards.TWB * pendingRewards + \"$ Toonbucks\"}\r\n          <br></br>\r\n          {totalRewards.Traits * pendingRewards + \" Contest Entries\"}\r\n          <br></br>\r\n          {GlyphStr}\r\n          <br></br>\r\n          <div class=\"rewardNextUnlock\">{unlockDateString}</div>\r\n        </div>\r\n      );\r\n    } else {\r\n      for (let i = 0; i < totalRewards.Glyphs.length; i++) {\r\n        GlyphStr += totalRewards.Glyphs[i] + \" x1 \";\r\n      }\r\n      return (\r\n        <div id={\"PendingRewards\"} className={\"RewardsBox\"}>\r\n          {\"Total Rewards:\"}\r\n          <br></br>\r\n          <br></br>\r\n          {totalRewards.TWB + \"$ Toonbucks\"}\r\n          <br></br>\r\n          {totalRewards.Traits + \" Contest Entries\"}\r\n          <br></br>\r\n          {GlyphStr}\r\n          <div class=\"rewardNextUnlock\">{unlockDateString}</div>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  const renderButton = () => {};\r\n\r\n  //ADD support for gen2 Later\r\n  const unixTimeStampToNextReward = (timeStamp) => {\r\n    let claimedStamp\r\n    if (pendingRewards == 0) {\r\n      claimedStamp = 28800 - timeStamp\r\n    }\r\n    if (pendingRewards == 1) {\r\n      claimedStamp = 86400 - timeStamp\r\n    }\r\n    if (pendingRewards == 2) {\r\n      claimedStamp = 172800 - timeStamp\r\n    }\r\n    if (pendingRewards == 3) {\r\n      return \"Maximum rewards stacked. Claim rewards to stack new rewards.\"\r\n    } else \r\n    {\r\n      let hours = Math.floor(claimedStamp/3600).toString()\r\n      if (hours.length == 1) {hours = \"0\" + hours}\r\n      let minutes = Math.floor((claimedStamp - hours*3600)/60).toString()\r\n      if (minutes.length == 1) {minutes = \"0\" + minutes}\r\n      let seconds = Math.floor((claimedStamp - hours*3600)- minutes*60).toString()\r\n      if (seconds.length == 1) {seconds = \"0\" + seconds}\r\n      if (timeStamp / 3600 > 87600){\r\n        return \"Claim your First Reward to stack additional rewards\"\r\n      } else {\r\n        return \"Next reward will be stacked in: \" + hours + \":\" + minutes + \":\" + seconds\r\n      }\r\n    }   \r\n  }\r\n\r\n  const profileView = () => {\r\n    return (\r\n      <>\r\n        <div id=\"ProfileHeaderM\">{\"Skeletoon Traits:\"}</div>\r\n        {renderTraits()}\r\n        {renderRewardsTotal()}\r\n      </>\r\n    );\r\n  };\r\n\r\n  \r\n\r\n  useEffect(() => {\r\n    var today = new Date();\r\n    let unixTimeLocked = ((new Date(today.getTime())) - timeLocked.dateLock.getTime()) / 1000\r\n    setUnlockDateString(unixTimeStampToNextReward(unixTimeLocked))\r\n  }, [timeLocked])\r\n\r\n  useEffect(() => {\r\n    nextReward()\r\n  }, [prop.skeletoonTokenId])\r\n\r\n  return <div>{profileView()}</div>;\r\n};\r\n\r\nexport default Profile;\r\n","import React from \"react\";\r\nimport \"../../../styles/Rewards.css\";\r\nimport TraitMap from \"../../helpers/TraitMap.json\";\r\nimport RewardsMap from \"../../helpers/RewardsMap.json\";\r\nimport Web3 from \"web3\";\r\nimport { useEffect, useState } from \"react\";\r\nimport geneDataAll from \"../../helpers/geneDataAll.json\";\r\nimport {\r\n  icon_Bg_D,\r\n  icon_Bg_M,\r\n  icon_Body_D,\r\n  icon_Body_M,\r\n  icon_Cape_D,\r\n  icon_Cape_M,\r\n  icon_Eye_D,\r\n  icon_Eye_M,\r\n  icon_Hat_D,\r\n  icon_Hat_M,\r\n  icon_Head_D,\r\n  icon_Head_M,\r\n  icon_Item_D,\r\n  icon_Item_M,\r\n  icon_Mouth_D,\r\n  icon_Mouth_M,\r\n  icon_Pet_D,\r\n  icon_Pet_M,\r\n  rewardsAll,\r\n  rewardsSingle,\r\n} from \"../../../data/canvassrc\";\r\nimport { aTWRewards, cTWRewards } from \"../../helpers/Groups\";\r\n// Add rewards by trait, and rewards/ locked rewards on side\r\nconst Rewards = (prop) => {\r\n  const [pendingRewards, setPendingRewards] = useState(0);\r\n  const [timeLocked, setTimeLocked] = useState({dateLock: new Date()});\r\n  const [unlockDateString, setUnlockDateString] = useState(\"\");\r\n  const [ticketsAll, setAllTickets] = useState(null);\r\n  const [ticketsPersonal, setPersonalTickerts] = useState(null);\r\n\r\n\r\n  const contract = cTWRewards;\r\n\r\n  let genes = prop.geneSeq;\r\n  let geneStrength = prop.strSeq;\r\n  let geneIcons = [\r\n    icon_Bg_D,\r\n    icon_Pet_D,\r\n    icon_Body_D,\r\n    icon_Mouth_D,\r\n    icon_Head_D,\r\n    icon_Eye_D,\r\n    icon_Hat_D,\r\n    icon_Item_D,\r\n    icon_Cape_D,\r\n    icon_Bg_M,\r\n    icon_Pet_M,\r\n    icon_Body_M,\r\n    icon_Mouth_M,\r\n    icon_Head_M,\r\n    icon_Eye_M,\r\n    icon_Hat_M,\r\n    icon_Item_M,\r\n    icon_Cape_M,\r\n  ];\r\n  let totalRewards = { TWB: 0, Traits: 0, Glyphs: [] };\r\n  let TWBrewardMultis = [2, 1];\r\n  let rewardClaims;\r\n\r\n  const web3 = new Web3(Web3.givenProvider);\r\n\r\n  const rewardMapper = (rewardGene, _str) => {\r\n    let str = parseInt(_str);\r\n    let RewardString = \"\";\r\n    if (str != \"000\") {\r\n      let tempValue = parseInt(str) * parseInt(rewardGene[1]) * TWBrewardMultis[0] * TWBrewardMultis[1];\r\n      RewardString += tempValue + \" $TWB \";\r\n      totalRewards.TWB += tempValue;\r\n    }\r\n    if (rewardGene[0] == 4 || rewardGene[0] == 7) {\r\n      totalRewards.Traits += str;\r\n      if (str > 1) {\r\n        RewardString += str + \" Contest Entries\";\r\n      } \r\n    }\r\n    if (rewardGene[0] == 6 || rewardGene[0] == 7) {\r\n      if (Math.floor((str/10)* rewardGene[3]) > 1) {\r\n        let tempString = \" [Glyph: \" + rewardGene[4] + \" (STR: \" +Math.floor((str/10)* rewardGene[3]) + \") ]\";\r\n        totalRewards.Glyphs.push(tempString.substring(1));\r\n        RewardString += tempString;\r\n      } \r\n    }\r\n    console.log(totalRewards);\r\n    return RewardString;\r\n  };\r\n\r\n  const geneDisasaemblerMapped = (sequence, index) => {\r\n    let geneSingle = sequence.substring(index, index + 3);\r\n    geneSingle = TraitMap[geneSingle][\"1\"][2];\r\n    return geneSingle;\r\n  };\r\n\r\n  const strDissasermbler = (sequence, index) => {\r\n    let strSingle = sequence.substring(index, index + 3);\r\n    return strSingle;\r\n  };\r\n\r\n  const listToGeneIndexer = (index) => {\r\n    if (index < 9) {\r\n      return index * 2;\r\n    } else {\r\n      return (index - 9) * 2 + 1;\r\n    }\r\n  };\r\n\r\n  const listItems = geneIcons.map((gene, index) => (\r\n    <il class={\"GeneRow\"} id={\"Gene\" + listToGeneIndexer(index)} key={gene}>\r\n      <img src={gene}></img>\r\n      <div class={\"GeneText\"}>\r\n        {geneDisasaemblerMapped(genes, listToGeneIndexer(index) * 3) + \" \" + strDissasermbler(geneStrength, listToGeneIndexer(index) * 3) + \"/100\"}\r\n        <br></br>\r\n        {rewardMapper(RewardsMap[genes.substring(listToGeneIndexer(index) * 3, listToGeneIndexer(index) * 3 + 3)], strDissasermbler(geneStrength, listToGeneIndexer(index) * 3))}\r\n      </div>\r\n      <br></br>\r\n    </il>\r\n  ));\r\n\r\n  const renderTraits = () => {\r\n    return (\r\n      <div className={\"TraitList\"} id={\"InvGenes\"}>\r\n        <ul>{listItems}</ul>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const nextReward = () => {\r\n    contract.methods.getTimeLock(prop.skeletoonTokenId).call(async (err, result) => {\r\n      if (!err) {\r\n        setTimeLocked({dateLock: new Date(result*1000)})\r\n\r\n      } else {\r\n        console.log(\"ERROR getting timeLock\");\r\n      }\r\n    });\r\n  }\r\n\r\n  const renderRewardsTotal = () => {\r\n    contract.methods.getAvailableRewards(prop.skeletoonTokenId).call(async (err, result) => {\r\n      if (!err) {\r\n        setPendingRewards(result);\r\n      } else {\r\n        console.log(\"ERROR getting available rewards\");\r\n      }\r\n    });\r\n\r\n    let GlyphStr = \"\";\r\n    if (pendingRewards != 0) {\r\n      for (let i = 0; i < totalRewards.Glyphs.length; i++) {\r\n        GlyphStr += totalRewards.Glyphs[i] + \" x\" + pendingRewards;\r\n      }\r\n      return (\r\n        <div id={\"ActiveRewardsAlt\"} className={\"RewardsBox\"}>\r\n          {\"Rewards:\"}\r\n          <br></br>\r\n          <br></br>\r\n          {totalRewards.TWB * pendingRewards + \" Toonbucks\"}\r\n          <br></br>\r\n          {totalRewards.Traits * pendingRewards + \" Contest Entries\"}\r\n          <br></br>\r\n          {GlyphStr}\r\n          <br></br>\r\n          <div class=\"rewardNextUnlock\">{unlockDateString}</div>\r\n        </div>\r\n      );\r\n    } else {\r\n      for (let i = 0; i < totalRewards.Glyphs.length; i++) {\r\n        GlyphStr += totalRewards.Glyphs[i] + \" x1 \";\r\n      }\r\n      return (\r\n        <div id={\"PendingRewardsAlt\"} className={\"RewardsBox\"}>\r\n          {\"Total Rewards:\"}\r\n          <br></br>\r\n          <br></br>\r\n          {totalRewards.TWB + \" Toonbucks\"}\r\n          <br></br>\r\n          {totalRewards.Traits + \" Contest Entries\"}\r\n          <br></br>\r\n          {GlyphStr}\r\n          <div class=\"rewardNextUnlock\">{unlockDateString}</div>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  const renderButton = () => {};\r\n\r\n  //ADD support for gen2 Later\r\n  const unixTimeStampToNextReward = (timeStamp) => {\r\n    let claimedStamp\r\n    if (pendingRewards == 0) {\r\n      claimedStamp = 28800 - timeStamp\r\n    }\r\n    if (pendingRewards == 1) {\r\n      claimedStamp = 86400 - timeStamp\r\n    }\r\n    if (pendingRewards == 2) {\r\n      claimedStamp = 172800 - timeStamp\r\n    }\r\n    if (pendingRewards == 3) {\r\n      return \"Maximum rewards stacked. Claim rewards to stack new rewards.\"\r\n    } else \r\n    {\r\n      let hours = Math.floor(claimedStamp/3600).toString()\r\n      if (hours.length == 1) {hours = \"0\" + hours}\r\n      let minutes = Math.floor((claimedStamp - hours*3600)/60).toString()\r\n      if (minutes.length == 1) {minutes = \"0\" + minutes}\r\n      let seconds = Math.floor((claimedStamp - hours*3600)- minutes*60).toString()\r\n      if (seconds.length == 1) {seconds = \"0\" + seconds}\r\n      if (timeStamp / 3600 > 87600){\r\n        return \"Claim your First Reward to stack additional rewards\"\r\n      } else {\r\n        return \"Next reward will be stacked in: \" + hours + \":\" + minutes + \":\" + seconds\r\n      }\r\n    }   \r\n  }\r\n  \r\n  \r\n\r\n  const claimAll = () => {\r\n    /*let txData = cTWRewards.methods.claimAllRewards().encodeABI();\r\n    web3.eth.sendTransaction(\r\n      {\r\n        from: prop.address,\r\n        to: aTWRewards,\r\n        data: txData,\r\n      }).on('receipt', function(receipt) {\r\n        setPendingRewards(0)\r\n      });*/\r\n      cTWRewards.methods.allTickets().call((err,result) => {\r\n        if (!err) {\r\n          setAllTickets(result)\r\n          cTWRewards.methods.getPersonalTickets(prop.skeletoonTokenId).call((er, result) => {\r\n            if (!err) {\r\n            setPersonalTickerts(result)\r\n          }\r\n          })\r\n        }\r\n      })\r\n  }\r\n\r\n  const claimSingle = () => {\r\n    let skeletoonID = prop.skeletoonTokenId;\r\n    // check if approve trait all needed, check if approve all glyph needed, check if payed or not,\r\n      let txData = cTWRewards.methods.claimSingleReward(skeletoonID).encodeABI();\r\n      web3.eth.sendTransaction(\r\n        {\r\n          from: prop.address,\r\n          to: aTWRewards,\r\n          data: txData,\r\n        }).on('receipt', function(receipt) {\r\n          setPendingRewards(0)\r\n        });\r\n\r\n  }\r\n\r\n  const rewardButtons = () => {\r\n    return(\r\n      <>\r\n      <div id={\"RewardsAllButton\"}>\r\n        <img src={rewardsAll} class={\"RewardImg\"} onClick={() => {claimAll()}}></img>\r\n        <br></br>\r\n        {\"View NFT Contest Entries\"}\r\n      </div>\r\n        {pendingRewards > 0 ? <div id={\"RewardsSingleButton\"}>\r\n        <img src={rewardsSingle} class={\"RewardImg\"} onClick={() => {claimSingle()}}></img>\r\n        <br></br>\r\n        {\"Claim Single Skeletoon Reward\"}</div>:\"\"}\r\n      </>\r\n    )\r\n  }\r\n\r\n\r\n  const renderContest = () => {\r\n    if (ticketsAll !== null && ticketsPersonal !== null)\r\n    {return (\r\n      <div id={\"Contest\"} className={\"RewardsBox\"}>\r\n        <div id=\"contest_text1\">{\"NFT Contest\"}<br></br>{\"Total claims across ToonWorld: \"+ticketsAll}</div>\r\n\r\n        <div id=\"contest_text2\">{\"This skeletoon currently has: \"+ticketsPersonal + \" Claims\"}</div>\r\n      </div>\r\n    )}\r\n    else {\r\n      <></>\r\n    }\r\n  }\r\n\r\n  const profileView = () => {\r\n    return (\r\n      <>\r\n        {renderTraits()}\r\n        <div id={\"RewardButtons\"}>{rewardButtons()}</div>\r\n        <div id={\"RewardSingle\"}>{renderRewardsTotal()}</div>\r\n        <div id={\"ContestBox\"}>{renderContest()}</div>\r\n      </>\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    var today = new Date();\r\n    let unixTimeLocked = ((new Date(today.getTime())) - timeLocked.dateLock.getTime()) / 1000\r\n    setUnlockDateString(unixTimeStampToNextReward(unixTimeLocked))\r\n  }, [timeLocked])\r\n\r\n  useEffect(() => {\r\n    nextReward()\r\n  }, [prop.skeletoonTokenId])\r\n\r\n  return <div>{profileView()}</div>;\r\n};\r\n\r\nexport default Rewards;\r\n","import React from 'react'\r\nimport \"../../../styles/Summon.css\";\r\nimport TraitMap from \"../../helpers/TraitMap.json\";\r\nimport RewardsMap from \"../../helpers/RewardsMap.json\";\r\nimport Web3 from \"web3\";\r\nimport { useEffect, useState } from \"react\";\r\nimport {\r\n  button_default,\r\n  icon_Bg_D,\r\n  icon_Body_D,\r\n  icon_Cape_D,\r\n  icon_Eye_D,\r\n  icon_Hat_D,\r\n  icon_Head_D,\r\n  icon_Item_D,\r\n  icon_minus,\r\n  icon_Mouth_D,\r\n  icon_no,\r\n  icon_Pet_D,\r\n  icon_plus,\r\n  icon_yes,\r\n  traitInv,\r\n} from \"../../../data/canvassrc\";\r\nimport { drawSkeletoonFull } from '../../helpers/Renderer';\r\nimport { aTWG, aTWLogic, aTWSP, aTWT, cTWG, cTWLogic, cTWSP, cTWT } from '../../helpers/Groups';\r\nimport { displayLoader } from '../../helpers/Loader';\r\n// Select each trait send tx\r\nconst Summon = (prop) => {\r\n  const emptyTrait = {id: null, type:\"000\"}\r\n  const [selectedGeneIndex, setselectedGeneIndex] = useState(0); // Req for TX\r\n  const [traitIds, setTraitIds] = useState([]); // Needed For TX\r\n  const [usedTraits, setUsedTraits] = useState([emptyTrait,emptyTrait,emptyTrait,emptyTrait,emptyTrait,emptyTrait,emptyTrait,emptyTrait,emptyTrait]);\r\n  const [fetching, setFetching] = useState(\"None\");\r\n  const [approvalState, setApprovalState] = useState(0);\r\n\r\n  const web3 = new Web3(Web3.givenProvider);\r\n\r\n  const traitContract = cTWT;\r\n  let geneIcons = [\r\n    icon_Bg_D,\r\n    icon_Pet_D,\r\n    icon_Body_D,\r\n    icon_Mouth_D,\r\n    icon_Head_D,\r\n    icon_Eye_D,\r\n    icon_Hat_D,\r\n    icon_Item_D,\r\n    icon_Cape_D\r\n  ];\r\n\r\n  const previewCanvas = () => {\r\n    return (\r\n      <canvas id=\"skeletoon_summon_canvas\" width=\"2000\" height=\"2000\"></canvas>\r\n    )\r\n  }\r\n\r\n  const previewDraw = () => {\r\n    let pStr = \"000000000000000000000000000000000000000000000000000000\";\r\n    let summonArr = usedTraits\r\n    let pGene = \"\";\r\n    summonArr.forEach(trait => {\r\n      let temp = trait.type;\r\n      for (let i = 0; i<3 ;i++){\r\n        if (temp.length < 3) {\r\n          temp = \"0\" + temp\r\n        }\r\n      }\r\n      pGene = pGene + temp + \"000\"\r\n    });\r\n    drawSkeletoonFull(pGene, pStr, 'skeletoon_summon_canvas', 0, 1, 500)\r\n  } \r\n\r\n  const sendTX = () => {\r\n    let approvals = approvalState;\r\n    let usedTraitIDs = [];\r\n    for (let i=0; i< 9; i++){\r\n      usedTraitIDs[i] = usedTraits[i].id;\r\n    }\r\n    // check if approve trait all needed, check if approve all glyph needed, check if payed or not,\r\n    if (approvals % 2  === 0){\r\n      let txData = cTWT.methods.setApprovalForAll(aTWLogic, \"1\").encodeABI();\r\n      web3.eth.sendTransaction(\r\n        {\r\n          from: prop.address,\r\n          to: aTWT,\r\n          data: txData,\r\n        }).on('receipt', function(receipt) {\r\n          setApprovalState(1)\r\n        });\r\n    } else \r\n    cTWLogic.methods.summonFee().call(async (err, result) => {\r\n\r\n      if (approvals === 3){\r\n\r\n        let txData = cTWLogic.methods.summonSkeletoon(usedTraitIDs).encodeABI();\r\n        web3.eth.sendTransaction(\r\n          {\r\n            from: prop.address,\r\n            to: aTWLogic,\r\n            value: result,\r\n            data: txData,\r\n          }).on('receipt', function(receipt) {\r\n            // ???\r\n          });\r\n      }\r\n    })  \r\n  }\r\n\r\n  const actionButtons = () => {\r\n    return (\r\n      <div class=\"btn-group\">\r\n      <div class=\"button-wrapper\" onClick={() => {\r\n        var myCanvas = document.getElementById('skeletoon_summon_canvas');\r\n        myCanvas.width = 2000;\r\n        myCanvas.height = 2000;\r\n        previewDraw()\r\n        }}>\r\n      <button><img src={button_default} alt=\"my image\" /></button>\r\n      <div class={\"button_text\"}>{\"Preview\"}</div>\r\n      </div>\r\n      { approvalState >= 2\r\n      ?\r\n      <div class=\"button-wrapper\" id={\"SingleViewButton\"} onClick={() => {sendTX()}}>\r\n      <button><img src={button_default} alt=\"my image\" /></button>\r\n      <div class={\"button_text\"} >{approvalState == 3 ? \"Summon\": \"Approve Traits\"}</div>\r\n      </div>  \r\n      : \"\"}\r\n      </div> \r\n    )\r\n\r\n}\r\n\r\n  const traitBalance = () => {\r\n    if (fetching != \"None\" ){\r\n      //Throw Error to Div\r\n      return;\r\n    }\r\n    if (traitIds.length > 0){\r\n      return;\r\n    }\r\n    setFetching(\"Traits\");\r\n    setTraitIds([]);\r\n    fetchInventoryTrait()\r\n    return (\r\n      \"LOADING\"\r\n    )\r\n  }\r\n\r\n  const fetchInventoryTrait = () => {\r\n    traitContract.methods.walletOfOwner(prop.address).call(async (err,result) => {\r\n        if (!err){\r\n          traitContract.methods.getTraitPropertiesBatch(result).call( async (err,result) => {\r\n                let invTemp = [];\r\n                for (let i = 0; i < result.length; i= i+2){\r\n                    let temp = {id: result[i], type: result[i+1]}\r\n                    invTemp = [...invTemp, temp];\r\n                } \r\n                setTraitIds(invTemp);\r\n                setFetching(\"Done\");\r\n            })\r\n        }\r\n    })\r\n  }\r\n\r\n\r\n\r\n  function filterTrait(trait) {\r\n    let temp = trait.type\r\n    for (let i = 0 ; i<3 ;i++){\r\n      if (temp.length < 3)\r\n      {temp = \"0\"+temp}\r\n    }\r\n    console.log(temp)\r\n    console.log(typeof temp)\r\n      return (TraitMap[temp][\"1\"][3] == selectedGeneIndex)\r\n  }\r\n\r\n  const traitSelectedFromInv = (trait) => {\r\n    const newUsed = [...usedTraits];\r\n    let index = selectedGeneIndex /2\r\n    newUsed[index] = trait\r\n    if (newUsed !== usedTraits)\r\n    {\r\n      setUsedTraits(newUsed)\r\n    }\r\n  }\r\n\r\n  const traitInventoryDisplay = () => {\r\n    let traits = traitIds;\r\n    // FIX img src\r\n    const inventoryTraitDiv = traits.filter(trait => filterTrait(trait)).map((trait, index) => (\r\n      <il class={\"invDiv\"} id={\"invTrait\" + trait.id} key={trait.id}>\r\n        <img src={traitInv + \"/\"+ trait.type + \".png\"} onClick={() => {traitSelectedFromInv(trait)}}></img>\r\n      </il>\r\n    ));   \r\n    return (<ul>{inventoryTraitDiv}</ul>)\r\n  }\r\n\r\n  const displayInventory = () => {\r\n    if (fetching ==\"None\") {\r\n      traitBalance()\r\n    }\r\n    if (fetching == \"Traits\") {\r\n      return (\r\n        <div>{\"LOADING\"}</div>\r\n      )\r\n    } else if (fetching == \"Done\") {\r\n      return (\r\n       traitInventoryDisplay()\r\n      )\r\n    } else {return(<></>)}\r\n   }\r\n\r\n  const isTraitAdded = ( text ) => {\r\n    let tempText = text\r\n      for (let i=0; i<3; i++){\r\n        if (tempText.length < 3) {\r\n          return tempText = \"0\"+tempText\r\n        }\r\n      }\r\n  } \r\n\r\n\r\n\r\n  const listItems = geneIcons.map((gene, index) => (\r\n    <il class={\"GeneRow\"} id={\"Gene\" + index} key={gene}>\r\n      <img src={gene} onClick={() => {setselectedGeneIndex((index*2))}}></img>\r\n      {<>{(usedTraits[index].id !== null) ? \r\n      <><img src={traitInv + \"/\"+ usedTraits[index].type + \".png\"} class={\"addedTraitToSummon\"} onClick={() => {setselectedGeneIndex((index*2))}}></img>\r\n      <img class={\"ValidityLong\"} src={icon_yes} onClick={() => {setselectedGeneIndex((index*2))}}></img>\r\n      </> :\r\n      <><div class={\"GeneTextAlt\"} onClick={() => {setselectedGeneIndex((index*2))}}>{\"Trait required\"}</div><img class={\"ValidityLong\"} src={icon_no} onClick={() => {setselectedGeneIndex((index*2))}}></img></>}</>}\r\n      <br></br>\r\n    </il>\r\n  ));\r\n\r\n  const renderTraits = () => {\r\n    return (\r\n        <ul>{listItems}</ul>\r\n    );\r\n  };\r\n\r\n  useEffect(()=>{\r\n    let Arr = usedTraits\r\n    let counter = 0;\r\n    for (let i =0; i<9;i++){\r\n      if (Arr[i].id !== null) {\r\n        counter++;\r\n        console.log(counter)\r\n      }\r\n    }\r\n    let tempApproval = approvalState\r\n    if (counter === 9 && (tempApproval % 2) == 0){\r\n      traitContract.methods.isApprovedForAll(prop.address, aTWLogic).call( async(err, result) => {\r\n        if (result == true) {\r\n          setApprovalState(3)\r\n        }\r\n      });\r\n    }\r\n    else if (counter === 9 && tempApproval < 2){\r\n      setApprovalState(2)\r\n    }\r\n  },[usedTraits, approvalState])\r\n\r\n  return (\r\n    <div>\r\n      <div id=\"SummonHeaderM\">{\"Burn 9 Traits to Summon Skeletoon\"}</div>\r\n      <div id=\"SummonHeader1\">Select Trait</div>\r\n      <div id=\"SummonHeader2\">Inventory</div>\r\n      <div id={\"TraitSelector\"}>{renderTraits()}</div>\r\n      <div id={\"SummonInventory\"}>{displayInventory()}</div>\r\n      <div id={\"SummonButtons\"}>{actionButtons()}</div>\r\n      <div id={\"SummonCanvas\"}>{previewCanvas()}</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Summon","import React from 'react'\r\nimport \"../../../styles/Upgrade.css\";\r\nimport TraitMap from \"../../helpers/TraitMap.json\";\r\nimport RewardsMap from \"../../helpers/RewardsMap.json\";\r\nimport Web3 from \"web3\";\r\nimport { useEffect, useState } from \"react\";\r\nimport {\r\n  button_default,\r\n  glyphDefault,\r\n  glyphInv,\r\n  icon_Bg_D,\r\n  icon_Bg_M,\r\n  icon_Body_D,\r\n  icon_Body_M,\r\n  icon_Cape_D,\r\n  icon_Cape_M,\r\n  icon_Eye_D,\r\n  icon_Eye_M,\r\n  icon_Hat_D,\r\n  icon_Hat_M,\r\n  icon_Head_D,\r\n  icon_Head_M,\r\n  icon_Item_D,\r\n  icon_Item_M,\r\n  icon_minus,\r\n  icon_Mouth_D,\r\n  icon_Mouth_M,\r\n  icon_Pet_D,\r\n  icon_Pet_M,\r\n  icon_plus,\r\n  traitInv,\r\n} from \"../../../data/canvassrc\";\r\nimport { drawSkeletoonFull } from '../../helpers/Renderer';\r\nimport { aTWG, aTWLogic, aTWT, cTWG, cTWLogic, cTWSP, cTWT } from '../../helpers/Groups';\r\nimport { displayLoader } from '../../helpers/Loader';\r\n\r\n\r\n// Select trait, add relevant items, send TX , preview for upgrade\r\nconst Upgrade = (prop) => {\r\n  const [selectedGeneIndex, setselectedGeneIndex] = useState(null); // Req for TX\r\n  const [usedPoints, setUsedPoints] = useState(0) //  Req for TX\r\n  const [timeLocked, setTimeLocked] = useState({dateLock: new Date()}); // Req for Points\r\n  const [availablePoints, setAvailablePoint] = useState(0); // Req for Points\r\n  const [unlockDateString, setUnlockDateString] = useState(\"\"); // Req for Points\r\n  const [pointCost, setPointCost] = useState(\"\"); // May be needed for TX ?\r\n\r\n  const [traitIds, setTraitIds] = useState([]); // Needed For TX\r\n  const [glyphIds, setGlyphIds] = useState([]); // Needed for TX\r\n  const [inventoryState, setInventoryState] = useState(\"None\");\r\n  const [selectedTrait, setSelectedTrait] = useState(\"0\");\r\n  const [selectedGlyph, setSelectedGlyph] = useState(\"0\");\r\n  const [fetching, setFetching] = useState(\"None\");\r\n  const [approvalState, setApprovalState] = useState(0);\r\n\r\n\r\n  const contract = cTWLogic;\r\n  const traitContract = cTWT;\r\n  const glyphContract = cTWG;\r\n  const skeletoonContract = cTWSP;\r\n  const web3 = new Web3(Web3.givenProvider);\r\n\r\n\r\n  let geneIcons = [\r\n    icon_Bg_D,\r\n    icon_Pet_D,\r\n    icon_Body_D,\r\n    icon_Mouth_D,\r\n    icon_Head_D,\r\n    icon_Eye_D,\r\n    icon_Hat_D,\r\n    icon_Item_D,\r\n    icon_Cape_D,\r\n    icon_Bg_M,\r\n    icon_Pet_M,\r\n    icon_Body_M,\r\n    icon_Mouth_M,\r\n    icon_Head_M,\r\n    icon_Eye_M,\r\n    icon_Hat_M,\r\n    icon_Item_M,\r\n    icon_Cape_M,\r\n  ];\r\n\r\n  const strPointCost = () => {\r\n    contract.methods.strPointCost().call(async (err, result) => {\r\n      if (!err) {\r\n          setPointCost(web3.utils.fromWei(result, 'ether'))\r\n      } else {\r\n          console.log(\"Error requesting price cost\")\r\n      }\r\n    })\r\n  };\r\n\r\n  const listToGeneIndexer = (index) => {\r\n    if (index < 9) {\r\n      return index * 2;\r\n    } else {\r\n      return (index - 9) * 2 + 1;\r\n    }\r\n  };\r\n\r\n  const geneIndexertoArr = (index) => {\r\n    if (index % 2 == 0) {return index/2} else { return ((index - 1)/2)+9}\r\n  }\r\n\r\n  const listItems = geneIcons.map((gene, index) => (\r\n    <il class={\"GeneRow\"} id={\"Gene\" + listToGeneIndexer(index)} key={gene}>\r\n      <img src={gene} onClick={() => {setselectedGeneIndex(listToGeneIndexer(index))}}></img>\r\n      <br></br>\r\n    </il>\r\n  ));\r\n\r\n  const renderTraits = () => {\r\n    return (\r\n        <ul>{listItems}</ul>\r\n    );\r\n  };\r\n\r\n  const selectedGene = () => {\r\n    return (\r\n      <>\r\n      <img src={geneIcons[geneIndexertoArr(selectedGeneIndex)]}>      \r\n      </img>\r\n      <div class={\"GeneText\"}>\r\n      {geneDisasaemblerMapped(prop.geneSeq, selectedGeneIndex * 3) + \" \" + strDissasermbler(prop.strSeq, selectedGeneIndex * 3) + \"/100\"}\r\n      </div>\r\n      </>\r\n    )\r\n  }\r\n\r\n  const upgradedGene = () => {\r\n    let pGene \r\n    if (selectedTrait != \"0\"){\r\n      pGene = changeGeneSeq();\r\n    } else {\r\n      pGene = prop.geneSeq\r\n    }\r\n    let pStr = changeStrSeq();\r\n    if (parseInt(strDissasermbler(pStr, selectedGeneIndex * 3))> 100){\r\n      return (\r\n        <>\r\n        <div id={\"UpgradedGeneHeader\"}>{\"Upgraded Gene\"}</div>\r\n        <img src={geneIcons[geneIndexertoArr(selectedGeneIndex)]}>  \r\n        </img>\r\n        <div class={\"GeneText\"}>\r\n        {geneDisasaemblerMapped(pGene, selectedGeneIndex * 3) + \"100/100\"}\r\n        </div>\r\n        </>\r\n      )\r\n    } else {\r\n      console.log(\"Upgraded Gene\")\r\n      return (\r\n        <>\r\n        <div id={\"UpgradedGeneHeader\"}>{\"Upgraded Gene\"}</div>\r\n        <img src={geneIcons[geneIndexertoArr(selectedGeneIndex)]}>  \r\n        </img>\r\n        <div class={\"GeneText\"}>\r\n        {geneDisasaemblerMapped(pGene, selectedGeneIndex * 3) + \" \" + strDissasermbler(pStr, selectedGeneIndex * 3) + \"/100\"}\r\n        </div>\r\n        </>\r\n      )\r\n    }\r\n  }\r\n\r\n  const previewCanvas = () => {\r\n    return (\r\n      <canvas id=\"skeletoon_preview_canvas\" width=\"2000\" height=\"2000\"></canvas>\r\n    )\r\n  }\r\n  // Need prop to update on sending TX\r\n  const sendTX = () => {\r\n    let approvals = approvalState;\r\n    let position = selectedGeneIndex;\r\n    let points = usedPoints;\r\n    let pointsFree = availablePoints;\r\n    let costPerPoint = pointCost;\r\n    let glyphID = selectedGlyph;\r\n    let traitID = selectedTrait;\r\n    let skeletoonID = prop.skeletoonTokenId;\r\n    // check if approve trait all needed, check if approve all glyph needed, check if payed or not,\r\n    if (selectedTrait != \"0\" && (approvals % 2) == 0){\r\n      let txData = cTWT.methods.setApprovalForAll(aTWLogic, \"1\").encodeABI();\r\n      web3.eth.sendTransaction(\r\n        {\r\n          from: prop.address,\r\n          to: aTWT,\r\n          data: txData,\r\n        }).on('receipt', function(receipt) {\r\n          setApprovalState(approvals+1)\r\n        });\r\n    } else \r\n    if (selectedGlyph != \"0\" && approvals < 2){\r\n      let txData = cTWG.methods.setApprovalForAll(aTWLogic, \"1\").encodeABI();\r\n      web3.eth.sendTransaction(\r\n        {\r\n          from: prop.address,\r\n          to: aTWG,\r\n          data: txData,\r\n        }).on('receipt', function(receipt) {\r\n          setApprovalState(approvals+2)\r\n        });\r\n    } else \r\n    if (parseInt(points) > parseInt(pointsFree)){\r\n      let txData = cTWLogic.methods.upgradeSkeletoonPayed(skeletoonID.toString(), glyphID, traitID, points, position).encodeABI();\r\n      web3.eth.sendTransaction(\r\n        {\r\n          from: prop.address,\r\n          to: aTWLogic,\r\n          value: ((parseInt(points) - parseInt(pointsFree)) * (parseInt(web3.utils.toWei(costPerPoint)))).toString(),\r\n          data: txData,\r\n        }).on('receipt', function(receipt) {\r\n          // ???\r\n        });\r\n    } else {\r\n      let txData = cTWLogic.methods.upgradeSkeletoon(skeletoonID.toString(), glyphID, traitID, points, position).encodeABI();\r\n      web3.eth.sendTransaction(\r\n        {\r\n          from: prop.address,\r\n          to: aTWLogic,\r\n          data: txData,\r\n        }).on('receipt', function(receipt) {\r\n          // ???\r\n        });\r\n    }\r\n  }\r\n\r\n  const drawPreview = () => {\r\n    let pStr = prop.strSeq;\r\n    let pGene = prop.geneSeq;\r\n    if (selectedTrait != \"0\"){\r\n      pGene = changeGeneSeq();\r\n    }\r\n    pStr = changeStrSeq();\r\n    console.log(pStr)\r\n    drawSkeletoonFull(pGene, pStr, 'skeletoon_preview_canvas', 0, 0, 1000)\r\n  }\r\n\r\n  const actionButtons = () => {\r\n      return (\r\n        <div class=\"btn-group\">\r\n        <div class=\"button-wrapper\" onClick={() => {\r\n          var myCanvas = document.getElementById('skeletoon_preview_canvas');\r\n          myCanvas.width = 2000;\r\n          myCanvas.height = 2000;\r\n          drawPreview()\r\n          }}>\r\n        <button><img src={button_default} alt=\"my image\" /></button>\r\n        <div class={\"button_text\"}>{\"Preview\"}</div>\r\n        </div>\r\n        <div class=\"button-wrapper\" onClick={() => {sendTX()}}>\r\n        <button><img src={button_default} alt=\"my image\" /></button>\r\n        <div class={\"button_text\"}>{(selectedTrait != \"0\" && (approvalState % 2) == 0) ||  (selectedGlyph != \"0\" && approvalState < 2)? \"Approve\" : \"Upgrade\"}</div>\r\n        </div>  \r\n        </div> \r\n      )\r\n  }\r\n\r\n  const PointControl = () => {\r\n    return(\r\n      <div id={\"PointControl\"}>\r\n          <div class=\"button-wrapper\" id={\"buttonMinus\"} onClick={() => {\r\n            if (usedPoints > 0) {\r\n              setUsedPoints((parseInt(usedPoints)-1).toString())\r\n            }\r\n          }}>\r\n          <button><img src={icon_minus} alt=\"my image\" /></button>\r\n          </div>\r\n          <input id={\"PointInput\"} type=\"number\" value={usedPoints} onChange={e => { if (parseInt(e.target.value) > 100) {setUsedPoints(\"100\")} else {setUsedPoints(e.target.value)}}}/>\r\n          <div class=\"button-wrapper\" id={\"buttonPlus\"} onClick={() => {\r\n            if (usedPoints < 101) {\r\n              setUsedPoints((parseInt(usedPoints)+1).toString())\r\n            }\r\n          }}>\r\n          <button><img src={icon_plus} alt=\"my image\" /></button>\r\n          </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const nextPointReq = () => {\r\n    contract.methods.getTimeLocked(prop.skeletoonTokenId).call(async (err, result) => {\r\n      if (!err) {\r\n        setTimeLocked({dateLock: new Date(result*1000)})\r\n      } else {\r\n        console.log(\"ERROR getting timeLock\");\r\n      }\r\n    });\r\n  }\r\n\r\n  const availablePointsReq = () => {\r\n    contract.methods.getAvailablePoints(prop.skeletoonTokenId).call(async (err, result) => {\r\n      if (!err) {\r\n        setAvailablePoint(result)\r\n      } else {\r\n        console.log(\"ERROR getting timeLock\");\r\n      }\r\n    });\r\n  }\r\n\r\n  const unixTimeStampToNextReward = (timeStamp) => {\r\n    let claimedStamp\r\n    if (availablePoints == 0) {\r\n      claimedStamp = 3600 - timeStamp\r\n    }\r\n    if (availablePoints == 1) {\r\n      claimedStamp = 14400 - timeStamp\r\n    }\r\n    if (availablePoints == 2) {\r\n      claimedStamp = 28800 - timeStamp\r\n    }\r\n    if (availablePoints == 3) {\r\n      claimedStamp = 57600 - timeStamp\r\n    }\r\n    if (availablePoints == 4) {\r\n      claimedStamp = 115200 - timeStamp\r\n    }\r\n    if (availablePoints == 5) {\r\n      return \"Maximum points stacked. use points to reset point stacking.\"\r\n    } else \r\n    {\r\n      let hours = Math.floor(claimedStamp/3600).toString()\r\n      if (hours.length == 1) {hours = \"0\" + hours}\r\n      let minutes = Math.floor((claimedStamp - hours*3600)/60).toString()\r\n      if (minutes.length == 1) {minutes = \"0\" + minutes}\r\n      let seconds = Math.floor((claimedStamp - hours*3600)- minutes*60).toString()\r\n      if (seconds.length == 1) {seconds = \"0\" + seconds}\r\n      if (timeStamp / 3600 > 87600){\r\n        return \"Use your first point to stack Available Points\"\r\n      } else {\r\n        return \"Next point unlocked in: \" + hours + \":\" + minutes + \":\" + seconds\r\n      }\r\n    }   \r\n  }\r\n\r\n  const availablePointsDisplay = () => {\r\n    return (\r\n      <div id={\"AvailablePoints\"}>\r\n      {\"This skeletoon has \" + availablePoints + \" free points\"} \r\n      </div>\r\n    )\r\n  }\r\n\r\n  const nextPointDisplay = () => {\r\n    return (\r\n      <div id={\"NextPoint\"}>\r\n      {unlockDateString}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // FIX case: has n points, adds x*10+y points where x<n, shows no cost\r\n  const pointCostDisplay = () => {\r\n        let boughtPoints = parseInt(usedPoints) - parseInt(availablePoints)\r\n        if (usedPoints < availablePoints)\r\n        {\r\n          return (\r\n          <div id={\"PointCost\"}>\r\n          </div>\r\n        )} else {return (\r\n          <div id={\"PointCost\"}>\r\n          {\"Cost \" + (boughtPoints) * parseFloat(pointCost)}\r\n          </div>\r\n        )}     \r\n  }\r\n\r\n  const strDisplay = () => {\r\n      return (\r\n        <>\r\n        {availablePointsDisplay()}\r\n        {nextPointDisplay()}\r\n        {PointControl()}\r\n        {pointCostDisplay()}\r\n        </>\r\n      )\r\n  }\r\n\r\n  const geneDisasaemblerMapped = (sequence, index) => {\r\n    let geneSingle = sequence.substring(index, index + 3);\r\n    geneSingle = TraitMap[geneSingle][\"1\"][2];\r\n    return geneSingle;\r\n  };\r\n\r\n  const strDissasermbler = (sequence, index) => {\r\n    let strSingle = sequence.substring(index, index + 3);\r\n    return strSingle;\r\n  };\r\n\r\n\r\n\r\n  const traitBalance = () => {\r\n    if (fetching != \"None\" ){\r\n      //Throw Error to Div\r\n      return;\r\n    }\r\n    setInventoryState(\"Trait\")\r\n    if (traitIds.length > 0){\r\n      return;\r\n    }\r\n    setFetching(\"Traits\");\r\n    setTraitIds([]);\r\n    fetchInventoryTrait()\r\n  }\r\n\r\n  const fetchInventoryTrait = () => {\r\n    traitContract.methods.walletOfOwner(prop.address).call(async (err,result) => {\r\n        if (!err){\r\n          traitContract.methods.getTraitPropertiesBatch(result).call( async (err,result) => {\r\n                let invTemp = [];\r\n                for (let i = 0; i < result.length; i= i+2){\r\n                    let temp = {id: result[i], type: result[i+1]}\r\n                    invTemp = [...invTemp, temp];\r\n                } \r\n                setTraitIds(invTemp);\r\n                setFetching(\"None\");\r\n            })\r\n        }\r\n    })\r\n  }\r\n\r\n  const glyphBalance = () => {\r\n    if (fetching != \"None\"){\r\n      //Throw Error to Div\r\n      return;\r\n    }\r\n    setInventoryState(\"Glyph\")\r\n    if (glyphIds.length > 0) {\r\n      return;\r\n    }\r\n    setFetching(\"Glyph\");\r\n    setGlyphIds([]);\r\n    fetchInventoryGlyph()\r\n  }\r\n  \r\n  const fetchInventoryGlyph = () => {\r\n    glyphContract.methods.walletOfOwner(prop.address).call(async (err,result) => {\r\n        if (!err){\r\n          glyphContract.methods.getGlyphPropertiesBatch(result).call( async (err,result) => {\r\n                let invTemp = [];\r\n                for (let i = 0; i < result.length; i= i+3){\r\n                    let temp = {id: result[i], points: result[i+1], type:result[i+2]}\r\n                    invTemp = [...invTemp, temp];\r\n                } \r\n                setGlyphIds(invTemp);\r\n                setFetching(\"None\");\r\n            })\r\n        }\r\n    })  \r\n  }\r\n\r\n  const findType = () => {\r\n    let selectedTraitType;\r\n    if (selectedTrait != \"0\" ) {\r\n      selectedTraitType = traitIds.filter(obj => {\r\n        return obj.id === selectedTrait\r\n      })\r\n      return selectedTraitType[0].type\r\n    } else \r\n    return \"\"\r\n  }\r\n\r\n  const findApplies = () => {\r\n    let selectedGlyphApplies;\r\n    if (selectedGlyph != \"0\" ) {\r\n          let selectedGlyphApplies = glyphIds.filter(obj => {\r\n        return obj.id === selectedGlyph\r\n      })\r\n      return selectedGlyphApplies[0].type\r\n    } else \r\n    return \"\"\r\n  }\r\n\r\n  const tokenSelector = () => {\r\n    //Fix img SRc for trait/glyph\r\n    \r\n    return (\r\n      <div class=\"btn-group\">\r\n      <div class=\"button-wrapper\" onClick={() => {traitBalance()}}>\r\n      <button><img src={button_default} alt=\"my image\" /></button>\r\n      <div class={\"button_text\"}>{\"Trait\"}</div>\r\n      </div>\r\n      <div class=\"button-wrapper\" onClick={() => {glyphBalance()}}>\r\n      <button><img src={button_default} alt=\"my image\" /></button>\r\n      <div class={\"button_text\"}>{\"Glyphs\"}</div>\r\n      </div>\r\n      <div class=\"button-wrapper\" onClick={() => {setSelectedGlyph(\"0\"); setSelectedTrait(\"0\"); setInventoryState(\"None\")}}>\r\n      <button><img src={button_default} alt=\"my image\" /></button>\r\n      <div class={\"button_text\"} id={\"ClearSelecedButton\"}>{\"Clear\"}</div>\r\n      </div> \r\n      {selectedTrait != \"0\"? (<img src={traitInv + \"/\"+ findType() + \".png\"} class={\"selected\"}></img>) : \"\"}\r\n      {selectedGlyph != \"0\"? (<img src={glyphInv + \"/\" + findApplies() + \".png\"} class={\"selected\"}></img>) : \"\"} \r\n      </div> \r\n    )\r\n    \r\n  }\r\n\r\n\r\n  //Pasidaryt koki nors smart konverteri kaip su glyph applies\r\n  function filterTrait(trait) {\r\n    let temp = trait.type\r\n    for (let i = 0 ; i<3 ;i++){\r\n      if (temp.length < 3)\r\n      {temp = \"0\"+temp}\r\n    }\r\n    console.log(temp)\r\n    console.log(typeof temp)\r\n      return (TraitMap[temp][\"1\"][3] == selectedGeneIndex || selectedGeneIndex % 2 == 1)\r\n  }\r\n\r\n  const traitInventoryDisplay = () => {\r\n    let traits = traitIds;\r\n    // FIX img src\r\n    const inventoryTraitDiv = traits.filter(trait => filterTrait(trait)).map((trait, index) => (\r\n      <il class={\"invDiv\"} id={\"invTrait\" + trait.id} key={trait.id}>\r\n        <img src={traitInv + \"/\"+ trait.type + \".png\"} onClick={() => {setSelectedTrait(trait.id)}}></img>\r\n      </il>\r\n    ));   \r\n    return (<ul>{inventoryTraitDiv}</ul>)\r\n  }\r\n\r\n  //Sugalvot kaip pridet str points\r\n  function filterGlyph(glyph){\r\n    let temp = parseInt(glyph.type)\r\n    let tempgeneindex = selectedGeneIndex\r\n    if (selectedGeneIndex % 2 == 1) \r\n    {tempgeneindex--} else\r\n\r\n    console.log(temp)\r\n    console.log(typeof temp)\r\n      return (parseInt(Math.floor(temp/(2**((18-tempgeneindex)/2)))%2) )\r\n  }\r\n\r\n  const glyphInventoryDisplay = () => {\r\n    let glyphs = glyphIds;\r\n    //FIX img src\r\n    const inventoryGlyphDiv = glyphs.filter(glyph => filterGlyph(glyph)).map((glyph, index) => (\r\n      <il class={\"invDiv\"} id={\"invGlyph\" + glyph.id} key={glyph.id}>\r\n        <img src={glyphInv + \"/\" + glyph.type + \".png\"} class={\"GlyphIcon\"} onClick={() => {setSelectedGlyph(glyph.id)}}></img>\r\n      </il>\r\n    ));\r\n    return (<ul>{inventoryGlyphDiv}</ul>)\r\n  }\r\n\r\n  const displayInventory = () => {\r\n   if (fetching != \"None\") {\r\n     return (\r\n       <div>{\"LOADING\"}</div>\r\n     )\r\n   } else if (inventoryState ==\"Trait\") {\r\n     return (\r\n      traitInventoryDisplay()\r\n     )\r\n   } else if (inventoryState ==\"Glyph\") {\r\n     return (\r\n      glyphInventoryDisplay()\r\n     )\r\n   } else {return(<></>)}\r\n  }\r\n\r\n  const upgradeDisplay = () => {\r\n    return (\r\n      <div className={\"ActionDisplay\"}>\r\n      <div className={\"SelectedGene\"}> {selectedGene()}</div>\r\n      <div className={\"UpgradedGene\"}>{upgradedGene()}</div>\r\n      <div className={\"PointsDisplay\"}>{strDisplay()}</div>\r\n      <div className={\"ButtonsDisplay\"}>{ actionButtons()}</div>\r\n      <div className={\"TokenSelector\"}>{ tokenSelector()}</div>\r\n      <div className={\"TokenInventory\"}>{ displayInventory()}</div>\r\n      <div className={\"UpgradeCanvasPreview\"}>{ previewCanvas()}</div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const changeStrSeq = () => {\r\n    let prefix = \"\";\r\n    if (selectedGeneIndex != 0)\r\n    {prefix = prop.strSeq.substring(0, ((selectedGeneIndex-1)*3)+3)}\r\n    let edited\r\n    if (selectedGlyph != \"0\")\r\n    {\r\n      let glyphStr = glyphIds.find(({id}) => id === selectedGlyph)\r\n      edited = (parseInt(prop.strSeq.substring((selectedGeneIndex)*3, ((selectedGeneIndex)*3)+3)) + parseInt(glyphStr.points)).toString()\r\n    } else {\r\n      edited = (parseInt(prop.strSeq.substring((selectedGeneIndex)*3, ((selectedGeneIndex)*3)+3))).toString()\r\n    }\r\n    edited = (parseInt(edited) + parseInt(usedPoints)).toString()\r\n    for (let twj = edited.length; twj < 3 ;twj++) {edited = \"0\" + edited}\r\n    let suffix =prop.strSeq.substring(((selectedGeneIndex)*3)+3,54);\r\n     return (prefix+edited+suffix)\r\n  }\r\n\r\n  const changeGeneSeq = () => {\r\n    let prefix = \"\";\r\n    if (selectedGeneIndex != 0)\r\n    {prefix = prop.geneSeq.substring(0, ((selectedGeneIndex-1)*3)+3)}\r\n    let edited = traitIds.find(({id}) => id === selectedTrait)\r\n    edited = edited.type\r\n    for (let i = 0 ; i<3 ;i++){\r\n      if (edited.length < 3)\r\n      {edited = \"0\"+edited}\r\n    }\r\n    let suffix =prop.geneSeq.substring(((selectedGeneIndex)*3)+3,54);\r\n    console.log(\"PREFIX: \" + prefix + \" MID: \"+ edited + \" SUFFIX: \" + suffix)\r\n     return (prefix+edited+suffix)\r\n  }\r\n\r\n  const traitSelector = () => {\r\n    return (\r\n      <>\r\n      <div id={\"GeneTextHeader\"}>{\"Select Gene to upgrade\"}</div>\r\n      <div className={\"GeneSelector\"}>{renderTraits()}</div>\r\n      {selectedGeneIndex !== null ? upgradeDisplay() : \"\"}\r\n      </>\r\n    )\r\n  }\r\n\r\n  useEffect(() => {\r\n    var today = new Date();\r\n    let unixTimeLocked = ((new Date(today.getTime())) - timeLocked.dateLock.getTime()) / 1000\r\n    setUnlockDateString(unixTimeStampToNextReward(unixTimeLocked))\r\n  }, [usedPoints, availablePoints])\r\n\r\n  useEffect(() => {\r\n    let tempApproval = approvalState\r\n    if (selectedTrait != \"0\" && (tempApproval % 2) == 0){\r\n      traitContract.methods.isApprovedForAll(prop.address, aTWLogic).call( async(err, result) => {\r\n        if (result == true) {\r\n          setApprovalState(tempApproval + 1)\r\n        }\r\n      });\r\n    }\r\n    if (selectedGlyph != \"0\" && tempApproval < 2){\r\n      glyphContract.methods.isApprovedForAll(prop.address, aTWLogic).call( async(err, result) => {\r\n        console.log(result)\r\n        console.log(typeof result)\r\n        if (result == true) {\r\n          setApprovalState(tempApproval + 2)\r\n        }\r\n      });\r\n    }\r\n  }, [selectedTrait, selectedGlyph, approvalState])\r\n\r\n  useEffect(() => {\r\n    nextPointReq()\r\n    availablePointsReq()\r\n    strPointCost()\r\n  }, [prop.skeletoonTokenId])\r\n  \r\n\r\n  return (\r\n    <div>{traitSelector()}</div>\r\n  )\r\n}\r\n\r\nexport default Upgrade","import React from 'react'\r\n\r\nconst Vote = () => {\r\n  return (\r\n    <div>Vote</div>\r\n  )\r\n}\r\n\r\nexport default Vote","import React, {useEffect, useState} from 'react'\r\nimport \"../../styles/TombstoneMeniu.css\";\r\nimport abi from \"../../contracts/ABI.json\";\r\nimport Web3 from \"web3\";\r\nimport { fetchMetadata } from \"../../scripts/Helper\";\r\nimport { drawSingleCanvas, drawSkeletoonFull } from \"../helpers/Renderer\"\r\nimport { cTWSP, getGenes, getGroup, getStrength } from \"../helpers/Groups\"\r\nimport { button_dark, button_default, button_mini, button_mini2h, button_next, button_prev, icon_refresh, meniu_default } from '../../data/canvassrc';\r\n\r\n//DELET this import defore publish\r\nimport geneDataAll from \"../helpers/geneDataAll.json\";\r\n\r\nimport GetTrait from './display/GetTrait';\r\nimport Mint from './display/Mint';\r\nimport Profile from './display/Profile';\r\nimport Rewards from './display/Rewards';\r\nimport Summon from './display/Summon';\r\nimport Upgrade from './display/Upgrade';\r\nimport Vote from './display/Vote';\r\n\r\n\r\nconst contractAddress = \"0x1dadaa7e55b2c7238ed04891ac182ea1468b79b9\";\r\nconst { ethereum } = window;\r\n\r\nconst TombstoneMeniu = (prop) => {\r\n\r\n    const [skeletoons, setSkeletoons] = useState([]);\r\n    const [selectedSkeletoonId, setSelectedSkeletoonId] = useState(null);\r\n    const [selectedMeniu, setSelectedMeniu] = useState();\r\n    const [availableMenius, setAvalableMenius] = useState([]);\r\n    const [isDisplayProfiled, setDisplayProfiled] = useState(true);\r\n    const [areSkeletoonsFetched, setFetch] = useState(0);\r\n    const [meniuConstructor, setmeniuConstructor] = useState(\"default\");\r\n    const [gene, setGeneSeq] = useState(null);\r\n    const [strength, setStrSeq] = useState(null);\r\n    const [refresh, setRefresh] = useState(false);\r\n\r\n    //let geneSequence = \"017000012000021000041000043000036011028000000045000000\";\r\n    //let strengthSequence =\"017000012000021000041000043000036011028000000045000000\";\r\n    \r\n\r\n    const web3 = new Web3(Web3.givenProvider);\r\n\r\n    //  Contracts\r\n    //const contract = new web3.eth.Contract(abi.SPSK, contractAddress);\r\n    const contract = cTWSP;\r\n\r\n    const goodFetcher = () => {\r\n        contract.methods.balanceOf(prop.address).call(async(err, result) => {   \r\n          for (let i = 0; i < result; i++) {\r\n            console.log(i)\r\n            fetcherRetry(i)\r\n          }\r\n        });\r\n      };\r\n    \r\n      const fetcherRetry = (tokenID) => {\r\n        contract.methods.tokenOfOwnerByIndex(prop.address, tokenID).call(async(err, result) => {\r\n          if (!err) {\r\n            contract.methods.tokenURI( result).call( async(err, result) => {\r\n              if (!err) {\r\n                console.log(result)\r\n                let tokenMetadata = await fetchMetadata( result);\r\n                console.log(tokenMetadata)\r\n                setSkeletoons((skeletoonList) => [...skeletoonList, tokenMetadata]);\r\n              } else {\r\n                fetcherRetry(tokenID)\r\n              }\r\n            });\r\n          } else {\r\n            fetcherRetry(tokenID)\r\n          }\r\n        });\r\n      }\r\n\r\n      const displaySkeletoonProfile = () => {\r\n        return (\r\n            <div>\r\n                  \r\n              <div id={isDisplayProfiled ? \"skeletoonProfileDisplay\" :  \"skeletoonProfileDisplay_hidden\"}>  \r\n                {displaySkeletoon()}\r\n                <div className={\"navigationBtns\"}>{selectedSkeletoonId !== null ? navigation() : \"\"}</div>\r\n              </div>\r\n            </div>\r\n          );\r\n      }\r\n\r\n      const meniuButton = (selector, text) => {\r\n          return (\r\n            <div class=\"button-wrapper\" onClick={() => {setSelectedMeniu(selector)}}>\r\n            <button><img src={button_dark} alt=\"my image\" /></button>\r\n            <div class={\"button_text\"}>{text}</div>\r\n            </div> \r\n          )\r\n      }\r\n\r\n\r\n      const navigation =  () => {\r\n        return (\r\n            <div className={\"miniHeader\"}>\r\n              {skeletoons.length > 1 ? <div className= {\"bwrap\"} onClick={() => {\r\n                  if (selectedSkeletoonId !== 0) {\r\n                    setSelectedSkeletoonId(selectedSkeletoonId - 1);\r\n                  } else {\r\n                    setSelectedSkeletoonId((skeletoons.length)-1);\r\n                  }\r\n                }}>\r\n              <button id={\"prev_nav\"}>\r\n              <img src={button_prev} alt=\"my image\" />    \r\n              </button></div> : \"\"}\r\n              {selectedMeniu === \"List\"?\r\n              <div className= {\"bwrap\"} onClick={() => {\r\n                setFetch(0);\r\n                setSelectedSkeletoonId(null);\r\n                setSkeletoons([]);\r\n                goodFetcher()  \r\n            }}>\r\n\r\n            <button id={\"middle_nav\"}>\r\n            <img src={button_mini2h} alt=\"my image\" />    \r\n            </button></div>\r\n              \r\n              :\r\n              <div className= {\"bwrap\"} onClick={() => {\r\n                setRefresh(!refresh)\r\n              }}>\r\n            <button id={\"middle_nav\"}>\r\n            <img src={button_mini2h} alt=\"my image\" />    \r\n            </button></div>}\r\n\r\n            {skeletoons.length > 1 ? <div className= {\"bwrap\"} onClick={() => {\r\n                  if (skeletoons.length - 1 !== selectedSkeletoonId) {\r\n                    setSelectedSkeletoonId(selectedSkeletoonId + 1);\r\n                  } else {\r\n                    setSelectedSkeletoonId(0);\r\n                  }\r\n                }}>\r\n            <button id={\"next_nav\"}>\r\n            <img src={button_next} alt=\"my image\" />    \r\n            </button></div> : \"\"}\r\n            </div>\r\n        );\r\n      }\r\n\r\n      const displaySkeletoon = () => {\r\n\r\n          return (\r\n            <div>\r\n                <canvas id=\"skeletoon_profile_canvas\" width=\"2000\" height=\"2000\"></canvas>\r\n                <div className={\"skeletoonDisplayName\"}>{selectedSkeletoonId !== null ? skeletoons[selectedSkeletoonId].name : \"\"}</div>\r\n            </div>\r\n          )\r\n      }\r\n\r\n      /*   Swap out for Skeletoon builder*/\r\n\r\n      const listToonWorldSkeletoons = () => {\r\n        const listItems = skeletoons.map((token) => (\r\n          <il class={\"SkeletoonListItem\"}\r\n            key={token.id}\r\n            onClick={() => {\r\n              setSelectedSkeletoonId(skeletoons.map((object) => object.id).indexOf(token.id));\r\n              console.log(token.name + \" \" + token.id);\r\n            }}\r\n          >\r\n            {token.name}\r\n            <br></br>\r\n          </il>\r\n        ));\r\n        return (\r\n          <div className={\"skeletoonListMini\"}>\r\n            {\"My Skeletoons\"}\r\n            <ul>{listItems}</ul>\r\n            \r\n          </div>\r\n        );\r\n      };\r\n\r\n      const mainDisplay = () => {\r\n          switch (selectedMeniu) {\r\n              case \"List\":\r\n                return (\r\n                    listToonWorldSkeletoons()\r\n                )\r\n              case \"Mint\":\r\n                  return (\r\n                      <Mint address = {prop.address}></Mint>\r\n                  )\r\n              case \"Summon\":  \r\n                  return (\r\n                      <Summon address = {prop.address}></Summon>\r\n                  )\r\n              case \"Profile\":\r\n                  return (\r\n                      <Profile skeletoonTokenId = {skeletoons[selectedSkeletoonId].id} geneSeq = {gene} strSeq = {strength} ></Profile>\r\n                  )\r\n              case \"Upgrade\":\r\n                  return (\r\n                      <Upgrade skeletoonTokenId = {skeletoons[selectedSkeletoonId].id} geneSeq = {gene} strSeq = {strength} address = {prop.address}></Upgrade>\r\n                  )\r\n              case \"MintTrait\":  \r\n                  return (\r\n                      <GetTrait skeletoonTokenId = {skeletoons[selectedSkeletoonId].id} geneSeq = {gene} strSeq = {strength} address = {prop.address}></GetTrait>\r\n                  ) \r\n              case \"Rewards\":\r\n                  return (\r\n                      <Rewards skeletoonTokenId = {skeletoons[selectedSkeletoonId].id} geneSeq = {gene} strSeq = {strength} address = {prop.address}></Rewards>\r\n                  ) \r\n              case \"Vote\":\r\n                  return (\r\n                      <Vote></Vote>\r\n                  )\r\n          }\r\n      }\r\n\r\n      const meniuDisplay = () => {\r\n          return(\r\n            \r\n            <div class=\"btn-group\">\r\n                {meniuButton(\"Mint\",\"Mint\")}\r\n                \r\n                \r\n            \r\n                {availableMenius.includes(\"Toonworld Skeletoon Profile\") ? <div>\r\n                {meniuButton(\"Summon\",\"Summon\")}\r\n                {meniuButton(\"Profile\",\"Profile\")}\r\n                {meniuButton(\"Upgrade\",\"Upgrade\")}   \r\n                {meniuButton(\"List\",\"List\")}\r\n                {meniuButton(\"MintTrait\",\"Extract Trait\")} \r\n                </div>: \"\"}\r\n                {availableMenius.includes(\"ToonWorldSpecials\") || availableMenius.includes(\"ShyFeet\") || availableMenius.includes(\"SinfulCreattons\") || availableMenius.includes(\"Skeletoons\") || availableMenius.includes(\"Toonworld Skeletoon Profile\")? meniuButton(\"Rewards\",\"Rewards\")  : \"\"}\r\n                {availableMenius.includes(\"Skeletoons\") ? meniuButton(\"Vote\",\"Vote\"): \"\"}\r\n            </div>\r\n          )\r\n      }\r\n\r\n    useEffect(() => {\r\n        console.log(\"Meniu drawn\");\r\n        drawSingleCanvas(meniu_default, 'tombstoneMeniu_canvas');\r\n    }, [meniuConstructor]);\r\n\r\n    useEffect(() => {\r\n        setFetch(0);\r\n        setSelectedSkeletoonId(null);\r\n        setSkeletoons([]);\r\n        goodFetcher()\r\n        setAvalableMenius(getGroup(prop.address))\r\n    }, [prop.address]);\r\n\r\n    useEffect(() => {\r\n        if (selectedMeniu === \"Profile\" || selectedMeniu === \"Upgrade\" || selectedMeniu === \"MintTrait\" || selectedMeniu === \"List\" ){\r\n            setDisplayProfiled(true)\r\n        } else if (selectedMeniu === \"Rewards\" && availableMenius.includes(\"Toonworld Skeletoon Profile\")){\r\n            setDisplayProfiled(true)\r\n        } else {\r\n            setDisplayProfiled(false)\r\n        }\r\n    }, [selectedMeniu])\r\n\r\n    useEffect(() => {\r\n        if (availableMenius.includes(\"Toonworld Skeletoon Profile\")){\r\n            setSelectedMeniu(\"List\")\r\n            } else {\r\n            setSelectedMeniu(\"Mint\")    \r\n            }\r\n    }, [availableMenius.length])\r\n\r\n    useEffect(() =>{\r\n        if (selectedSkeletoonId !== null){\r\n\r\n            // Change to get gene and stregth data from on chain\r\n            \r\n            cTWSP.methods.getStrength(skeletoons[selectedSkeletoonId].id).call(async(err, result) =>{\r\n                if (!err)\r\n                {    \r\n                    for (let i = 54 - result.length; i >0 ; i--){\r\n                        result = \"0\" + result\r\n                    }\r\n                    setStrSeq(result)\r\n                    cTWSP.methods.getGenes(skeletoons[selectedSkeletoonId].id).call(async(err, result) =>{\r\n                      if (!err)\r\n                      {    \r\n                          for (let i = 54 - result.length; i >0 ; i--){\r\n                              result = \"0\" + result\r\n                          }\r\n                          setGeneSeq(result)\r\n                      }\r\n                      else \r\n                      {console.log(err)}\r\n                  })\r\n                }\r\n                else \r\n                {console.log(err)}\r\n            })    \r\n        }\r\n    }, [selectedSkeletoonId ,refresh])\r\n\r\n    useEffect(() => {\r\n        if (areSkeletoonsFetched == 0 && skeletoons.length === 1) {\r\n            console.log(skeletoons.length)\r\n            setSelectedSkeletoonId(0)\r\n            setFetch(1)\r\n        }\r\n    }, [skeletoons])\r\n\r\n    useEffect(() => {\r\n        if (typeof gene === \"string\" && typeof strength === \"string\"){\r\n            console.log(\"FFF:\" + gene, strength)\r\n            var myCanvas = document.getElementById('skeletoon_profile_canvas');\r\n            myCanvas.width = 2000;\r\n            myCanvas.height = 2000;\r\n            drawSkeletoonFull(gene, strength, 'skeletoon_profile_canvas', 0, 2, 250);\r\n        }\r\n    },[gene])\r\n\r\n\r\n\r\n  return (\r\n    <div id={\"tombstoneMeniu_container\"}>\r\n            <canvas id={\"tombstoneMeniu_canvas\"} width=\"300\" height=\"1140\"></canvas>\r\n            <div id={\"tombstoneMeniu_overlay\"}>\r\n                {meniuDisplay()}          \r\n            </div> \r\n            <div id={isDisplayProfiled?\"tombstoneDisplay_overlay_small\": \"tombstoneDisplay_overlay_large\"}>\r\n                {displaySkeletoonProfile()}\r\n                {mainDisplay()}\r\n            </div>         \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TombstoneMeniu","import React, { useEffect, useState } from \"react\";\r\nimport \"../../styles/Dashboard.css\";\r\nimport { drawSingleCanvas } from \"../helpers/Renderer\"\r\nimport \"../../styles/Tombstone.css\";\r\nimport TombstoneMeniu from \"./TombstoneMeniu\";\r\nimport { tombstone_default,  background_default } from '../../data/canvassrc';\r\nimport { reqChain } from \"../helpers/Groups\";\r\n\r\n\r\nconst Dashboard = (prop) => {\r\n  const [settings, setsettings] = useState([\"default\", \"default\"]);\r\n\r\n\r\n  useEffect(() => {   \r\n    console.log(\"Background drawn\");\r\n    drawSingleCanvas(background_default, 'dashboard_canvas');\r\n    drawSingleCanvas(tombstone_default, 'tombstone_canvas');\r\n  }, [settings]);\r\n\r\n  return (\r\n    <div id={\"dashboard_container\"}>\r\n      <canvas id={\"dashboard_canvas\"} width=\"3360\" height=\"1688\"></canvas>\r\n      <div id={\"tombstone_container\"}>\r\n            <canvas id={\"tombstone_canvas\"}  width=\"1940\" height=\"1600\"></canvas>\r\n            {prop.address !== true && prop.chain === reqChain ? <TombstoneMeniu address={prop.address} chain={prop.chain}></TombstoneMeniu> : <div id={\"connect_wallet_overlay\"}> Please connect to your wallet on fantom network             \r\n            </div>}   \r\n      </div>    \r\n    </div>\r\n  );\r\n\r\n};\r\n\r\nexport default Dashboard;\r\n","import React, { useEffect, useState } from 'react'\r\nimport \"../../styles/NFTcard.css\";\r\nimport TraitMap from \"../helpers/TraitMap.json\"\r\nimport RewardsMap from \"../helpers/RewardsMap.json\";\r\nimport { aTWG, aTWMarket, aTWSP, aTWT, cTWG, cTWMarket, cTWSP, cTWT } from '../helpers/Groups';\r\nimport {\r\n    glyphDefault,\r\n    glyphInv,\r\n    icon_Bg_D,\r\n    icon_Bg_M,\r\n    icon_Body_D,\r\n    icon_Body_M,\r\n    icon_Cape_D,\r\n    icon_Cape_M,\r\n    icon_Eye_D,\r\n    icon_Eye_M,\r\n    icon_Hat_D,\r\n    icon_Hat_M,\r\n    icon_Head_D,\r\n    icon_Head_M,\r\n    icon_Item_D,\r\n    icon_Item_M,\r\n    icon_Mouth_D,\r\n    icon_Mouth_M,\r\n    icon_Pet_D,\r\n    icon_Pet_M,\r\n    traitInv\r\n  } from \"../../data/canvassrc\";\r\nimport { drawSkeletoonFull } from '../helpers/Renderer';\r\nimport Web3 from \"web3\";\r\n\r\nconst NFTcard = (prop) => {\r\n    const [renderImageType , setRenderImageType] = useState(null);\r\n    const [renderPropertiesType ,setRenderPropertiesType] = useState(null)\r\n    const [marketRender, setMarketRender] = useState(null);\r\n    const [isApproved, setApproval] = useState(0);\r\n    const [price, setPrice] = useState(null);\r\n    const [seller, setSeller] = useState(null);\r\n    const [salePrice, setSalePrice] = useState(null);\r\n\r\n    const web3 = new Web3(Web3.givenProvider);\r\n    \r\n\r\n    let geneIcons = [\r\n        icon_Bg_D,\r\n        icon_Pet_D,\r\n        icon_Body_D,\r\n        icon_Mouth_D,\r\n        icon_Head_D,\r\n        icon_Eye_D,\r\n        icon_Hat_D,\r\n        icon_Item_D,\r\n        icon_Cape_D,\r\n        icon_Bg_M,\r\n        icon_Pet_M,\r\n        icon_Body_M,\r\n        icon_Mouth_M,\r\n        icon_Head_M,\r\n        icon_Eye_M,\r\n        icon_Hat_M,\r\n        icon_Item_M,\r\n        icon_Cape_M,\r\n      ];\r\n    let totalRewards = { TWB: 0, Traits: 0, Glyphs: [] };\r\n    let TWBrewardMultis = [2, 1];\r\n\r\n    const padder = (input) => {\r\n        console.log(prop.card)\r\n        if (typeof input === \"string\"){let padded = input\r\n        for (let i = 54 - padded.length; i >0 ; i--){\r\n            padded = \"0\" + padded\r\n        }\r\n        return padded\r\n    } else {\r\n        return \r\n    }\r\n    }\r\n\r\n    const rewardMapper = (rewardGene, _str) => {\r\n        let str = parseInt(_str);\r\n        let RewardString = \"\";\r\n        if (str != \"000\") {\r\n        let tempValue = parseInt(str) * parseInt(rewardGene[1]) * TWBrewardMultis[0] * TWBrewardMultis[1];\r\n        RewardString += tempValue + \" $TWB \";\r\n        totalRewards.TWB += tempValue;\r\n        }\r\n        if (rewardGene[0] == 4 || rewardGene[0] == 7) {\r\n        totalRewards.Traits += str;\r\n        if (str > 1) {\r\n            RewardString += str + \" Contest Entries\";\r\n        } \r\n        }\r\n        if (rewardGene[0] == 6 || rewardGene[0] == 7) {\r\n            if (Math.floor((str/10)* rewardGene[3]) > 1) {\r\n                let tempString = \" [Glyph: \" + rewardGene[4] + \" (STR: \" +Math.floor((str/10)* rewardGene[3]) + \") ]\";\r\n                totalRewards.Glyphs.push(tempString.substring(1));\r\n                RewardString += tempString;\r\n              } \r\n        }\r\n        console.log(totalRewards);\r\n        return RewardString;\r\n      };\r\n    \r\n      const geneDisasaemblerMapped = (sequence, index) => {\r\n        let geneSingle = sequence.substring(index, index + 3);\r\n        geneSingle = TraitMap[geneSingle][\"1\"][2];\r\n        return geneSingle;\r\n      };\r\n    \r\n      const strDissasermbler = (sequence, index) => {\r\n        let strSingle = sequence.substring(index, index + 3);\r\n        return strSingle;\r\n      };\r\n    \r\n      const listToGeneIndexer = (index) => {\r\n        if (index < 9) {\r\n          return index * 2;\r\n        } else {\r\n          return (index - 9) * 2 + 1;\r\n        }\r\n      };\r\n    \r\n      \r\n      \r\n    \r\n      const renderTraits = () => {\r\n        const listItems = geneIcons.map((gene, index) => (\r\n            <il class={\"GeneRow\"} id={\"Gene\" + listToGeneIndexer(index)} key={gene}>\r\n              <img src={gene}></img>\r\n              <div class={\"GeneText\"}>\r\n                {geneDisasaemblerMapped(padder(prop.card.properties.gene), listToGeneIndexer(index) * 3) + \" \" + strDissasermbler(padder(prop.card.properties.str), listToGeneIndexer(index) * 3) + \"/100\"}\r\n                <br></br>\r\n                {rewardMapper(RewardsMap[padder(prop.card.properties.gene).substring(listToGeneIndexer(index) * 3, listToGeneIndexer(index) * 3 + 3)], strDissasermbler(padder(prop.card.properties.str), listToGeneIndexer(index) * 3))}\r\n              </div>\r\n              <br></br>\r\n            </il>\r\n          ));\r\n        return (\r\n          <div className={\"TraitList\"} id={\"MarketTraitList\"}>\r\n            <ul>{listItems}</ul>\r\n          </div>\r\n        );\r\n      };\r\n\r\n      const renderTraitCard = () => {\r\n          let traitType = prop.card.properties.type\r\n          for (let i = 0; i < 3; i++){\r\n              if (traitType.length < 3){\r\n                traitType = \"0\"+traitType;\r\n              }\r\n          }\r\n          return (\r\n            <div className={\"TraitList\"} id={\"GlyphList\"}>\r\n            {\"Trait Name :\" + TraitMap[traitType][\"1\"][2]}\r\n            <br></br>\r\n            <br></br>\r\n            {\"Applies To Major Gene : \"}\r\n            <br></br>\r\n            <img src={geneIcons[(TraitMap[traitType][\"1\"][3])/2] }></img>\r\n            </div>\r\n          );\r\n      }\r\n\r\n      const renderGlyphCard = () => {\r\n          let glyphApplies = prop.card.properties.applies\r\n          let appliedPos = [false, false, false, false, false, false, false, false, false];\r\n          let icons = geneIcons.slice(0,9)\r\n          for (let i = 9; i>0 ; i--){\r\n            if ((parseInt(glyphApplies) >> i)%2 ===1){\r\n                appliedPos[9-i] = true\r\n            } else {\r\n                appliedPos[9-i] = false;\r\n            }\r\n          }\r\n          console.log(appliedPos)\r\n          const iconFiltered = icons.filter( item => appliedPos[icons.indexOf(item)]).map((gene, index) => (\r\n            <il class={\"GeneRow\"} id={\"Gene\" + listToGeneIndexer(index)} key={gene}>\r\n              <img src={gene}></img>\r\n              <br></br>\r\n            </il>\r\n          ));\r\n          return (\r\n            <div className={\"TraitList\"} id={\"GlyphList\"}>\r\n            {\"Applies to trait types:\"}\r\n              <ul>{iconFiltered}</ul>\r\n            {\"Strength: \" + prop.card.properties.str}\r\n            </div>\r\n          );\r\n      }\r\n\r\n    const displayImage = () => {\r\n        if (prop.card.NFTtype === \"Skeletoon\"){\r\n            return (\r\n                <>\r\n                <canvas id=\"market_canvas\" width=\"2000\" height=\"2000\"></canvas>\r\n                 {renderTraits()}\r\n                </>\r\n            )\r\n        } else if (prop.card.NFTtype === \"Trait\") {\r\n            return (\r\n                <>\r\n                <img id=\"market_img\" src={(traitInv + \"/\"+prop.card.properties.type + \".png\")}></img>\r\n                {renderTraitCard()}\r\n                </>\r\n            )\r\n        } else if (prop.card.NFTtype === \"Glyph\") {\r\n            return (\r\n                <>\r\n                <img id=\"market_img\" src={glyphInv + \"/\" + prop.card.properties.applies + \".png\"}></img>\r\n                {renderGlyphCard()}\r\n                </>\r\n            )\r\n        } else {\r\n            return (\r\n                <></>\r\n            )\r\n        }\r\n    }\r\n\r\n    const listItem  = () => {\r\n        let address;\r\n        if (prop.card.NFTtype === \"Glyph\") {\r\n            address = \"2\"\r\n        }\r\n        if (prop.card.NFTtype === \"Trait\") {\r\n            address = \"1\"\r\n        }\r\n        if (prop.card.NFTtype === \"Skeletoon\") {\r\n          address = \"0\"\r\n        }\r\n        let txData = cTWMarket.methods.createMarketItem(address, prop.card.tokenID, salePrice).encodeABI();\r\n        web3.eth.sendTransaction(\r\n          {\r\n            from: prop.address,\r\n            to: aTWMarket,\r\n            value: \"0\",\r\n            data: txData,\r\n          }).on('receipt', function(receipt) {\r\n  \r\n          });\r\n      }\r\n\r\n    const approveForSale  = () => {\r\n        let address;\r\n        let contract;\r\n        if (prop.card.NFTtype === \"Glyph\") {\r\n            address = aTWG\r\n            contract = cTWG\r\n        }\r\n        if (prop.card.NFTtype === \"Trait\") {\r\n            address = aTWT\r\n            contract = cTWT\r\n        }\r\n        if (prop.card.NFTtype === \"Skeletoon\") {\r\n          address = aTWSP\r\n          contract = cTWSP\r\n        }\r\n        let txData = contract.methods.approve(aTWMarket, prop.card.tokenID).encodeABI();\r\n        web3.eth.sendTransaction(\r\n          {\r\n            from: prop.address,\r\n            to: address,\r\n            data: txData,\r\n          }).on('receipt', function(receipt) {\r\n            setApproval(1)\r\n          });\r\n      }\r\n\r\n    const buyListing  = () => {\r\n        let address;\r\n        if (prop.card.NFTtype === \"Glyph\") {\r\n            address = aTWG\r\n        }\r\n        if (prop.card.NFTtype === \"Trait\") {\r\n            address = aTWT\r\n        }\r\n        if (prop.card.NFTtype === \"Skeletoon\") {\r\n          address = aTWSP\r\n        }\r\n        let txData = cTWMarket.methods.createMarketSale(address, prop.card.marketID).encodeABI();\r\n        web3.eth.sendTransaction(\r\n          {\r\n            from: prop.address,\r\n            to: aTWMarket,\r\n            value: price,\r\n            data: txData,\r\n          }).on('receipt', function(receipt) {\r\n  \r\n          });\r\n      }\r\n\r\n    const cancelListing = () => {\r\n      let address;\r\n      if (prop.card.NFTtype === \"Glyph\") {\r\n          address = aTWG\r\n      }\r\n      if (prop.card.NFTtype === \"Trait\") {\r\n          address = aTWT\r\n      }\r\n      if (prop.card.NFTtype === \"Skeletoon\") {\r\n        address = aTWSP\r\n      }\r\n      let txData = cTWMarket.methods.cancelMarketSale(address, prop.card.marketID).encodeABI();\r\n      web3.eth.sendTransaction(\r\n        {\r\n          from: prop.address,\r\n          to: aTWMarket,\r\n          data: txData,\r\n        }).on('receipt', function(receipt) {\r\n\r\n        });\r\n    }\r\n\r\n    const displayMarket = () => {\r\n        if (marketRender === \"Buy\" && price !==null) {\r\n            return (\r\n                <>\r\n                <div className={\"ItemPrice\"}>{\"Price:\" + web3.utils.fromWei(price, 'ether') + \"FTM\"}</div>\r\n                <div id={\"ItemSeller\"}>{\"Seller: \" + seller}</div>\r\n                <button class={\"FilterBtn\"} id={\"MarketBtn\"} onClick={() => {\r\n                    buyListing()\r\n                }}>\r\n                {\"Buy\"}\r\n                </button>\r\n                </>\r\n            )\r\n        }\r\n        if (marketRender === \"List\") {\r\n            return (\r\n                <>\r\n                <input class={\"StrengthInput\"} id={\"PriceInput\"} type=\"number\" placeholder={\"Price: 0.00 FTM\"} onChange={e => {setSalePrice(web3.utils.toWei(e.target.value))}}/>\r\n                {isApproved === 1 && salePrice !== null? \r\n                <button class={\"FilterBtn\"} id={\"MarketBtn\"} onClick={() => {\r\n                    listItem()\r\n                }}>\r\n                {\"List on market\"}\r\n                </button>\r\n                :\r\n                <button class={\"FilterBtn\"} id={\"MarketBtn\"} onClick={() => {\r\n                    approveForSale()\r\n                }}>\r\n                {\"Approve for sale\"}\r\n                </button>\r\n                }\r\n                </>\r\n            )\r\n        }\r\n        if (marketRender === \"Cancel\" && price !==null) {\r\n            return (\r\n                <>\r\n                <div className={\"ItemPrice\"}>\r\n                {\"Price:\" + web3.utils.fromWei(price, 'ether') + \"FTM\"}</div>\r\n                <div id={\"ItemSeller\"}>{\"Seller: \" + seller}<br></br>{\"(You)\"}</div>\r\n                <button class={\"FilterBtn\"} id={\"MarketBtn\"} onClick={() => {\r\n                    cancelListing()\r\n                }}>\r\n                {\"Cancel Listing\"}\r\n                </button>\r\n                </>\r\n            )\r\n        } else {\r\n            return (<>\r\n            </>)\r\n        }\r\n    }\r\n    \r\n    \r\n\r\n\r\n  useEffect(() => {\r\n      setRenderImageType(prop.card.NFTtype)\r\n      let contract\r\n      if (prop.card.NFTtype === \"Skeletoon\")\r\n      { \r\n\r\n          let padGene = padder(prop.card.properties.gene)\r\n          let padStr = padder(prop.card.properties.str)\r\n          drawSkeletoonFull(padGene, padStr, 'market_canvas', 0, 1, 500)\r\n          contract = cTWSP\r\n      }\r\n        if (prop.card.NFTtype === \"Glyph\") {\r\n            contract = cTWG\r\n        }\r\n        if (prop.card.NFTtype === \"Trait\") {\r\n            contract = cTWT\r\n        }\r\n        contract.methods.getApproved(prop.card.tokenID).call((err,result) => {\r\n            if (result === aTWMarket){\r\n                setApproval(1)\r\n            } else {\r\n                setApproval(0)\r\n            }\r\n        })\r\n  }, [prop.card.NFTtype]) \r\n\r\n\r\n  useEffect(() => {\r\n    if (prop.card.marketID !== null) {\r\n        cTWMarket.methods.fetchSingle(prop.card.marketID).call(async (err,result) => { \r\n            if (!err){\r\n                console.log(result)\r\n                if (result[3].toLowerCase() === prop.address){\r\n                    setMarketRender(\"Cancel\")\r\n                    setPrice(result[5])\r\n                    setSeller(result[3])\r\n                } else {\r\n                    setMarketRender(\"Buy\")\r\n                    setPrice(result[5])\r\n                    setSeller(result[3])\r\n                }       \r\n            }\r\n        })\r\n    } else {\r\n        setMarketRender(\"List\")\r\n    }\r\n  },[prop.card.marketID])\r\n    \r\n  return (\r\n    <div id={\"cardDisplay\"}>\r\n        {displayImage()}\r\n        {displayMarket()}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default NFTcard","import React from 'react'\r\nimport { useEffect, useState } from \"react\";\r\nimport \"../../styles/Market.css\";\r\nimport TraitMap from \"../helpers/TraitMap.json\"\r\nimport { aTWG, aTWMarket, aTWSP, aTWT, cTWG, cTWMarket, cTWSP, cTWT } from '../helpers/Groups';\r\nimport { fetchMetadata } from '../../scripts/Helper';\r\nimport {\r\n    gen1Placeholder,\r\n    gen2Placeholder,\r\n    glyphDefault,\r\n    glyphInv,\r\n    icon_Bg_D,\r\n    icon_Bg_M,\r\n    icon_Body_D,\r\n    icon_Body_M,\r\n    icon_Cape_D,\r\n    icon_Cape_M,\r\n    icon_Eye_D,\r\n    icon_Eye_M,\r\n    icon_Hat_D,\r\n    icon_Hat_M,\r\n    icon_Head_D,\r\n    icon_Head_M,\r\n    icon_Item_D,\r\n    icon_Item_M,\r\n    icon_Mouth_D,\r\n    icon_Mouth_M,\r\n    icon_Pet_D,\r\n    icon_Pet_M,\r\n    traitInv\r\n  } from \"../../data/canvassrc\";\r\nimport NFTcard from './NFTcard';\r\nimport Web3 from \"web3\";\r\n\r\nconst Market = (prop) => {\r\n    const [selectedDisplay, setSelectedDisplay] = useState(\"Market\")\r\n    const [selectedAddress, setSelectedAddress] = useState(\"Skeletoons\")\r\n    const [filter, setFilter] = useState({base: null, skeletoon: {\r\n        0 : {genes: null, strength:null},\r\n        1 : {genes: null, strength:null},\r\n        2 : {genes: null, strength:null},\r\n        3 : {genes: null, strength:null},\r\n        4 : {genes: null, strength:null},\r\n        5 : {genes: null, strength:null},\r\n        6 : {genes: null, strength:null},\r\n        7 : {genes: null, strength:null},\r\n        8 : {genes: null, strength:null},\r\n        9 : {genes: null, strength:null},\r\n        10 : {genes: null, strength:null},\r\n        11 : {genes: null, strength:null},\r\n        12 : {genes: null, strength:null},\r\n        13 : {genes: null, strength:null},\r\n        14 : {genes: null, strength:null},\r\n        15 : {genes: null, strength:null},\r\n        16 : {genes: null, strength:null},\r\n        17 : {genes: null, strength:null}\r\n    }, trait: {type:null, applies:null}, glyph:{strength:null, applies:null}})\r\n    const [constructor, setConstructor] = useState(\"default\");\r\n    const [page, setPage] = useState(0);\r\n    const [cardOpen, setCardOpen] = useState(0);\r\n    const [cardItem, setCardItem] = useState({NFTtype: null, tokenID: null, properties: [], marketID: null});\r\n    const [marketItems, setMarketItems] = useState({skeletoons: [], traits: [], glyphs: []});\r\n    const [inventory, setInventory] = useState({skeletoons: [], traits: [], glyphs: []})\r\n    const [listings, setListings] = useState({skeletoons: [], traits: [], glyphs: []})\r\n    const [filtered, setFiltered] = useState({skeletoons: [], traits: [], glyphs: []})\r\n    const [filterBool, setFilterBool] = useState(0);\r\n\r\n\r\n    let geneIcons = [\r\n        icon_Bg_D,\r\n        icon_Pet_D,\r\n        icon_Body_D,\r\n        icon_Mouth_D,\r\n        icon_Head_D,\r\n        icon_Eye_D,\r\n        icon_Hat_D,\r\n        icon_Item_D,\r\n        icon_Cape_D,\r\n        icon_Bg_M,\r\n        icon_Pet_M,\r\n        icon_Body_M,\r\n        icon_Mouth_M,\r\n        icon_Head_M,\r\n        icon_Eye_M,\r\n        icon_Hat_M,\r\n        icon_Item_M,\r\n        icon_Cape_M,\r\n      ];\r\n\r\n      let geneIconsTrait = [\r\n        icon_Bg_D,\r\n        icon_Pet_D,\r\n        icon_Body_D,\r\n        icon_Mouth_D,\r\n        icon_Head_D,\r\n        icon_Eye_D,\r\n        icon_Hat_D,\r\n        icon_Item_D,\r\n        icon_Cape_D\r\n      ];\r\n      //TEMP\r\n      const contract = cTWSP;\r\n      const TWT = cTWT;\r\n      const TWG = cTWG;\r\n      const cMarket = cTWMarket;\r\n      const aMarket = aTWMarket;\r\n\r\n      const web3 = new Web3(Web3.givenProvider);\r\n\r\n      const fetchInventoryGlyph = (inventoryLoadOld) => {\r\n        TWG.methods.walletOfOwner(prop.address).call(async (err,result) => {\r\n            if (!err){\r\n                TWG.methods.getGlyphPropertiesBatch(result).call( async (err,result) => {\r\n                    let invTemp = inventoryLoadOld\r\n                    for (let i = 0; i < result.length; i= i+3){\r\n                        let temp = {id: result[i], strength: result[i+1], appliesTo:result[i+2]}\r\n                        invTemp.glyphs = [...invTemp.glyphs, temp];\r\n                    } \r\n                    setInventory(invTemp);\r\n                })\r\n            }\r\n        })  \r\n      }\r\n\r\n      const fetchInventoryTrait = (inventoryLoadOld) => {\r\n        TWT.methods.walletOfOwner(prop.address).call(async (err,result) => {\r\n            if (!err){\r\n                TWT.methods.getTraitPropertiesBatch(result).call( async (err,result) => {\r\n                    let invTemp = inventoryLoadOld\r\n                    for (let i = 0; i < result.length; i= i+2){\r\n                        let temp = {id: result[i], typeId: result[i+1]}\r\n                        invTemp.traits = [...invTemp.traits, temp];\r\n                    } \r\n                    setInventory(invTemp);\r\n                    fetchInventoryGlyph(invTemp)\r\n                })\r\n            }\r\n        })\r\n      }\r\n\r\n      const fetchInventory = () => {\r\n          let inventoryLoad = {skeletoons: [], traits: [], glyphs: []}\r\n          contract.methods.walletOfOwner(prop.address).call( async (err,result) => {\r\n              if (!err){\r\n                  contract.methods.getSkeletoonPropertiesBatch(result).call( async (err,result) => {\r\n                      for (let i = 0; i < result.length; i= i+3){\r\n                          let temp = {id: result[i], gene: result[i+1], str: result[i+2]}\r\n                          inventoryLoad.skeletoons = [...inventoryLoad.skeletoons, temp];\r\n                      }\r\n                    setInventory(inventoryLoad);\r\n                    fetchInventoryTrait(inventoryLoad)\r\n                  })\r\n              }\r\n          })\r\n      }\r\n\r\n      const fetchListedGlyph = (marketLeft, marketOld) => {\r\n        let glyphIds = marketLeft.filter(item => ((item[1] === aTWG)&& (item[6] === \"0\"))).map(item => item[2])\r\n        let glyphsMarketID = marketLeft.filter(item => ((item[1] === aTWG)&& (item[6] === \"0\") )).map(item => item[0])\r\n        let glyphsPrice = marketLeft.filter(item => ((item[1] === aTWG) && (item[6] === \"0\") )).map(item => item[5])\r\n                TWG.methods.getGlyphPropertiesBatch(glyphIds).call( async (err,result) => {\r\n                    if (!err){\r\n                    let market = marketOld\r\n                    for (let i = 0; i < result.length; i= i+3){\r\n                        let temp = {id: result[i], strength: result[i+1], appliesTo:result[i+2], marketId:glyphsMarketID[i], price: glyphsPrice[i] }\r\n                        market.glyphs = [...market.glyphs, temp];\r\n                    } \r\n                    setMarketItems(market)\r\n                }\r\n                })\r\n      }\r\n\r\n      const fetchListedTrait = (marketLeft, marketOld) => {\r\n        let traitIds = marketLeft.filter(item => ((item[1] === aTWT)&& (item[6] === \"0\"))).map(item => item[2])\r\n        let traitsMarketID = marketLeft.filter(item => ((item[1] === aTWT)&& (item[6] === \"0\") )).map(item => item[0])\r\n        let traitsPrice = marketLeft.filter(item => ((item[1] === aTWSP) && (item[6] === \"0\") )).map(item => item[5])\r\n                TWT.methods.getTraitPropertiesBatch(traitIds).call( async (err,result) => {\r\n                    if (!err){\r\n                    let market = marketOld\r\n                    for (let i = 0; i < result.length; i= i+2){\r\n                        let temp = {id: result[i], typeId: result[i+1], marketId: traitsMarketID[i], price: traitsPrice[i]}\r\n                        market.traits = [...market.traits, temp];\r\n                    } \r\n                    setMarketItems(market)\r\n                    fetchListedGlyph(marketLeft, market)\r\n                }\r\n                })\r\n      }\r\n\r\n      const fetchListed = () => {\r\n          let market = {skeletoons: [], traits: [], glyphs: []}\r\n          cMarket.methods.fetchMarketItems().call(async (err,result) => {\r\n              if (!err){\r\n                console.log(result)\r\n                \r\n                let marketItems = result\r\n                //---------------------------------------------------------- && (item[6] === \"0\")\r\n                let skeletoonsMarket = marketItems.filter(item => ((item[1] === aTWSP) && (item[6] === \"0\"))).map(item => item[2])\r\n                let skeletoonsMarketID = marketItems.filter(item => ((item[1] === aTWSP) && (item[6] === \"0\") )).map(item => item[0])\r\n                let skeletoonsPrice = marketItems.filter(item => ((item[1] === aTWSP) && (item[6] === \"0\") )).map(item => item[5])\r\n                             \r\n                contract.methods.getSkeletoonPropertiesBatch(skeletoonsMarket).call( async (err,result) => {\r\n                    for (let i = 0; i < result.length; i= i+3){\r\n                        console.log (result)\r\n                        let temp = {id: result[i], gene: result[i+1], str: result[i+2], marketId: skeletoonsMarketID[i], price:skeletoonsPrice[i]}\r\n                        market.skeletoons = [...market.skeletoons, temp];\r\n                    }\r\n                  setMarketItems(market)\r\n                  fetchListedTrait(marketItems, market)\r\n                })\r\n              }\r\n          })\r\n      }\r\n\r\n      const fetchListingsGlyph = (marketLeft, marketOld) => {\r\n        let glyphIds = marketLeft.filter(item => ((item[1] === aTWG)&& (item[6] === \"0\") &&(item[3].toLowerCase() === prop.address))).map(item => item[2])\r\n        let glyphsMarketID = marketLeft.filter(item => ((item[1] === aTWG)&& (item[6] === \"0\") &&(item[3].toLowerCase() === prop.address))).map(item => item[0])\r\n        let glyphsPrice = marketLeft.filter(item => ((item[1] === aTWG) && (item[6] === \"0\") && (item[3].toLowerCase() === prop.address))).map(item => item[5])\r\n        TWG.methods.getGlyphPropertiesBatch(glyphIds).call( async (err,result) => {\r\n            if (!err){\r\n            let market = marketOld\r\n            for (let i = 0; i < result.length; i= i+3){\r\n                let temp = {id: result[i], strength: result[i+1], appliesTo:result[i+2], marketId:glyphsMarketID[i], price: glyphsPrice[i]}\r\n                market.glyphs = [...market.glyphs, temp];\r\n            } \r\n            setListings(market)\r\n        }\r\n        })\r\n        }\r\n\r\n        const fetchListingsTrait = (marketLeft, marketOld)  => {\r\n            let traitIds = marketLeft.filter(item => ((item[1] === aTWT)&& (item[6] === \"0\") &&(item[3].toLowerCase() === prop.address))).map(item => item[0])\r\n            let traitsMarketID = marketLeft.filter(item => ((item[1] === aTWT)&& (item[6] === \"0\") &&(item[3].toLowerCase() === prop.address))).map(item => item[2])\r\n            let traitsPrice = marketLeft.filter(item => ((item[1] === aTWT) && (item[6] === \"0\") && (item[3].toLowerCase() === prop.address))).map(item => item[5])\r\n                TWT.methods.getTraitPropertiesBatch(traitIds).call( async (err,result) => {\r\n                    if (!err){\r\n                    let market = marketOld\r\n                    for (let i = 0; i < result.length; i= i+2){\r\n                        let temp = {id: result[i], typeId: result[i+1], marketId: traitsMarketID[i], price:traitsPrice[i]}\r\n                        market.traits = [...market.traits, temp];\r\n                    } \r\n                    setListings(market)\r\n                    fetchListingsGlyph(marketLeft, market)\r\n                }\r\n                })\r\n        }\r\n\r\n        const fetchListings = () => {\r\n        let market = {skeletoons: [], traits: [], glyphs: []}\r\n        cMarket.methods.fetchMarketItems().call(async (err,result) => {\r\n            if (!err){\r\n                console.log(result)\r\n                \r\n                let marketItems = result\r\n                //---------------------------------------------------------- && (item[6] === \"0\")\r\n                let skeletoonsMarket = marketItems.filter(item => ((item[1] === aTWSP) && (item[6] === \"0\") && (item[3].toLowerCase() === prop.address))).map(item => item[2])\r\n                let skeletoonsMarketID = marketItems.filter(item => ((item[1] === aTWSP) && (item[6] === \"0\") && (item[3].toLowerCase() === prop.address))).map(item => item[0])\r\n                let skeletoonsPrice = marketItems.filter(item => ((item[1] === aTWSP) && (item[6] === \"0\") && (item[3].toLowerCase() === prop.address))).map(item => item[5])\r\n\r\n\r\n               \r\n                contract.methods.getSkeletoonPropertiesBatch(skeletoonsMarket).call( async (err,result) => {\r\n                    for (let i = 0; i < result.length; i= i+3){\r\n                        console.log (result)\r\n                        let temp = {id: result[i], gene: result[i+1], str: result[i+2], marketId: skeletoonsMarketID[i], price:skeletoonsPrice[i]}\r\n                        market.skeletoons = [...market.skeletoons, temp];\r\n                    }\r\n                setListings(market)\r\n                fetchListingsTrait(marketItems, market)\r\n                })\r\n            }\r\n        })\r\n        }\r\n\r\n        const padder = (input) => {\r\n            if (typeof input === \"string\")\r\n            {let padded = input\r\n                for (let i = 54 - padded.length; i >0 ; i--){\r\n                    padded = \"0\" + padded\r\n                }\r\n                return padded\r\n            } else {\r\n                return \r\n            }\r\n        }\r\n\r\n\r\n        function skeletoonFilterer(skele){\r\n            let passFail = 0;\r\n            for (let i = 0; i <18; i++){\r\n                let tempFilterGene = (filter.skeletoon[i].genes)\r\n                let tempFilterStr = (filter.skeletoon[i].strength)\r\n                let tempGene = parseInt(padder(skele.gene).substring(i*3,(i*3)+3))\r\n                let tempStr = parseInt(padder(skele.str).substring(i*3,(i*3)+3))\r\n               // console.log(\"gene:\" + tempFilterGene + \"str\" + tempFilterStr)\r\n               // console.log(\"TEMP gene:\" + tempGene + \"str\" + tempStr)\r\n                if (tempFilterGene === null) {\r\n                    passFail++;\r\n                } else \r\n                {\r\n                    tempFilterGene = parseInt(tempFilterGene)\r\n                    if (tempGene === tempFilterGene) {\r\n                    passFail++;\r\n                }}\r\n                if (tempFilterStr === null) {\r\n                    passFail++;\r\n                } else \r\n                {\r\n                    tempFilterStr = parseInt(tempFilterStr)\r\n                    if (tempStr >= tempFilterStr) {\r\n                    passFail++;\r\n                }}\r\n            }\r\n            console.log(passFail)\r\n            return (passFail === 36)              \r\n          }\r\n        \r\n          const filterSkeletoonsDisplay = () => {\r\n            let itemTemp= {skeletoons: [], traits: [], glyphs: []};\r\n            let marketCopy = marketItems\r\n            let invCopy = inventory\r\n            let listedCopy = listings\r\n            if (selectedDisplay === \"Market\"){\r\n                itemTemp = marketCopy\r\n            }\r\n            if (selectedDisplay === \"Inventory\"){\r\n                itemTemp = invCopy\r\n            }\r\n            if (selectedDisplay === \"Listings\"){\r\n                itemTemp = listedCopy\r\n            }\r\n            //FIX img src\r\n            console.log(itemTemp)\r\n            let itemsFiltered = {skeletoons: [], traits: [], glyphs: []}\r\n            itemsFiltered.skeletoons = itemTemp.skeletoons.filter(skeletoon => skeletoonFilterer(skeletoon))\r\n            //itemTemp.skeletoons = itemsFiltered.skeletoons\r\n            console.log(itemsFiltered)\r\n            if (selectedDisplay === \"Market\"){\r\n                itemsFiltered.traits = marketCopy.traits\r\n                itemsFiltered.glyphs = marketCopy.glyphs\r\n            }\r\n            if (selectedDisplay === \"Inventory\"){\r\n                itemsFiltered.traits = invCopy.traits\r\n                itemsFiltered.glyphs = invCopy.glyphs\r\n            }\r\n            if (selectedDisplay === \"Listings\"){\r\n                itemsFiltered.traits = listedCopy.traits\r\n                itemsFiltered.glyphs = listedCopy.glyphs\r\n            }\r\n            setFiltered(itemsFiltered)\r\n            console.log( filtered)\r\n        }\r\n\r\n        //TEMP\r\n    const selectDisplay = () => {\r\n        if (prop.address !== null) {\r\n            return (\r\n                <div id={\"SelectDisplayBtnGroup\"}>\r\n                    <button class={\"MarketBtn\"} id={\"MarketListings\"}onClick={() => {\r\n                    setSelectedDisplay(\"Market\")\r\n                    }}>{\"Market\"}\r\n                    </button>\r\n                    <button class={\"MarketBtn\"} id={\"MyInventory\"} onClick={() => {\r\n                    setSelectedDisplay(\"Inventory\")\r\n                    }}>{\"My Inventory\"}\r\n                    </button>\r\n                    <button class={\"MarketBtn\"} id={\"MyListings\"} onClick={() => {\r\n                    setSelectedDisplay(\"Listings\")\r\n                    }}>{\"My Listings\"}\r\n                    </button>\r\n                </div>\r\n            ) \r\n        } else {\r\n            return (\r\n                <div id={\"SelectDisplayBtnGroup\"}>\r\n                    <button class={\"MarketBtn\"} id={\"MarketListings\"}onClick={() => {\r\n                    setSelectedDisplay(\"Market\")\r\n                    }}>{\"Market\"}\r\n                    </button>\r\n                </div>\r\n            ) \r\n        }\r\n        \r\n    }\r\n\r\n    const selectAddress = () => {\r\n        return (\r\n            <div id={\"SelectAddressBtnGroup\"}>\r\n                <button class={\"MarketBtn\"} id={\"Skeletoons\"} onClick={() => {\r\n                setSelectedAddress(\"Skeletoons\")\r\n                }}>{\"Skeletoons\"}\r\n                </button>\r\n                <button class={\"MarketBtn\"} id={\"Traits\"} onClick={() => {\r\n                setSelectedAddress(\"Traits\")\r\n                }}>{\"Traits\"}\r\n                </button>\r\n                <button class={\"MarketBtn\"} id={\"Glyphs\"} onClick={() => {\r\n                setSelectedAddress(\"Glyphs\")\r\n                }}>{\"Glyphs\"}\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    function getKeyByValue(object, value) {\r\n        return Object.keys(object).find(key => TraitMap[key][\"1\"][2].toLowerCase().includes(value));\r\n    }\r\n\r\n    const skeleFilterInput = (geneValue,strValue, position) => {\r\n        let filterFlag = false;\r\n        let filtertemp = filter\r\n        let positionfiltered\r\n        if (position > 8){\r\n            positionfiltered = parseInt(((position - 9)*2)+1)\r\n        }\r\n        if (position <=8) {\r\n            positionfiltered = parseInt(position*2)\r\n        }\r\n        // jei null pakeist str i 0, jei 100+ pakeist i 100\r\n        if (strValue !== null & strValue <= 100 && strValue >= 0) {\r\n            filtertemp.skeletoon[positionfiltered].strength = strValue\r\n            filterFlag = true;\r\n            if (strValue === \"\"){\r\n                filtertemp.skeletoon[positionfiltered].strength = null; \r\n            }\r\n        }\r\n        if (geneValue !== null){\r\n            filtertemp.skeletoon[positionfiltered].genes = getKeyByValue(TraitMap, geneValue.toLowerCase())\r\n            if (geneValue === \"\") {\r\n                filterFlag = true;\r\n                filtertemp.skeletoon[positionfiltered].genes = null; \r\n            }\r\n        }\r\n        setFilter(filtertemp)\r\n        setFilterBool(1)\r\n        filterSkeletoonsDisplay()\r\n        \r\n    }\r\n\r\n    const listItems = geneIcons.map((gene, index) => (\r\n        <il class={\"GeneRow\"} id={\"Gene\" + (index)} key={gene}>\r\n          <img src={gene}></img>\r\n          <input class={\"TraitInput\"} type=\"text\" placeholder={\"Trait name\"} onChange={e => {skeleFilterInput(e.target.value, null, index)}}/>\r\n          <input class={\"StrengthInput\"} type=\"number\" placeholder={\"Strength\"} onChange={e => {skeleFilterInput(null ,e.target.value , index)}}/>\r\n          <br></br>\r\n          <br></br>\r\n        </il>\r\n      ));\r\n    \r\n\r\n    const skeletoonFilter = () => {\r\n        // list 18 - input search + volume for str\r\n        \r\n        return (\r\n          <div className={\"TraitFilter\"}>\r\n            {\"Search Skeletoon by trait values\"}\r\n            <ul>{listItems}</ul>\r\n          </div>\r\n        )\r\n    }\r\n\r\n    function traitFilterer(trait){\r\n        console.log(trait.typeId)\r\n        return (parseInt(trait.typeId) === parseInt(filter.trait.type))              \r\n      }\r\n    \r\n      const filterTraitsDisplay = () => {\r\n        let itemTemp= {skeletoons: [], traits: [], glyphs: []};\r\n        let marketCopy = marketItems\r\n        let invCopy = inventory\r\n        let listedCopy = listings\r\n        if (selectedDisplay === \"Market\"){\r\n            itemTemp = marketCopy\r\n        }\r\n        if (selectedDisplay === \"Inventory\"){\r\n            itemTemp = invCopy\r\n        }\r\n        if (selectedDisplay === \"Listings\"){\r\n            itemTemp = listedCopy\r\n        }\r\n        //FIX img src\r\n        console.log(itemTemp)\r\n        let itemsFiltered = {skeletoons: [], traits: [], glyphs: []}\r\n        itemsFiltered.traits = itemTemp.traits.filter(trait => traitFilterer(trait))\r\n        //itemTemp.skeletoons = itemsFiltered.skeletoons\r\n        console.log(itemsFiltered)\r\n        if (selectedDisplay === \"Market\"){\r\n            itemsFiltered.skeletoons = marketCopy.skeletoons\r\n            itemsFiltered.glyphs = marketCopy.glyphs\r\n        }\r\n        if (selectedDisplay === \"Inventory\"){\r\n            itemsFiltered.skeletoons = invCopy.skeletoons\r\n            itemsFiltered.glyphs = invCopy.glyphs\r\n        }\r\n        if (selectedDisplay === \"Listings\"){\r\n            itemsFiltered.skeletoons = listedCopy.skeletoons\r\n            itemsFiltered.glyphs = listedCopy.glyphs\r\n        }\r\n        setFiltered(itemsFiltered)\r\n        console.log( filtered)\r\n    }\r\n\r\n\r\n\r\n    const traitFilterInput = (type) => {\r\n        let filterFlag = false;\r\n        let filtertemp = filter\r\n        // jei null pakeist str i 0, jei 100+ pakeist i 100\r\n        if (type !== null) {\r\n            filtertemp.trait.type = getKeyByValue(TraitMap, type.toLowerCase())\r\n            if (type === \"\") {\r\n                filterFlag = true;\r\n                filtertemp.trait.type = null; \r\n            }\r\n            console.log(filtertemp)\r\n        }\r\n        setFilter(filtertemp)\r\n        console.log(filter)\r\n        setFilterBool(1)\r\n        filterTraitsDisplay()\r\n\r\n    }\r\n\r\n    /* Corner Cut  traitFilter\r\n                <br></br>\r\n                <br></br>\r\n                <input class={\"TraitInput\"} type=\"text\" placeholder={\"Trait Type\"} onChange={e => {traitFilterInput(null, e.target.value)}}/>\r\n    \r\n    */\r\n\r\n\r\n    const traitFilter = () => {\r\n        // input type checkbox applies to search bar\r\n        return (\r\n            <div className={\"TraitFilter\"}>\r\n                {\"Search Trait by type or applied position\"}\r\n                <br>\r\n                </br>\r\n                <input class={\"TraitInput\"} type=\"text\" placeholder={\"Trait name\"} onChange={e => {traitFilterInput(e.target.value)}}/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    function getKeyByValueGlyph (value) {\r\n        console.log(\"VALUE: \" + value )\r\n        let obj = {_512: \"background\", _256: \"pet\", _128: \"body\", _64:\"mouth\", _32: \"head\", _16: \"eyes\", _8: \"hat\" , _4:\"item\", _2 : \"cape\"}\r\n        return Object.keys(obj).find(key => obj[key].includes(value));\r\n    }\r\n\r\n    function glyphFilterer(glyph){\r\n        let filterPass = 0;\r\n        if (filter.glyph.strength === null){\r\n            filterPass++\r\n        } else {\r\n            if (parseInt(filter.glyph.strength) <= parseInt(glyph.strength)){\r\n                filterPass++\r\n            }\r\n        }\r\n        if (filter.glyph.applies === null){\r\n            filterPass++\r\n        } else {\r\n            if ( (parseInt(Math.floor(glyph.appliesTo/filter.glyph.applies)%2) ) === 1 ) {\r\n                filterPass++\r\n            }\r\n\r\n        }\r\n        console.log(filterPass)\r\n        return (filterPass === 2)              \r\n      }\r\n    \r\n      const filterGlyphsDisplay = () => {\r\n        let itemTemp= {skeletoons: [], traits: [], glyphs: []};\r\n        let marketCopy = marketItems\r\n        let invCopy = inventory\r\n        let listedCopy = listings\r\n        if (selectedDisplay === \"Market\"){\r\n            itemTemp = marketCopy\r\n        }\r\n        if (selectedDisplay === \"Inventory\"){\r\n            itemTemp = invCopy\r\n        }\r\n        if (selectedDisplay === \"Listings\"){\r\n            itemTemp = listedCopy\r\n        }\r\n        //FIX img src\r\n        console.log(itemTemp)\r\n        let itemsFiltered = {skeletoons: [], traits: [], glyphs: []}\r\n        itemsFiltered.glyphs = itemTemp.glyphs.filter(glyph => glyphFilterer(glyph))\r\n        //itemTemp.skeletoons = itemsFiltered.skeletoons\r\n        console.log(itemsFiltered)\r\n        if (selectedDisplay === \"Market\"){\r\n            itemsFiltered.skeletoons = marketCopy.skeletoons\r\n            itemsFiltered.traits = marketCopy.traits\r\n        }\r\n        if (selectedDisplay === \"Inventory\"){\r\n            itemsFiltered.skeletoons = invCopy.skeletoons\r\n            itemsFiltered.traits = invCopy.traits\r\n        }\r\n        if (selectedDisplay === \"Listings\"){\r\n            itemsFiltered.skeletoons = listedCopy.skeletoons\r\n            itemsFiltered.traits = listedCopy.traits\r\n        }\r\n        setFiltered(itemsFiltered)\r\n        console.log( filtered)\r\n    }\r\n\r\n    const glyphFilterInput = (str, appliesTo) => {\r\n        let filterFlag = false;\r\n        let filtertemp = filter\r\n        console.log( str , appliesTo)\r\n        // jei null pakeist str i 0, jei 100+ pakeist i 100\r\n        if (str !== null) {\r\n            filtertemp.glyph.strength = str\r\n            if (str === \"\") {\r\n                filterFlag = true;\r\n                filtertemp.glyph.strength = null; \r\n            }\r\n            console.log(filtertemp)\r\n        }\r\n        if (appliesTo !== null) {\r\n            filtertemp.glyph.applies = getKeyByValueGlyph(appliesTo.toLowerCase()).substring(1)\r\n            if (appliesTo === \"\") {\r\n                filterFlag = true;\r\n                filtertemp.glyph.applies = null; \r\n            }\r\n            console.log(filtertemp)\r\n        }\r\n        setFilter(filtertemp)\r\n        console.log(filter)\r\n        setFilterBool(1)\r\n        filterGlyphsDisplay()\r\n    }\r\n\r\n    const glyphFilter = () => {\r\n        return (\r\n            <div className={\"TraitFilter\"}>\r\n                {\"Search Glyph by strength or applied position\"}\r\n                <br>\r\n                </br>\r\n                <input class={\"TraitInput\"} type=\"number\" placeholder={\"Glyph Strength min.\"} onChange={e => {glyphFilterInput(e.target.value, null)}}/>\r\n                <br></br>\r\n                <br></br>\r\n                <input class={\"TraitInput\"} type=\"text\" placeholder={\"Glyph Applied position\"} onChange={e => {glyphFilterInput(null, e.target.value)}}/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const clearFilter = () => {\r\n        setFilter({base: null, skeletoon: {\r\n            0 : {genes: null, strength:null},\r\n            1 : {genes: null, strength:null},\r\n            2 : {genes: null, strength:null},\r\n            3 : {genes: null, strength:null},\r\n            4 : {genes: null, strength:null},\r\n            5 : {genes: null, strength:null},\r\n            6 : {genes: null, strength:null},\r\n            7 : {genes: null, strength:null},\r\n            8 : {genes: null, strength:null},\r\n            9 : {genes: null, strength:null},\r\n            10 : {genes: null, strength:null},\r\n            11 : {genes: null, strength:null},\r\n            12 : {genes: null, strength:null},\r\n            13 : {genes: null, strength:null},\r\n            14 : {genes: null, strength:null},\r\n            15 : {genes: null, strength:null},\r\n            16 : {genes: null, strength:null},\r\n            17 : {genes: null, strength:null}\r\n        }, trait: {type:null, applies:null}, glyph:{strength:null, applies:null}})\r\n        setFilterBool(0);\r\n        filterSkeletoonsDisplay()\r\n    }\r\n\r\n    /*\r\n            <button class={\"FilterBtn\"} id={\"LowPrice\"} onClick={() => {\r\n                \r\n                filtertemp.base = \"MinPrice\"\r\n                setFilter(filtertemp)\r\n                }}>\r\n        {\"Price - Low\"}\r\n        </button>\r\n        <button class={\"FilterBtn\"} id={\"HighPrice\"} onClick={() => {\r\n                filtertemp.base = \"MaxPrice\"\r\n                setFilter(filtertemp)\r\n                }}>\r\n        {\"Price - High\"}\r\n        </button>\r\n        <br></br>\r\n        <br></br>\r\n        <br></br>\r\n    */\r\n\r\n    const baseFilter = () => {\r\n        let filtertemp = filter\r\n        return (\r\n        <>\r\n\r\n        <button class={\"FilterBtn\"} id={\"Clear\"} onClick={() => {\r\n                clearFilter()\r\n                }}>\r\n        {\"Clear Filters\"}\r\n        </button>\r\n        </>\r\n        )\r\n    }\r\n\r\n    const selectFilter = () => {\r\n        return (\r\n            <div id={\"Filters\"}>\r\n                {baseFilter()}\r\n                {(selectedAddress == \"All\" || selectedAddress == \"Skeletoons\")? skeletoonFilter() : \"\"}\r\n                {(selectedAddress == \"All\" || selectedAddress == \"Traits\")? traitFilter() : \"\"}\r\n                {(selectedAddress == \"All\" || selectedAddress == \"Glyphs\")? glyphFilter() : \"\"}            \r\n            </div>\r\n        )\r\n    }\r\n\r\n    const openCard = (NFType, tokenId, index, marketId) => {\r\n        let displayArr\r\n        if (filterBool == 1){\r\n            displayArr = filtered\r\n        } else {\r\n            if (selectedDisplay === \"Listings\")\r\n            {\r\n                displayArr = listings\r\n            } else if (selectedDisplay === \"Inventory\") {\r\n                displayArr = inventory\r\n            } else if (selectedDisplay === \"Market\") {\r\n                displayArr = marketItems\r\n            }\r\n        }\r\n        setCardOpen(1);\r\n        console.log(\"INDEX:\" + (index  + (14*page)))\r\n        let card = {NFTtype: null, tokenID: null, properties: []}\r\n        card.NFTtype = NFType\r\n        card.tokenID = tokenId\r\n        card.marketID = marketId\r\n        if (NFType === \"Skeletoon\"){\r\n            let properties ={gene: null, str:null}\r\n            properties.gene = displayArr.skeletoons[(index  + (14*page))].gene\r\n            properties.str = displayArr.skeletoons[(index  + (14*page))].str\r\n            card.properties = properties\r\n        }\r\n        if (NFType === \"Trait\"){\r\n            let properties ={type: null}\r\n            properties.type = displayArr.traits[(index  + (14*page))].typeId\r\n            card.properties = properties\r\n        }\r\n        if (NFType === \"Glyph\"){\r\n            let properties ={applies: null ,str: null}\r\n            properties.applies = displayArr.glyphs[(index  + (14*page))].appliesTo\r\n            properties.str = displayArr.glyphs[(index  + (14*page))].strength\r\n            card.properties = properties\r\n        }\r\n        setCardItem(card);\r\n\r\n    }\r\n\r\n    const createCard = () => {\r\n        return (\r\n            <div id=\"CardOverlay\">\r\n                <button class= {\"MarketBtn\"} id={\"closeCard\"} onClick={() => {\r\n                    setCardOpen(0);\r\n                }}>{\"X\"}</button>\r\n                <NFTcard card={cardItem} address={prop.address} chain={prop.chain}></NFTcard>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const cardsDisplay = () => {\r\n        let pagedNFT \r\n        let length\r\n        let displayArr\r\n        if (filterBool == 1){\r\n            displayArr = filtered\r\n        } else {\r\n            displayArr = marketItems\r\n        }\r\n        if (selectedAddress === \"Skeletoons\")\r\n        {pagedNFT =  displayArr.skeletoons.slice(page*14, (page*14)+14)\r\n            var renderedOutput = pagedNFT.map((item, index) => <div className={\"card\"} onClick={() => {openCard(\"Skeletoon\", item.id, index, item.marketId)}}>\r\n            <img src={parseInt(item.id) <= 10000 ? gen1Placeholder : gen2Placeholder }></img>\r\n             {\"Token Id: \" + item.id}\r\n             <br></br> \r\n             {\"Price: \" + web3.utils.fromWei(item.price) + \" FTM\"}\r\n             </div>)\r\n             length = displayArr.skeletoons.length\r\n        }\r\n        if (selectedAddress === \"Traits\")\r\n        {pagedNFT =  displayArr.traits.slice(page*14, (page*14)+14)\r\n            var renderedOutput = pagedNFT.map((item, index )=> <div className={\"card\"} onClick={() => {openCard(\"Trait\", item.id, index, item.marketId)}}>\r\n            <img src={(traitInv + \"/\"+item.typeId + \".png\")}></img>\r\n             {\"Token Id: \" + item.id}\r\n             <br></br> \r\n             {\"Price: \" + web3.utils.fromWei(item.price) + \" FTM\"} \r\n             </div>)\r\n             length = displayArr.traits.length\r\n        }\r\n        if (selectedAddress === \"Glyphs\")\r\n        {pagedNFT =  displayArr.glyphs.slice(page*14, (page*14)+14)\r\n            var renderedOutput = pagedNFT.map((item, index) => <div className={\"card\"} onClick={() => {openCard(\"Glyph\", item.id, index, item.marketId)}}>\r\n            <img src={glyphInv + \"/\" + item.appliesTo + \".png\"}></img>\r\n             {\"Token Id: \" + item.id}\r\n             <br></br> \r\n             {\"Price: \" + web3.utils.fromWei(item.price) + \" FTM\"} \r\n             </div>)\r\n             length = displayArr.glyphs.length\r\n        }\r\n        console.log(pagedNFT)\r\n\r\n        //add cost into card bellow name\r\n        \r\n        return (\r\n            <div id={\"CardsDisplay\"}>\r\n                <div id={\"PageNav\"}>\r\n                    <button id={\"PrevPage\"} onClick={() => {\r\n                if (page > 0)\r\n                {setPage(page-1)}\r\n                }}>{\"<\"}</button>\r\n                    {\"  \" + ((page*15)) + \"...\" + ((page*15)+14) + \"  \"}\r\n                    <button id={\"NextPage\"} onClick={() => {\r\n                if (page*15 < length)\r\n                setPage(page+1)\r\n                }}>{\">\"}</button>\r\n                </div>\r\n                {renderedOutput}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const cardsInventory = () => {\r\n        let pagedNFT \r\n        let length\r\n        let displayArr\r\n        if (filterBool == 1){\r\n            displayArr = filtered\r\n        } else {\r\n            displayArr = inventory\r\n        }\r\n        if (selectedAddress === \"Skeletoons\")\r\n        {pagedNFT =  displayArr.skeletoons.slice(page*14, (page*14)+14)\r\n            var renderedOutput = pagedNFT.map((item, index) => <div className={\"card\"} onClick={() => {openCard(\"Skeletoon\", item.id, index, null)}}>\r\n            <img src={parseInt(item.id) <= 10000 ? gen1Placeholder : gen2Placeholder }></img>\r\n            {\"Token Id: \" + item.id}\r\n             </div>)\r\n             length = displayArr.skeletoons.length\r\n        }\r\n        if (selectedAddress === \"Traits\")\r\n        {pagedNFT =  displayArr.traits.slice(page*14, (page*14)+14)\r\n            var renderedOutput = pagedNFT.map((item, index )=> <div className={\"card\"} onClick={() => {openCard(\"Trait\", item.id, index, null)}}>\r\n            <img src={(traitInv + \"/\"+item.typeId + \".png\")}></img>\r\n            {\"Token Id: \" + item.id} \r\n             </div>)\r\n             length = displayArr.traits.length\r\n        }\r\n        if (selectedAddress === \"Glyphs\")\r\n        {pagedNFT =  displayArr.glyphs.slice(page*14, (page*14)+14)\r\n            var renderedOutput = pagedNFT.map((item, index) => <div className={\"card\"} onClick={() => {openCard(\"Glyph\", item.id, index, null)}}>\r\n            <img src={glyphInv + \"/\" + item.appliesTo + \".png\"}></img>\r\n            {\"Token Id: \" + item.id}\r\n             </div>)\r\n             length = displayArr.glyphs.length\r\n        }\r\n        console.log(pagedNFT)\r\n\r\n        //add cost into card bellow name\r\n        \r\n        return (\r\n            <div id={\"CardsDisplay\"}>\r\n                <div id={\"PageNav\"}>\r\n                    <button id={\"PrevPage\"} onClick={() => {\r\n                if (page > 0)\r\n                {setPage(page-1)}\r\n                }}>{\"<\"}</button>\r\n                    {\"  \" + ((page*15)) + \"...\" + ((page*15)+14) + \"  \"}\r\n                    <button id={\"NextPage\"} onClick={() => {\r\n                if (page*15 < length)\r\n                setPage(page+1)\r\n                }}>{\">\"}</button>\r\n                </div>\r\n                {renderedOutput}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const cardsListings = () => {\r\n        let pagedNFT \r\n        let length\r\n        let displayArr\r\n        if (filterBool == 1){\r\n            displayArr = filtered\r\n        } else {\r\n            displayArr = listings\r\n        }\r\n        if (selectedAddress === \"Skeletoons\")\r\n        {pagedNFT =  displayArr.skeletoons.slice(page*14, (page*14)+14)\r\n            var renderedOutput = pagedNFT.map((item, index) => <div className={\"card\"} onClick={() => {openCard(\"Skeletoon\", item.id, index, item.marketId)}}>\r\n            <img src={parseInt(item.id) <= 10000 ? gen1Placeholder : gen2Placeholder }></img>\r\n            {\"Token Id: \" + item.id}\r\n             <br></br> \r\n             {\"Price: \" + web3.utils.fromWei(item.price) + \" FTM\"} \r\n             </div>)\r\n             length = displayArr.skeletoons.length\r\n        }\r\n        if (selectedAddress === \"Traits\")\r\n        {pagedNFT =  displayArr.traits.slice(page*14, (page*14)+14)\r\n            var renderedOutput = pagedNFT.map((item, index )=> <div className={\"card\"} onClick={() => {openCard(\"Trait\", item.id, index, item.marketId)}}>\r\n            <img src={(traitInv + \"/\"+item.typeId + \".png\")}></img>\r\n            {\"Token Id: \" + item.id}\r\n             <br></br> \r\n             {\"Price: \" + web3.utils.fromWei(item.price) + \" FTM\"}  \r\n             </div>)\r\n             length = displayArr.traits.length\r\n        }\r\n        if (selectedAddress === \"Glyphs\")\r\n        {pagedNFT =  displayArr.glyphs.slice(page*14, (page*14)+14)\r\n            var renderedOutput = pagedNFT.map((item, index) => <div className={\"card\"} onClick={() => {openCard(\"Glyph\", item.id, index, item.marketId)}}>\r\n            <img src={glyphInv + \"/\" + item.appliesTo + \".png\"}></img>\r\n            {\"Token Id: \" + item.id}\r\n             <br></br> \r\n             {\"Price: \" + web3.utils.fromWei(item.price) + \" FTM\"} \r\n             </div>)\r\n             length = displayArr.glyphs.length\r\n        }\r\n        console.log(pagedNFT)\r\n\r\n        //add cost into card bellow name\r\n        \r\n        return (\r\n            <div id={\"CardsDisplay\"}>\r\n                <div id={\"PageNav\"}>\r\n                    <button id={\"PrevPage\"} onClick={() => {\r\n                if (page > 0)\r\n                {setPage(page-1)}\r\n                }}>{\"<\"}</button>\r\n                    {\"  \" + ((page*15)) + \"...\" + ((page*15)+14) + \"  \"}\r\n                    <button id={\"NextPage\"} onClick={() => {\r\n                if (page*15 < length)\r\n                setPage(page+1)\r\n                }}>{\">\"}</button>\r\n                </div>\r\n                {renderedOutput}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    \r\n    useEffect(() => {\r\n        fetchListings()\r\n        fetchListed()\r\n        if (prop.address !== null) {\r\n            fetchInventory()    \r\n        }\r\n    },[constructor, prop.address])\r\n\r\n    \r\n\r\n  return (\r\n    <div id={\"SelectDisplay\"}>\r\n        {cardOpen ? createCard() : \"\"}\r\n        {selectDisplay()}\r\n        {selectAddress()}\r\n        {selectFilter()}\r\n        {(selectedDisplay === \"Listings\")? cardsListings():\"\"}\r\n        {(selectedDisplay === \"Inventory\") ? cardsInventory():\"\"}\r\n        {(selectedDisplay === \"Market\") ? cardsDisplay():\"\"}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Market","import \"./App.css\";\nimport logo from \"./logo.svg\";\nimport { useEffect, useState } from 'react';\nimport Dashboard from './components/dashboard/Dashboard'\nimport Web3 from 'web3'\nimport { header_logo } from \"./data/canvassrc\";\nimport Market from \"./components/marketplace/Market\";\n\n\nfunction App() {\n\n  const [currentAccount, setCurrentAccount] = useState(null);\n  const [currentChain, setCurrentChain] = useState(null);\n  const [pageSelect, setPageSelect] = useState(\"ToonStone\")\n  const {ethereum} = window;\n  const web3 = new Web3(Web3.givenProvider)\n\n  const connectWalletHandler = async () => {\n    if (!ethereum) {\n      alert(\"Please install Metamask!\");\n    }\n\n    try {\n      const accounts = await ethereum.request({ method: 'eth_requestAccounts' });\n      console.log(\"Found an account! Address: \", accounts[0]);\n      setCurrentAccount(accounts[0]);\n      getChainId();\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  const connectWalletButton = () => {\n    \n    return (\n      <button onClick={connectWalletHandler} id='connectWallet'>\n        {currentAccount ? currentAccount : \"Connect Wallet\"}\n      </button>\n    )\n  }\n\n  const quickCanvas = () => {\n    \n  }\n\n  const getChainId = async () => {\n    ethereum.enable().then(async () => {\n\t\t\tlet chain = await web3.eth.getChainId();\n      setCurrentChain(chain)\n    });\n  }\n\n  const actionButtons = () => {\n    return (<>\n      <button class=\"button-wrapper\" id='ToonStone' onClick={() => {\n        setPageSelect(\"ToonStone\")\n        }}>{\"ToonStone\"}\n      </button>\n       <button class=\"button-wrapper\" id='Market' onClick={() => {\n        setPageSelect(\"Market\")\n        }}>{\"Marketplace\"}\n      </button>\n    </>)\n  }\n\n  useEffect(() => {\n    ethereum.on('accountsChanged', function () {\n      connectWalletHandler();\n    })\n    ethereum.on('chainChanged', () => {\n      getChainId();\n    });\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <header>\n            <img src={header_logo} id={\"logo\"}></img>\n            {actionButtons()}\n            {connectWalletButton()}\n        </header>\n        { pageSelect == \"ToonStone\" ?\n        <Dashboard address={currentAccount} chain={currentChain}>\n        </Dashboard> : <Market address={currentAccount} chain={currentChain}> </Market>}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Web3ReactProvider} from '@web3-react/core';\nimport Web3 from 'web3'\n\n\nfunction getLibrary(provider) {\n  return new Web3(provider)\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <Web3ReactProvider getLibrary={getLibrary}>\n    <App />\n    </Web3ReactProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}